(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

  // vendor/topbar.js
  var require_topbar = __commonJS({
    "vendor/topbar.js"(exports, module) {
      (function(window2, document2) {
        "use strict";
        (function() {
          var lastTime = 0;
          var vendors = ["ms", "moz", "webkit", "o"];
          for (var x2 = 0; x2 < vendors.length && !window2.requestAnimationFrame; ++x2) {
            window2.requestAnimationFrame = window2[vendors[x2] + "RequestAnimationFrame"];
            window2.cancelAnimationFrame = window2[vendors[x2] + "CancelAnimationFrame"] || window2[vendors[x2] + "CancelRequestAnimationFrame"];
          }
          if (!window2.requestAnimationFrame)
            window2.requestAnimationFrame = function(callback, element) {
              var currTime = new Date().getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id = window2.setTimeout(function() {
                callback(currTime + timeToCall);
              }, timeToCall);
              lastTime = currTime + timeToCall;
              return id;
            };
          if (!window2.cancelAnimationFrame)
            window2.cancelAnimationFrame = function(id) {
              clearTimeout(id);
            };
        })();
        var canvas, progressTimerId, fadeTimerId, currentProgress, showing, addEvent = function(elem, type, handler) {
          if (elem.addEventListener)
            elem.addEventListener(type, handler, false);
          else if (elem.attachEvent)
            elem.attachEvent("on" + type, handler);
          else
            elem["on" + type] = handler;
        }, options = {
          autoRun: true,
          barThickness: 3,
          barColors: {
            0: "rgba(26,  188, 156, .9)",
            ".25": "rgba(52,  152, 219, .9)",
            ".50": "rgba(241, 196, 15,  .9)",
            ".75": "rgba(230, 126, 34,  .9)",
            "1.0": "rgba(211, 84,  0,   .9)"
          },
          shadowBlur: 10,
          shadowColor: "rgba(0,   0,   0,   .6)",
          className: null
        }, repaint = function() {
          canvas.width = window2.innerWidth;
          canvas.height = options.barThickness * 5;
          var ctx = canvas.getContext("2d");
          ctx.shadowBlur = options.shadowBlur;
          ctx.shadowColor = options.shadowColor;
          var lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
          for (var stop in options.barColors)
            lineGradient.addColorStop(stop, options.barColors[stop]);
          ctx.lineWidth = options.barThickness;
          ctx.beginPath();
          ctx.moveTo(0, options.barThickness / 2);
          ctx.lineTo(Math.ceil(currentProgress * canvas.width), options.barThickness / 2);
          ctx.strokeStyle = lineGradient;
          ctx.stroke();
        }, createCanvas = function() {
          canvas = document2.createElement("canvas");
          var style = canvas.style;
          style.position = "fixed";
          style.top = style.left = style.right = style.margin = style.padding = 0;
          style.zIndex = 100001;
          style.display = "none";
          if (options.className)
            canvas.classList.add(options.className);
          document2.body.appendChild(canvas);
          addEvent(window2, "resize", repaint);
        }, topbar2 = {
          config: function(opts) {
            for (var key in opts)
              if (options.hasOwnProperty(key))
                options[key] = opts[key];
          },
          show: function() {
            if (showing)
              return;
            showing = true;
            if (fadeTimerId !== null)
              window2.cancelAnimationFrame(fadeTimerId);
            if (!canvas)
              createCanvas();
            canvas.style.opacity = 1;
            canvas.style.display = "block";
            topbar2.progress(0);
            if (options.autoRun) {
              (function loop() {
                progressTimerId = window2.requestAnimationFrame(loop);
                topbar2.progress("+" + 0.05 * Math.pow(1 - Math.sqrt(currentProgress), 2));
              })();
            }
          },
          progress: function(to) {
            if (typeof to === "undefined")
              return currentProgress;
            if (typeof to === "string") {
              to = (to.indexOf("+") >= 0 || to.indexOf("-") >= 0 ? currentProgress : 0) + parseFloat(to);
            }
            currentProgress = to > 1 ? 1 : to;
            repaint();
            return currentProgress;
          },
          hide: function() {
            if (!showing)
              return;
            showing = false;
            if (progressTimerId != null) {
              window2.cancelAnimationFrame(progressTimerId);
              progressTimerId = null;
            }
            (function loop() {
              if (topbar2.progress("+.1") >= 1) {
                canvas.style.opacity -= 0.05;
                if (canvas.style.opacity <= 0.05) {
                  canvas.style.display = "none";
                  fadeTimerId = null;
                  return;
                }
              }
              fadeTimerId = window2.requestAnimationFrame(loop);
            })();
          }
        };
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = topbar2;
        } else if (typeof define === "function" && define.amd) {
          define(function() {
            return topbar2;
          });
        } else {
          this.topbar = topbar2;
        }
      }).call(exports, window, document);
    }
  });

  // vendor/wheelnav.js
  var require_wheelnav = __commonJS({
    "vendor/wheelnav.js"() {
      wheelnav = function(divId, raphael, divWidth, divHeight) {
        this.holderId = "wheel";
        if (divId !== void 0 && divId !== null) {
          this.holderId = divId;
        }
        var holderDiv = document.getElementById(divId);
        if ((holderDiv === null || holderDiv === void 0) && (raphael === void 0 || raphael === null)) {
          return this;
        }
        var canvasWidth;
        var clearContent = true;
        if (raphael === void 0 || raphael === null) {
          var removeChildrens = [];
          for (var i2 = 0; i2 < holderDiv.children.length; i2++) {
            if (holderDiv.children[i2].localName === "svg") {
              removeChildrens.push(holderDiv.children[i2]);
            }
          }
          for (var i2 = 0; i2 < removeChildrens.length; i2++) {
            holderDiv.removeChild(removeChildrens[i2]);
          }
          if (divWidth !== void 0 && divWidth !== null) {
            if (divHeight === void 0 || divHeight === null) {
              divHeight = divWidth;
            }
            this.raphael = new Raphael(divId, divWidth, divHeight);
            canvasWidth = divWidth;
          } else {
            this.raphael = new Raphael(divId);
            canvasWidth = holderDiv.clientWidth;
          }
          this.raphael.setViewBox(0, 0, this.raphael.width, this.raphael.height, true);
        } else {
          this.raphael = raphael;
          canvasWidth = this.raphael.width;
          clearContent = false;
        }
        this.centerX = canvasWidth / 2;
        this.centerY = canvasWidth / 2;
        this.wheelRadius = canvasWidth / 2;
        this.navAngle = 0;
        this.sliceAngle = null;
        this.titleRotateAngle = null;
        this.initTitleRotate = false;
        this.clickModeRotate = true;
        this.rotateRound = false;
        this.rotateRoundCount = 0;
        this.clickModeSpreadOff = false;
        this.animatetimeCalculated = false;
        this.animateRepeatCount = 0;
        this.clockwise = true;
        this.multiSelect = false;
        this.hoverPercent = 1;
        this.selectedPercent = 1;
        this.clickablePercentMin = 0;
        this.clickablePercentMax = 1;
        this.currentPercent = null;
        this.cssMode = false;
        this.selectedToFront = true;
        this.selectedNavItemIndex = 0;
        this.navItemCount = 0;
        this.navItemCountLabeled = false;
        this.navItemCountLabelOffset = 0;
        this.navItems = [];
        this.navItemsEnabled = true;
        this.animateFinishFunction = null;
        this.navItemsContinuous = false;
        this.navItemsCentered = true;
        this.colors = colorpalette.defaultpalette;
        this.titleSpreadScale = null;
        this.spreaderEnable = false;
        this.spreaderRadius = 20;
        this.spreaderStartAngle = 0;
        this.spreaderSliceAngle = 360;
        this.spreaderPathFunction = spreaderPath().PieSpreader;
        this.spreaderPathCustom = null;
        this.spreaderInPercent = 1;
        this.spreaderOutPercent = 1;
        this.spreaderInTitle = "+";
        this.spreaderOutTitle = "-";
        this.spreaderTitleFont = null;
        this.spreaderPathInAttr = null;
        this.spreaderPathOutAttr = null;
        this.spreaderTitleInAttr = null;
        this.spreaderTitleOutAttr = null;
        this.spreaderInTitleWidth = null;
        this.spreaderInTitleHeight = null;
        this.spreaderOutTitleWidth = null;
        this.spreaderOutTitleHeight = null;
        this.minPercent = 0.01;
        this.maxPercent = 1;
        this.initPercent = 1;
        this.markerEnable = false;
        this.markerPathFunction = markerPath().TriangleMarker;
        this.markerPathCustom = null;
        this.currentClick = 0;
        this.animateLocked = false;
        this.slicePathAttr = null;
        this.sliceHoverAttr = null;
        this.sliceSelectedAttr = null;
        this.titleFont = "100 24px Impact, Charcoal, sans-serif";
        this.titleAttr = null;
        this.titleHoverAttr = null;
        this.titleSelectedAttr = null;
        this.titleWidth = null;
        this.titleHeight = null;
        this.titleHoverWidth = null;
        this.titleHoverHeight = null;
        this.titleSelectedWidth = null;
        this.titleSelectedHeight = null;
        this.linePathAttr = null;
        this.lineHoverAttr = null;
        this.lineSelectedAttr = null;
        this.slicePathCustom = null;
        this.sliceClickablePathCustom = null;
        this.sliceSelectedPathCustom = null;
        this.sliceHoverPathCustom = null;
        this.sliceInitPathCustom = null;
        this.sliceTransformCustom = null;
        this.sliceSelectedTransformCustom = null;
        this.sliceHoverTransformCustom = null;
        this.sliceInitTransformCustom = null;
        this.animateeffect = null;
        this.animatetime = null;
        if (slicePath()["PieSlice"] !== void 0) {
          this.slicePathFunction = slicePath().PieSlice;
        } else {
          this.slicePathFunction = slicePath().NullSlice;
        }
        this.sliceClickablePathFunction = null;
        this.sliceTransformFunction = null;
        this.sliceSelectedPathFunction = null;
        this.sliceSelectedTransformFunction = null;
        this.sliceHoverPathFunction = null;
        this.sliceHoverTransformFunction = null;
        this.sliceInitPathFunction = null;
        this.sliceInitTransformFunction = null;
        this.keynavigateEnabled = false;
        this.keynavigateOnlyFocus = false;
        this.keynavigateDownCode = 37;
        this.keynavigateDownCodeAlt = 40;
        this.keynavigateUpCode = 39;
        this.keynavigateUpCodeAlt = 38;
        this.parseWheel(holderDiv);
        return this;
      };
      wheelnav.prototype.initWheel = function(titles) {
        this.styleWheel();
        var navItem;
        if (this.navItemCount === 0) {
          if (titles === void 0 || titles === null || !Array.isArray(titles)) {
            titles = ["title-0", "title-1", "title-2", "title-3"];
          }
          this.navItemCount = titles.length;
        } else {
          titles = null;
        }
        for (i = 0; i < this.navItemCount; i++) {
          var itemTitle = "";
          if (this.navItemCountLabeled) {
            itemTitle = (i + this.navItemCountLabelOffset).toString();
          } else {
            if (titles !== null) {
              itemTitle = titles[i];
            } else {
              itemTitle = "";
            }
          }
          navItem = new wheelnavItem(this, itemTitle, i);
          this.navItems.push(navItem);
        }
        var colorIndex = 0;
        for (i = 0; i < this.navItems.length; i++) {
          this.navItems[i].fillAttr = this.colors[colorIndex];
          colorIndex++;
          if (colorIndex === this.colors.length) {
            colorIndex = 0;
          }
        }
      };
      wheelnav.prototype.createWheel = function(titles, withSpread) {
        if (this.currentPercent === null) {
          if (withSpread) {
            this.currentPercent = this.minPercent;
          } else {
            this.currentPercent = this.maxPercent;
          }
        }
        if (this.navItems.length === 0) {
          this.initWheel(titles);
        }
        if (this.selectedNavItemIndex !== null) {
          this.navItems[this.selectedNavItemIndex].selected = true;
        }
        for (i = 0; i < this.navItemCount; i++) {
          this.navItems[i].createNavItem();
        }
        if (this.keynavigateEnabled) {
          var thiswheelnav = this;
          var keyelement = window;
          if (this.keynavigateOnlyFocus) {
            keyelement = document.getElementById(this.holderId);
            if (!keyelement.hasAttribute("tabindex")) {
              keyelement.setAttribute("tabindex", 0);
            }
          }
          keyelement.addEventListener("keydown", this.keyNavigateFunction = function(e) {
            e = e || window.e;
            var keyCodeEvent = e.which || e.keyCode;
            if ([thiswheelnav.keynavigateDownCode, thiswheelnav.keynavigateDownCodeAlt, thiswheelnav.keynavigateUpCode, thiswheelnav.keynavigateUpCodeAlt].indexOf(e.keyCode) > -1) {
              e.preventDefault();
            }
            var keynavigate = null;
            if (keyCodeEvent === thiswheelnav.keynavigateUpCode || keyCodeEvent === thiswheelnav.keynavigateUpCodeAlt) {
              if (thiswheelnav.currentClick === thiswheelnav.navItemCount - 1) {
                keynavigate = 0;
              } else {
                keynavigate = thiswheelnav.currentClick + 1;
              }
            }
            if (keyCodeEvent === thiswheelnav.keynavigateDownCode || keyCodeEvent === thiswheelnav.keynavigateDownCodeAlt) {
              if (thiswheelnav.currentClick === 0) {
                keynavigate = thiswheelnav.navItemCount - 1;
              } else {
                keynavigate = thiswheelnav.currentClick - 1;
              }
            }
            if (keynavigate !== null) {
              thiswheelnav.navigateWheel(keynavigate);
            }
          });
        }
        this.spreader = new spreader(this);
        this.marker = new marker(this);
        this.refreshWheel();
        if (withSpread !== void 0) {
          this.spreadWheel();
        }
        return this;
      };
      wheelnav.prototype.removeWheel = function() {
        this.raphael.remove();
        if (this.keynavigateEnabled) {
          var keyelement = window;
          if (this.keynavigateOnlyFocus) {
            keyelement = document.getElementById(this.holderId);
            if (keyelement.hasAttribute("tabindex")) {
              keyelement.removeAttribute("tabindex");
            }
          }
          keyelement.removeEventListener("keydown", this.keyNavigateFunction);
        }
      };
      wheelnav.prototype.refreshWheel = function(withPathAndTransform) {
        for (i = 0; i < this.navItemCount; i++) {
          var navItem = this.navItems[i];
          navItem.setWheelSettings(withPathAndTransform);
          navItem.refreshNavItem(withPathAndTransform);
        }
        this.marker.setCurrentTransform();
        this.spreader.setCurrentTransform();
      };
      wheelnav.prototype.navigateWheel = function(clicked) {
        this.animateUnlock(true);
        if (this.clickModeRotate) {
          this.animateLocked = true;
        }
        var navItem;
        for (i = 0; i < this.navItemCount; i++) {
          navItem = this.navItems[i];
          navItem.hovered = false;
          if (i === clicked) {
            if (this.multiSelect) {
              navItem.selected = !navItem.selected;
            } else {
              navItem.selected = true;
              this.selectedNavItemIndex = i;
            }
          } else {
            if (!this.multiSelect) {
              navItem.selected = false;
            }
          }
          if (this.clickModeRotate) {
            var rotationAngle = this.navItems[clicked].navAngle - this.navItems[this.currentClick].navAngle;
            if (this.rotateRound) {
              if (this.clockwise && rotationAngle < 0) {
                rotationAngle = 360 + rotationAngle;
              }
              if (!this.clockwise && rotationAngle > 0) {
                rotationAngle = rotationAngle - 360;
              }
            }
            navItem.currentRotateAngle -= rotationAngle;
            var currentAnimateTime;
            if (this.animatetime != null) {
              currentAnimateTime = this.animatetime;
            } else {
              currentAnimateTime = 1500;
            }
            if (this.animatetimeCalculated && clicked !== this.currentClick) {
              navItem.animatetime = currentAnimateTime * (Math.abs(rotationAngle) / 360);
            }
            if (this.rotateRoundCount > 0) {
              if (this.clockwise) {
                navItem.currentRotateAngle -= this.rotateRoundCount * 360;
              } else {
                navItem.currentRotateAngle += this.rotateRoundCount * 360;
              }
              navItem.animatetime = currentAnimateTime * (this.rotateRoundCount + 1);
            }
          }
        }
        for (i = 0; i < this.navItemCount; i++) {
          navItem = this.navItems[i];
          navItem.setCurrentTransform(true, true);
          navItem.refreshNavItem();
        }
        this.currentClick = clicked;
        if (this.clickModeSpreadOff) {
          this.currentPercent = this.maxPercent;
          this.spreadWheel();
        } else {
          if (clicked !== null && !this.clickModeRotate) {
            this.marker.setCurrentTransform(this.navItems[this.currentClick].navAngle);
          } else {
            this.marker.setCurrentTransform();
          }
          this.spreader.setCurrentTransform(true);
        }
        if (clicked !== null && this.navItems[clicked].navigateFunction !== null) {
          this.navItems[clicked].navigateFunction();
        }
      };
      wheelnav.prototype.spreadWheel = function() {
        this.animateUnlock(true);
        this.animateLocked = true;
        if (this.currentPercent === this.maxPercent || this.currentPercent === null) {
          this.currentPercent = this.minPercent;
        } else {
          this.currentPercent = this.maxPercent;
        }
        for (i = 0; i < this.navItemCount; i++) {
          var navItem = this.navItems[i];
          navItem.hovered = false;
          navItem.setCurrentTransform(true, false);
        }
        this.marker.setCurrentTransform();
        this.spreader.setCurrentTransform();
        return this;
      };
      wheelnav.prototype.animateUnlock = function(force, withFinishFunction) {
        if (force !== void 0 && force === true) {
          for (var f = 0; f < this.navItemCount; f++) {
            this.navItems[f].navSliceUnderAnimation = false;
            this.navItems[f].navTitleUnderAnimation = false;
            this.navItems[f].navLineUnderAnimation = false;
            this.navItems[f].navSlice.stop();
            this.navItems[f].navLine.stop();
            this.navItems[f].navTitle.stop();
          }
        } else {
          for (var i2 = 0; i2 < this.navItemCount; i2++) {
            if (this.navItems[i2].navSliceUnderAnimation === true || this.navItems[i2].navTitleUnderAnimation === true || this.navItems[i2].navLineUnderAnimation === true) {
              return;
            }
          }
          this.animateLocked = false;
          if (this.animateFinishFunction !== null && withFinishFunction !== void 0 && withFinishFunction === true) {
            this.animateFinishFunction();
          }
        }
      };
      wheelnav.prototype.setTooltips = function(tooltips) {
        if (tooltips !== void 0 && tooltips !== null && Array.isArray(tooltips) && tooltips.length <= this.navItems.length) {
          for (var i2 = 0; i2 < tooltips.length; i2++) {
            this.navItems[i2].setTooltip(tooltips[i2]);
          }
        }
      };
      wheelnav.prototype.getItemId = function(index) {
        return "wheelnav-" + this.holderId + "-item-" + index;
      };
      wheelnav.prototype.getSliceId = function(index) {
        return "wheelnav-" + this.holderId + "-slice-" + index;
      };
      wheelnav.prototype.getClickableSliceId = function(index) {
        return "wheelnav-" + this.holderId + "-clickableslice-" + index;
      };
      wheelnav.prototype.getTitleId = function(index) {
        return "wheelnav-" + this.holderId + "-title-" + index;
      };
      wheelnav.prototype.getLineId = function(index) {
        return "wheelnav-" + this.holderId + "-line-" + index;
      };
      wheelnav.prototype.getSpreaderId = function() {
        return "wheelnav-" + this.holderId + "-spreader";
      };
      wheelnav.prototype.getSpreaderTitleId = function() {
        return "wheelnav-" + this.holderId + "-spreadertitle";
      };
      wheelnav.prototype.getMarkerId = function() {
        return "wheelnav-" + this.holderId + "-marker";
      };
      wheelnav.prototype.parseWheel = function(holderDiv) {
        if (holderDiv !== void 0 && holderDiv !== null) {
          var wheelnavData = holderDiv.hasAttribute("data-wheelnav");
          if (wheelnavData) {
            var parsedNavItems = [];
            var parsedNavItemsHref = [];
            var parsedNavItemsOnmouseup = [];
            var onlyInit = false;
            var wheelnavSlicepath = holderDiv.getAttribute("data-wheelnav-slicepath");
            if (wheelnavSlicepath !== null) {
              if (slicePath()[wheelnavSlicepath] !== void 0) {
                this.slicePathFunction = slicePath()[wheelnavSlicepath];
              }
            }
            var wheelnavColors = holderDiv.getAttribute("data-wheelnav-colors");
            if (wheelnavColors !== null) {
              this.colors = wheelnavColors.split(",");
            }
            var wheelnavWheelradius = holderDiv.getAttribute("data-wheelnav-wheelradius");
            if (wheelnavWheelradius !== null) {
              this.wheelRadius = Number(wheelnavWheelradius);
            }
            var wheelnavNavangle = holderDiv.getAttribute("data-wheelnav-navangle");
            if (wheelnavNavangle !== null) {
              this.navAngle = Number(wheelnavNavangle);
            }
            var wheelnavRotateOff = holderDiv.getAttribute("data-wheelnav-rotateoff");
            if (wheelnavRotateOff !== null) {
              this.clickModeRotate = false;
            }
            var wheelnavCssmode = holderDiv.getAttribute("data-wheelnav-cssmode");
            if (wheelnavCssmode !== null) {
              this.cssMode = true;
            }
            var wheelnavSpreader = holderDiv.getAttribute("data-wheelnav-spreader");
            if (wheelnavSpreader !== null) {
              this.spreaderEnable = true;
            }
            var wheelnavSpreaderRadius = holderDiv.getAttribute("data-wheelnav-spreaderradius");
            if (wheelnavSpreaderRadius !== null) {
              this.spreaderRadius = Number(wheelnavSpreaderRadius);
            }
            var wheelnavSpreaderPath = holderDiv.getAttribute("data-wheelnav-spreaderpath");
            if (wheelnavSpreaderPath !== null) {
              if (markerPath()[wheelnavSpreaderPath] !== void 0) {
                this.spreaderPathFunction = spreaderPath()[wheelnavSpreaderPath];
              }
            }
            var wheelnavMarker = holderDiv.getAttribute("data-wheelnav-marker");
            if (wheelnavMarker !== null) {
              this.markerEnable = true;
            }
            var wheelnavMarkerPath = holderDiv.getAttribute("data-wheelnav-markerpath");
            if (wheelnavMarkerPath !== null) {
              if (markerPath()[wheelnavMarkerPath] !== void 0) {
                this.markerPathFunction = markerPath()[wheelnavMarkerPath];
              }
            }
            var wheelnavTitleWidth = holderDiv.getAttribute("data-wheelnav-titlewidth");
            if (wheelnavTitleWidth !== null) {
              this.titleWidth = Number(wheelnavTitleWidth);
            }
            var wheelnavTitleHeight = holderDiv.getAttribute("data-wheelnav-titleheight");
            if (wheelnavTitleHeight !== null) {
              this.titleHeight = Number(wheelnavTitleHeight);
            }
            var wheelnavKeynav = holderDiv.getAttribute("data-wheelnav-keynav");
            if (wheelnavKeynav !== null) {
              this.keynavigateEnabled = true;
            }
            var wheelnavKeynavOnlyfocus = holderDiv.getAttribute("data-wheelnav-keynavonlyfocus");
            if (wheelnavKeynavOnlyfocus !== null) {
              this.keynavigateOnlyFocus = true;
            }
            var wheelnavKeynavDowncode = holderDiv.getAttribute("data-wheelnav-keynavdowncode");
            if (wheelnavKeynavDowncode !== null) {
              this.keynavigateDownCode = Number(wheelnavKeynavDowncode);
            }
            var wheelnavKeynavDowncodeAlt = holderDiv.getAttribute("data-wheelnav-keynavdowncodealt");
            if (wheelnavKeynavDowncodeAlt !== null) {
              this.keynavigateDownCodeAlt = Number(wheelnavKeynavDowncodeAlt);
            }
            var wheelnavKeynavUpcode = holderDiv.getAttribute("data-wheelnav-keynavupcode");
            if (wheelnavKeynavUpcode !== null) {
              this.keynavigateUpCode = Number(wheelnavKeynavUpcode);
            }
            var wheelnavKeynavUpcodeAlt = holderDiv.getAttribute("data-wheelnav-keynavupcodealt");
            if (wheelnavKeynavUpcodeAlt !== null) {
              this.keynavigateUpCodeAlt = Number(wheelnavKeynavUpcodeAlt);
            }
            var wheelnavOnlyinit = holderDiv.getAttribute("data-wheelnav-init");
            if (wheelnavOnlyinit !== null) {
              onlyInit = true;
            }
            for (var i2 = 0; i2 < holderDiv.children.length; i2++) {
              var wheelnavNavitemtext = holderDiv.children[i2].getAttribute("data-wheelnav-navitemtext");
              var wheelnavNavitemicon = holderDiv.children[i2].getAttribute("data-wheelnav-navitemicon");
              var wheelnavNavitemimg = holderDiv.children[i2].getAttribute("data-wheelnav-navitemimg");
              if (wheelnavNavitemtext !== null || wheelnavNavitemicon !== null || wheelnavNavitemimg !== null) {
                if (wheelnavNavitemtext !== null) {
                  parsedNavItems.push(wheelnavNavitemtext);
                } else if (wheelnavNavitemicon !== null) {
                  if (icon[wheelnavNavitemicon] !== void 0) {
                    parsedNavItems.push(icon[wheelnavNavitemicon]);
                  } else {
                    parsedNavItems.push(wheelnavNavitemicon);
                  }
                } else if (wheelnavNavitemimg !== null) {
                  parsedNavItems.push("imgsrc:" + wheelnavNavitemimg);
                } else {
                  continue;
                }
                if (holderDiv.children[i2].onmouseup !== void 0) {
                  parsedNavItemsOnmouseup.push(holderDiv.children[i2].onmouseup);
                } else {
                  parsedNavItemsOnmouseup.push(null);
                }
                var foundHref = false;
                for (var j = 0; j < holderDiv.children[i2].children.length; j++) {
                  if (holderDiv.children[i2].children[j].getAttribute("href") !== void 0) {
                    parsedNavItemsHref.push(holderDiv.children[i2].children[j].getAttribute("href"));
                  }
                }
                if (!foundHref) {
                  parsedNavItemsHref.push(null);
                }
              }
            }
            if (parsedNavItems.length > 0) {
              this.initWheel(parsedNavItems);
              for (var i2 = 0; i2 < parsedNavItemsOnmouseup.length; i2++) {
                this.navItems[i2].navigateFunction = parsedNavItemsOnmouseup[i2];
                this.navItems[i2].navigateHref = parsedNavItemsHref[i2];
              }
              if (!onlyInit) {
                this.createWheel();
              }
            }
          }
          var removeChildrens = [];
          for (var i2 = 0; i2 < holderDiv.children.length; i2++) {
            if (holderDiv.children[i2].localName !== "svg") {
              removeChildrens.push(holderDiv.children[i2]);
            }
          }
          for (var i2 = 0; i2 < removeChildrens.length; i2++) {
            holderDiv.removeChild(removeChildrens[i2]);
          }
        }
      };
      wheelnavItem = function(wheelnav3, title, itemIndex2) {
        this.wheelnav = wheelnav3;
        this.wheelItemIndex = itemIndex2;
        if (wheelnav3.clockwise) {
          this.itemIndex = itemIndex2;
        } else {
          this.itemIndex = -itemIndex2;
        }
        this.enabled = wheelnav3.navItemsEnabled;
        this.selected = false;
        this.hovered = false;
        this.navItem = null;
        this.navSlice = null;
        this.navTitle = null;
        this.navLine = null;
        this.navClickableSlice = null;
        this.navSliceCurrentTransformString = null;
        this.navTitleCurrentTransformString = null;
        this.navLineCurrentTransformString = null;
        this.navSliceUnderAnimation = false;
        this.navTitleUnderAnimation = false;
        this.navLineUnderAnimation = false;
        this.currentRotateAngle = 0;
        this.setTitle(title);
        this.tooltip = null;
        this.fillAttr = "#CCC";
        this.titleFont = this.wheelnav.titleFont;
        this.navigateHref = null;
        this.navigateFunction = null;
        this.titleWidth = null;
        this.titleHeight = null;
        this.titleHoverWidth = null;
        this.titleHoverHeight = null;
        this.titleSelectedWidth = null;
        this.titleSelectedHeight = null;
        this.animateeffect = null;
        this.animatetime = null;
        this.sliceInitPathFunction = null;
        this.sliceClickablePathFunction = null;
        this.slicePathFunction = null;
        this.sliceSelectedPathFunction = null;
        this.sliceHoverPathFunction = null;
        this.sliceTransformFunction = null;
        this.sliceSelectedTransformFunction = null;
        this.sliceHoverTransformFunction = null;
        this.sliceInitTransformFunction = null;
        this.slicePathCustom = null;
        this.sliceClickablePathCustom = null;
        this.sliceSelectedPathCustom = null;
        this.sliceHoverPathCustom = null;
        this.sliceInitPathCustom = null;
        this.sliceTransformCustom = null;
        this.sliceSelectedTransformCustom = null;
        this.sliceHoverTransformCustom = null;
        this.sliceInitTransformCustom = null;
        this.initPercent = null;
        this.minPercent = null;
        this.maxPercent = null;
        this.hoverPercent = null;
        this.selectedPercent = null;
        this.clickablePercentMin = null;
        this.clickablePercentMax = null;
        this.titleSpreadScale = null;
        this.sliceAngle = null;
        this.titleRotateAngle = null;
        this.styleNavItem();
        return this;
      };
      wheelnavItem.prototype.createNavItem = function() {
        this.setWheelSettings(false);
        if (this.navigateHref !== null) {
          this.navigateFunction = function() {
            window.location.href = this.navigateHref;
          };
        }
        if (!this.wheelnav.cssMode) {
          this.slicePathAttr.fill = this.fillAttr;
          this.sliceHoverAttr.fill = this.fillAttr;
          this.sliceSelectedAttr.fill = this.fillAttr;
        }
        if (!this.enabled) {
          if (!this.wheelnav.cssMode) {
            this.slicePathAttr.cursor = "default";
            this.sliceHoverAttr.cursor = "default";
            this.titleAttr.cursor = "default";
            this.titleHoverAttr.cursor = "default";
            this.linePathAttr.cursor = "default";
            this.lineHoverAttr.cursor = "default";
          }
          this.sliceClickablePathAttr.cursor = "default";
          this.sliceClickableHoverAttr.cursor = "default";
        }
        var prevItemIndex = this.wheelItemIndex - 1;
        var wheelSliceAngle = 360 / this.wheelnav.navItemCount;
        if (this.sliceAngle === null) {
          this.sliceAngle = 360 / this.wheelnav.navItemCount;
        }
        if (this.wheelnav.clockwise) {
          if (this.wheelnav.navItemsContinuous) {
            if (this.itemIndex === 0) {
              this.baseAngle = this.itemIndex * this.sliceAngle + (-this.sliceAngle / 2 + this.wheelnav.navAngle);
            } else {
              this.baseAngle = this.wheelnav.navItems[prevItemIndex].baseAngle + this.wheelnav.navItems[prevItemIndex].sliceAngle;
            }
          } else {
            if (this.wheelnav.navItemsCentered) {
              this.baseAngle = this.itemIndex * wheelSliceAngle + (-this.sliceAngle / 2 + this.wheelnav.navAngle);
            } else {
              this.baseAngle = this.itemIndex * wheelSliceAngle + (-wheelSliceAngle / 2 + this.wheelnav.navAngle);
              this.currentRotateAngle += wheelSliceAngle / 2 - this.wheelnav.navItems[0].sliceAngle / 2;
            }
          }
        } else {
          if (this.wheelnav.navItemsContinuous) {
            if (this.itemIndex === 0) {
              this.baseAngle = this.itemIndex * this.sliceAngle + (-this.sliceAngle / 2 + this.wheelnav.navAngle);
            } else {
              this.baseAngle = this.wheelnav.navItems[prevItemIndex].baseAngle - this.wheelnav.navItems[this.wheelItemIndex].sliceAngle;
            }
          } else {
            if (this.wheelnav.navItemsCentered) {
              this.baseAngle = this.itemIndex * wheelSliceAngle + (-this.sliceAngle / 2 + this.wheelnav.navAngle);
            } else {
              this.baseAngle = this.itemIndex * wheelSliceAngle + (-wheelSliceAngle / 2 + this.wheelnav.navAngle) + (wheelSliceAngle - this.sliceAngle);
              this.currentRotateAngle -= wheelSliceAngle / 2 - this.wheelnav.navItems[0].sliceAngle / 2;
            }
          }
        }
        this.navAngle = this.baseAngle + this.sliceAngle / 2;
        if (this.wheelnav.animatetimeCalculated) {
          this.animatetime = this.wheelnav.animatetime / this.wheelnav.navItemCount;
        }
        this.initPathsAndTransforms();
        var sliceInitPath = this.sliceInitPath;
        this.navSlice = this.wheelnav.raphael.path(sliceInitPath.slicePathString);
        this.navSlice.attr(this.slicePathAttr);
        this.navSlice.id = this.wheelnav.getSliceId(this.wheelItemIndex);
        this.navSlice.node.id = this.navSlice.id;
        this.navLine = this.wheelnav.raphael.path(sliceInitPath.linePathString);
        this.navLine.attr(this.linePathAttr);
        this.navLine.id = this.wheelnav.getLineId(this.wheelItemIndex);
        this.navLine.node.id = this.navLine.id;
        var currentTitle = this.initNavTitle;
        if (wheelnavTitle().isPathTitle(this.title)) {
          this.navTitle = this.wheelnav.raphael.path(currentTitle.path);
        } else if (wheelnavTitle().isImageTitle(this.title)) {
          this.navTitle = this.wheelnav.raphael.image(currentTitle.src, sliceInitPath.titlePosX - this.titleWidth / 2, sliceInitPath.titlePosY - this.titleHeight / 2, this.titleWidth, this.titleHeight);
        } else {
          this.navTitle = this.wheelnav.raphael.text(sliceInitPath.titlePosX, sliceInitPath.titlePosY, currentTitle.title);
        }
        this.navTitle.attr(this.titleAttr);
        this.navTitle.id = this.wheelnav.getTitleId(this.wheelItemIndex);
        this.navTitle.node.id = this.navTitle.id;
        this.navSliceCurrentTransformString = "";
        if (this.initTransform.sliceTransformString !== "") {
          this.navSliceCurrentTransformString += this.initTransform.sliceTransformString;
        }
        this.navLineCurrentTransformString = "";
        if (this.initTransform.lineTransformString !== "") {
          this.navLineCurrentTransformString += this.initTransform.lineTransformString;
        }
        this.navTitleCurrentTransformString = "";
        this.navTitleCurrentTransformString += this.getTitleRotateString(this.wheelnav.initTitleRotate);
        if (this.initTransform.titleTransformString !== "") {
          this.navTitleCurrentTransformString += this.initTransform.titleTransformString;
        }
        if (this.wheelnav.currentPercent < 0.05) {
          this.navTitleCurrentTransformString += ",s0.05";
        }
        if (this.navTitleSizeTransform !== void 0) {
          this.navTitleCurrentTransformString += this.navTitleSizeTransform;
        }
        this.navSlice.attr({ transform: this.navSliceCurrentTransformString });
        this.navLine.attr({ transform: this.navLineCurrentTransformString });
        this.navTitle.attr({ transform: this.navTitleCurrentTransformString });
        this.navItem = this.wheelnav.raphael.set();
        if (this.sliceClickablePathFunction !== null) {
          var sliceClickablePath = this.getCurrentClickablePath();
          this.navClickableSlice = this.wheelnav.raphael.path(sliceClickablePath.slicePathString).attr(this.sliceClickablePathAttr).toBack();
          this.navClickableSlice.id = this.wheelnav.getClickableSliceId(this.wheelItemIndex);
          this.navClickableSlice.node.id = this.navClickableSlice.id;
          this.navItem.push(this.navSlice, this.navLine, this.navTitle, this.navClickableSlice);
        } else {
          this.navItem.push(this.navSlice, this.navLine, this.navTitle);
        }
        this.setTooltip(this.tooltip);
        this.navItem.id = this.wheelnav.getItemId(this.wheelItemIndex);
        var thisWheelNav = this.wheelnav;
        var thisNavItem = this;
        var thisItemIndex = this.wheelItemIndex;
        if (this.enabled) {
          this.navItem.mouseup(function() {
            thisWheelNav.navigateWheel(thisItemIndex);
          });
          this.navItem.mouseover(function() {
            if (thisNavItem.hovered !== true) {
              thisNavItem.hoverEffect(thisItemIndex, true);
            }
          });
          this.navItem.mouseout(function() {
            thisNavItem.hovered = false;
            thisNavItem.hoverEffect(thisItemIndex, false);
          });
        }
        this.setCurrentTransform(true, false);
      };
      wheelnavItem.prototype.hoverEffect = function(hovered, isEnter) {
        if (this.wheelnav.animateLocked === false) {
          if (isEnter) {
            if (!this.selected) {
              this.hovered = true;
            }
          }
          this.refreshNavItem();
          if (this.hoverPercent !== 1 || this.sliceHoverPathFunction !== null || this.sliceHoverTransformFunction !== null || this.titleHover !== this.title || this.titleHoverWidth !== this.titleWidth || this.titleHoverHeight !== this.titleHeight) {
            this.setCurrentTransform(false, false);
          }
          this.wheelnav.marker.setCurrentTransform();
          this.wheelnav.spreader.setCurrentTransform(true);
        }
      };
      wheelnavItem.prototype.setCurrentTransform = function(locked, withFinishFunction) {
        if (!this.wheelnav.clickModeRotate || !this.navSliceUnderAnimation && !this.navTitleUnderAnimation && !this.navLineUnderAnimation) {
          if (locked !== void 0 && locked === true) {
            this.navSliceUnderAnimation = true;
            this.navTitleUnderAnimation = true;
            this.navLineUnderAnimation = true;
          }
          this.navSliceCurrentTransformString = "";
          if (this.wheelnav.clickModeRotate) {
            this.navSliceCurrentTransformString += this.getItemRotateString();
          }
          if (this.selected) {
            if (this.selectTransform.sliceTransformString !== void 0) {
              this.navSliceCurrentTransformString += this.selectTransform.sliceTransformString;
            }
          } else if (this.hovered) {
            if (this.hoverTransform.sliceTransformString !== void 0) {
              this.navSliceCurrentTransformString += this.hoverTransform.sliceTransformString;
            }
          }
          if (this.sliceTransform.sliceTransformString !== void 0) {
            this.navSliceCurrentTransformString += this.sliceTransform.sliceTransformString;
          }
          this.navLineCurrentTransformString = "";
          if (this.wheelnav.clickModeRotate) {
            this.navLineCurrentTransformString += this.getItemRotateString();
          }
          if (this.selected) {
            if (this.selectTransform.lineTransformString !== void 0) {
              this.navLineCurrentTransformString += this.selectTransform.lineTransformString;
            }
          } else if (this.hovered) {
            if (this.hoverTransform.lineTransformString !== void 0) {
              this.navLineCurrentTransformString += this.hoverTransform.lineTransformString;
            }
          }
          if (this.sliceTransform.lineTransformString !== void 0) {
            this.navLineCurrentTransformString += this.sliceTransform.lineTransformString;
          }
          this.navTitleCurrentTransformString = "";
          this.navTitleCurrentTransformString += this.getTitleRotateString(true);
          if (this.selected) {
            if (this.navTitleSizeSelectedTransform !== void 0) {
              this.navTitleCurrentTransformString += this.navTitleSizeSelectedTransform;
            }
            if (this.selectTransform.titleTransformString === "" || this.selectTransform.titleTransformString === void 0) {
              this.navTitleCurrentTransformString += ",s1";
            } else {
              this.navTitleCurrentTransformString += "," + this.selectTransform.titleTransformString;
            }
            if (this.wheelnav.currentPercent < 0.05) {
              this.navTitleCurrentTransformString += ",s0.05";
            }
          } else if (this.hovered) {
            if (this.navTitleSizeHoverTransform !== void 0) {
              this.navTitleCurrentTransformString += this.navTitleSizeHoverTransform;
            }
            if (this.hoverTransform.titleTransformString === "" || this.hoverTransform.titleTransformString === void 0) {
              this.navTitleCurrentTransformString += ",s1";
            } else {
              this.navTitleCurrentTransformString += "," + this.hoverTransform.titleTransformString;
            }
          } else if (this.wheelnav.currentPercent < 0.05) {
            this.navTitleCurrentTransformString += ",s0.05";
          } else if (this.titleSpreadScale) {
            this.navTitleCurrentTransformString += ",s" + this.wheelnav.currentPercent;
          } else {
            if (this.navTitleSizeTransform !== void 0) {
              this.navTitleCurrentTransformString += this.navTitleSizeTransform;
            }
            if (this.sliceTransform.titleTransformString === "" || this.sliceTransform.titleTransformString === void 0) {
              this.navTitleCurrentTransformString += ",s1";
            } else {
              this.navTitleCurrentTransformString += "," + this.sliceTransform.titleTransformString;
            }
          }
          var slicePath2 = this.getCurrentPath();
          var sliceTransformAttr = {};
          sliceTransformAttr = {
            path: slicePath2.slicePathString,
            transform: this.navSliceCurrentTransformString
          };
          var sliceClickableTransformAttr = {};
          if (this.sliceClickablePathFunction !== null) {
            var sliceClickablePath = this.getCurrentClickablePath();
            sliceClickableTransformAttr = {
              path: sliceClickablePath.slicePathString,
              transform: this.navSliceCurrentTransformString
            };
          }
          var lineTransformAttr = {};
          lineTransformAttr = {
            path: slicePath2.linePathString,
            transform: this.navLineCurrentTransformString
          };
          var currentTitle = this.getCurrentTitle();
          var titleTransformAttr = {};
          if (wheelnavTitle().isPathTitle(currentTitle.title)) {
            titleTransformAttr = {
              path: currentTitle.path,
              transform: this.navTitleCurrentTransformString
            };
          } else if (wheelnavTitle().isImageTitle(currentTitle.title)) {
            titleTransformAttr = {
              x: currentTitle.x,
              y: currentTitle.y,
              width: currentTitle.width,
              height: currentTitle.height,
              transform: this.navTitleCurrentTransformString
            };
            this.navTitle.attr({ src: currentTitle.src });
          } else {
            titleTransformAttr = {
              x: currentTitle.x,
              y: currentTitle.y,
              transform: this.navTitleCurrentTransformString
            };
            if (currentTitle.title !== null) {
              this.navTitle.attr({ text: currentTitle.title });
            }
          }
          var thisNavItem = this;
          var thisWheelnav = this.wheelnav;
          this.animSlice = Raphael.animation(sliceTransformAttr, this.animatetime, this.animateeffect, function() {
            thisNavItem.navSliceUnderAnimation = false;
            thisWheelnav.animateUnlock(false, withFinishFunction);
          });
          this.animLine = Raphael.animation(lineTransformAttr, this.animatetime, this.animateeffect, function() {
            thisNavItem.navLineUnderAnimation = false;
            thisWheelnav.animateUnlock(false, withFinishFunction);
          });
          this.animTitle = Raphael.animation(titleTransformAttr, this.animatetime, this.animateeffect, function() {
            thisNavItem.navTitleUnderAnimation = false;
            thisWheelnav.animateUnlock(false, withFinishFunction);
          });
          if (this.navClickableSlice !== null) {
            this.animClickableSlice = Raphael.animation(sliceClickableTransformAttr, this.animatetime, this.animateeffect);
          }
          var animateRepeatCount = this.wheelnav.animateRepeatCount;
          if (locked !== void 0 && locked === true) {
            if (this.wheelItemIndex === this.wheelnav.navItemCount - 1) {
              for (i = 0; i < this.wheelnav.navItemCount; i++) {
                var navItemSlice = this.wheelnav.navItems[i];
                navItemSlice.navSlice.animate(navItemSlice.animSlice.repeat(animateRepeatCount));
              }
              for (i = 0; i < this.wheelnav.navItemCount; i++) {
                var navItemLine = this.wheelnav.navItems[i];
                navItemLine.navLine.animate(navItemLine.animLine.repeat(animateRepeatCount));
              }
              for (i = 0; i < this.wheelnav.navItemCount; i++) {
                var navItemTitle = this.wheelnav.navItems[i];
                navItemTitle.navTitle.animate(navItemTitle.animTitle.repeat(animateRepeatCount));
              }
              if (this.wheelnav.sliceClickablePathFunction !== null) {
                for (i = 0; i < this.wheelnav.navItemCount; i++) {
                  var navItemClickableSlice = this.wheelnav.navItems[i];
                  if (navItemClickableSlice.navClickableSlice !== null) {
                    navItemClickableSlice.navClickableSlice.animate(navItemClickableSlice.animClickableSlice.repeat(animateRepeatCount));
                  }
                }
              }
            }
          } else {
            this.navSlice.animate(this.animSlice.repeat(animateRepeatCount));
            this.navLine.animate(this.animLine.repeat(animateRepeatCount));
            this.navTitle.animate(this.animTitle.repeat(animateRepeatCount));
            if (this.navClickableSlice !== null) {
              this.navClickableSlice.animate(this.animClickableSlice.repeat(animateRepeatCount));
            }
          }
        }
      };
      wheelnavItem.prototype.setTitle = function(title) {
        if (title === void 0) {
          this.title = null;
        } else {
          this.title = title;
        }
        this.titleHover = this.title;
        this.titleSelected = this.title;
      };
      wheelnavItem.prototype.setTooltip = function(tooltip) {
        if (tooltip !== null) {
          this.navItem.attr({ title: tooltip });
        }
      };
      wheelnavItem.prototype.refreshNavItem = function(withPathAndTransform) {
        if (this.selected) {
          this.navSlice.attr(this.sliceSelectedAttr);
          this.navLine.attr(this.lineSelectedAttr);
          this.navTitle.attr(this.titleSelectedAttr);
          if (this.navClickableSlice !== null) {
            this.navClickableSlice.attr(this.sliceClickableSelectedAttr);
          }
          if (this.wheelnav.selectedToFront) {
            this.navSlice.toFront();
            this.navLine.toFront();
            this.navTitle.toFront();
            if (this.navClickableSlice !== null) {
              this.navClickableSlice.toFront();
            }
          } else {
            if (this.navClickableSlice !== null) {
              this.navClickableSlice.toBack();
            }
            this.navTitle.toBack();
            this.navLine.toBack();
            this.navSlice.toBack();
          }
        } else if (this.hovered) {
          this.navSlice.attr(this.sliceHoverAttr).toFront();
          this.navLine.attr(this.lineHoverAttr).toFront();
          this.navTitle.attr(this.titleHoverAttr).toFront();
          if (this.navClickableSlice !== null) {
            this.navClickableSlice.attr(this.sliceClickableHoverAttr).toFront();
          }
        } else {
          this.navSlice.attr(this.slicePathAttr);
          this.navLine.attr(this.linePathAttr);
          this.navTitle.attr(this.titleAttr);
          if (this.navClickableSlice !== null) {
            this.navClickableSlice.attr(this.sliceClickablePathAttr);
          }
          if (this.navClickableSlice !== null) {
            this.navClickableSlice.toBack();
          }
          ;
          this.navTitle.toBack();
          this.navLine.toBack();
          this.navSlice.toBack();
        }
        if (withPathAndTransform !== void 0 && withPathAndTransform === true) {
          this.initPathsAndTransforms();
          this.setCurrentTransform(false, false);
        }
      };
      wheelnavItem.prototype.setWheelSettings = function(force) {
        if (this.wheelnav.slicePathAttr !== null) {
          this.slicePathAttr = JSON.parse(JSON.stringify(this.wheelnav.slicePathAttr));
        }
        if (this.wheelnav.sliceHoverAttr !== null) {
          this.sliceHoverAttr = JSON.parse(JSON.stringify(this.wheelnav.sliceHoverAttr));
        }
        if (this.wheelnav.sliceSelectedAttr !== null) {
          this.sliceSelectedAttr = JSON.parse(JSON.stringify(this.wheelnav.sliceSelectedAttr));
        }
        if (this.wheelnav.titleAttr !== null) {
          this.titleAttr = JSON.parse(JSON.stringify(this.wheelnav.titleAttr));
        }
        if (this.wheelnav.titleHoverAttr !== null) {
          this.titleHoverAttr = JSON.parse(JSON.stringify(this.wheelnav.titleHoverAttr));
        }
        if (this.wheelnav.titleSelectedAttr !== null) {
          this.titleSelectedAttr = JSON.parse(JSON.stringify(this.wheelnav.titleSelectedAttr));
        }
        if (this.wheelnav.titleRotateAngle !== null && this.titleRotateAngle === null) {
          this.titleRotateAngle = this.wheelnav.titleRotateAngle;
        }
        if (this.wheelnav.titleWidth !== null && this.titleWidth === null) {
          this.titleWidth = this.wheelnav.titleWidth;
        }
        if (this.wheelnav.titleHeight !== null && this.titleHeight === null) {
          this.titleHeight = this.wheelnav.titleHeight;
        }
        if (this.titleWidth !== null && this.titleHeight === null) {
          this.titleHeight = this.titleWidth;
        }
        if (this.titleWidth === null && this.titleHeight !== null) {
          this.titleWidth = this.titleHeight;
        }
        if (wheelnavTitle().isImageTitle(this.title)) {
          if (this.titleWidth === null) {
            this.titleWidth = 32;
          }
          if (this.titleHeight === null) {
            this.titleHeight = 32;
          }
        }
        if (this.wheelnav.titleHoverWidth !== null && this.titleHoverWidth === null) {
          this.titleHoverWidth = this.wheelnav.titleHoverWidth;
        }
        if (this.wheelnav.titleHoverHeight !== null && this.titleHoverHeight === null) {
          this.titleHoverHeight = this.wheelnav.titleHoverHeight;
        }
        if (this.titleHoverWidth !== null && this.titleHoverHeight === null) {
          this.titleHoverHeight = this.titleHoverWidth;
        }
        if (this.titleHoverWidth === null && this.titleHoverHeight !== null) {
          this.titleHoverWidth = this.titleHoverHeight;
        }
        if (this.wheelnav.titleSelectedWidth !== null && this.titleSelectedWidth === null) {
          this.titleSelectedWidth = this.wheelnav.titleSelectedWidth;
        }
        if (this.wheelnav.titleSelectedHeight !== null && this.titleSelectedHeight === null) {
          this.titleSelectedHeight = this.wheelnav.titleSelectedHeight;
        }
        if (this.titleSelectedWidth !== null && this.titleSelectedHeight === null) {
          this.titleSelectedHeight = this.titleSelectedWidth;
        }
        if (this.titleSelectedWidth === null && this.titleSelectedHeight !== null) {
          this.titleSelectedWidth = this.titleSelectedHeight;
        }
        if (this.titleHoverHeight === null) {
          this.titleHoverHeight = this.titleHeight;
        }
        if (this.titleHoverWidth === null) {
          this.titleHoverWidth = this.titleWidth;
        }
        if (this.titleSelectedHeight === null) {
          this.titleSelectedHeight = this.titleHeight;
        }
        if (this.titleSelectedWidth === null) {
          this.titleSelectedWidth = this.titleWidth;
        }
        if (this.wheelnav.linePathAttr !== null) {
          this.linePathAttr = JSON.parse(JSON.stringify(this.wheelnav.linePathAttr));
        }
        if (this.wheelnav.lineHoverAttr !== null) {
          this.lineHoverAttr = JSON.parse(JSON.stringify(this.wheelnav.lineHoverAttr));
        }
        if (this.wheelnav.lineSelectedAttr !== null) {
          this.lineSelectedAttr = JSON.parse(JSON.stringify(this.wheelnav.lineSelectedAttr));
        }
        if (this.animateeffect === null || force) {
          if (this.wheelnav.animateeffect !== null) {
            this.animateeffect = this.wheelnav.animateeffect;
          } else {
            this.animateeffect = "bounce";
          }
        }
        if (this.animatetime === null || force) {
          if (this.wheelnav.animatetime !== null) {
            this.animatetime = this.wheelnav.animatetime;
          } else {
            this.animatetime = 1500;
          }
        }
        if (this.title !== null) {
          if (this.sliceInitPathFunction === null || force) {
            this.sliceInitPathFunction = this.wheelnav.sliceInitPathFunction;
          }
          if (this.sliceClickablePathFunction === null || force) {
            this.sliceClickablePathFunction = this.wheelnav.sliceClickablePathFunction;
          }
          if (this.slicePathFunction === null || force) {
            this.slicePathFunction = this.wheelnav.slicePathFunction;
          }
          if (this.sliceSelectedPathFunction === null || force) {
            this.sliceSelectedPathFunction = this.wheelnav.sliceSelectedPathFunction;
          }
          if (this.sliceHoverPathFunction === null || force) {
            this.sliceHoverPathFunction = this.wheelnav.sliceHoverPathFunction;
          }
          if (this.sliceTransformFunction === null || force) {
            this.sliceTransformFunction = this.wheelnav.sliceTransformFunction;
          }
          if (this.sliceSelectedTransformFunction === null || force) {
            this.sliceSelectedTransformFunction = this.wheelnav.sliceSelectedTransformFunction;
          }
          if (this.sliceHoverTransformFunction === null || force) {
            this.sliceHoverTransformFunction = this.wheelnav.sliceHoverTransformFunction;
          }
          if (this.sliceInitTransformFunction === null || force) {
            this.sliceInitTransformFunction = this.wheelnav.sliceInitTransformFunction;
          }
        } else {
          this.sliceInitPathFunction = slicePath().NullInitSlice;
          this.sliceClickablePathFunction = slicePath().NullSlice;
          this.slicePathFunction = slicePath().NullSlice;
          this.sliceSelectedPathFunction = null;
          this.sliceHoverPathFunction = null;
          this.sliceTransformFunction = null;
          this.sliceSelectedTransformFunction = null;
          this.sliceHoverTransformFunction = null;
          this.sliceInitTransformFunction = null;
        }
        if (this.slicePathCustom === null || force) {
          this.slicePathCustom = this.wheelnav.slicePathCustom;
        }
        if (this.sliceClickablePathCustom === null || force) {
          this.sliceClickablePathCustom = this.wheelnav.sliceClickablePathCustom;
        }
        if (this.sliceSelectedPathCustom === null || force) {
          this.sliceSelectedPathCustom = this.wheelnav.sliceSelectedPathCustom;
        }
        if (this.sliceHoverPathCustom === null || force) {
          this.sliceHoverPathCustom = this.wheelnav.sliceHoverPathCustom;
        }
        if (this.sliceInitPathCustom === null || force) {
          this.sliceInitPathCustom = this.wheelnav.sliceInitPathCustom;
        }
        if (this.sliceTransformCustom === null || force) {
          this.sliceTransformCustom = this.wheelnav.sliceTransformCustom;
        }
        if (this.sliceSelectedTransformCustom === null || force) {
          this.sliceSelectedTransformCustom = this.wheelnav.sliceSelectedTransformCustom;
        }
        if (this.sliceHoverTransformCustom === null || force) {
          this.sliceHoverTransformCustom = this.wheelnav.sliceHoverTransformCustom;
        }
        if (this.sliceInitTransformCustom === null || force) {
          this.sliceInitTransformCustom = this.wheelnav.sliceInitTransformCustom;
        }
        if (this.initPercent === null || force) {
          this.initPercent = this.wheelnav.initPercent;
        }
        if (this.minPercent === null || force) {
          this.minPercent = this.wheelnav.minPercent;
        }
        if (this.maxPercent === null || force) {
          this.maxPercent = this.wheelnav.maxPercent;
        }
        if (this.hoverPercent === null || force) {
          this.hoverPercent = this.wheelnav.hoverPercent;
        }
        if (this.selectedPercent === null || force) {
          this.selectedPercent = this.wheelnav.selectedPercent;
        }
        if (this.clickablePercentMin === null || force) {
          this.clickablePercentMin = this.wheelnav.clickablePercentMin;
        }
        if (this.clickablePercentMax === null || force) {
          this.clickablePercentMax = this.wheelnav.clickablePercentMax;
        }
        if (this.titleSpreadScale === null || force) {
          if (this.wheelnav.titleSpreadScale !== null) {
            this.titleSpreadScale = this.wheelnav.titleSpreadScale;
          } else {
            this.titleSpreadScale = false;
          }
        }
        if (this.sliceAngle === null || force) {
          if (this.wheelnav.sliceAngle !== null) {
            this.sliceAngle = this.wheelnav.sliceAngle;
          }
        }
      };
      wheelnavItem.prototype.initPathsAndTransforms = function() {
        this.sliceHelper = new pathHelper();
        this.sliceHelper.centerX = this.wheelnav.centerX;
        this.sliceHelper.centerY = this.wheelnav.centerY;
        this.sliceHelper.wheelRadius = this.wheelnav.wheelRadius;
        this.sliceHelper.startAngle = this.baseAngle;
        this.sliceHelper.sliceAngle = this.sliceAngle;
        this.sliceHelper.itemIndex = this.itemIndex;
        this.slicePathMin = this.slicePathFunction(this.sliceHelper, this.minPercent, this.slicePathCustom);
        this.slicePathMax = this.slicePathFunction(this.sliceHelper, this.maxPercent, this.slicePathCustom);
        if (this.sliceSelectedPathFunction !== null) {
          this.selectedSlicePathMin = this.sliceSelectedPathFunction(this.sliceHelper, this.selectedPercent * this.minPercent, this.sliceSelectedPathCustom);
        } else {
          this.selectedSlicePathMin = this.slicePathFunction(this.sliceHelper, this.selectedPercent * this.minPercent, this.sliceSelectedPathCustom);
        }
        if (this.sliceSelectedPathFunction !== null) {
          this.selectedSlicePathMax = this.sliceSelectedPathFunction(this.sliceHelper, this.selectedPercent * this.maxPercent, this.sliceSelectedPathCustom);
        } else {
          this.selectedSlicePathMax = this.slicePathFunction(this.sliceHelper, this.selectedPercent * this.maxPercent, this.sliceSelectedPathCustom);
        }
        if (this.sliceHoverPathFunction !== null) {
          this.hoverSlicePathMin = this.sliceHoverPathFunction(this.sliceHelper, this.hoverPercent * this.minPercent, this.sliceHoverPathCustom);
        } else {
          this.hoverSlicePathMin = this.slicePathFunction(this.sliceHelper, this.hoverPercent * this.minPercent, this.sliceHoverPathCustom);
        }
        if (this.sliceHoverPathFunction !== null) {
          this.hoverSlicePathMax = this.sliceHoverPathFunction(this.sliceHelper, this.hoverPercent * this.maxPercent, this.sliceHoverPathCustom);
        } else {
          this.hoverSlicePathMax = this.slicePathFunction(this.sliceHelper, this.hoverPercent * this.maxPercent, this.sliceHoverPathCustom);
        }
        if (this.sliceClickablePathFunction !== null) {
          this.clickableSlicePathMin = this.sliceClickablePathFunction(this.sliceHelper, this.clickablePercentMin, this.sliceClickablePathCustom);
          this.clickableSlicePathMax = this.sliceClickablePathFunction(this.sliceHelper, this.clickablePercentMax, this.sliceClickablePathCustom);
        }
        if (this.sliceInitPathFunction !== null) {
          this.sliceInitPath = this.sliceInitPathFunction(this.sliceHelper, this.initPercent, this.sliceInitPathCustom);
        } else {
          if (this.wheelnav.currentPercent === this.wheelnav.maxPercent) {
            this.sliceInitPath = this.slicePathFunction(this.sliceHelper, this.maxPercent, this.sliceInitPathCustom);
          } else {
            this.sliceInitPath = this.slicePathFunction(this.sliceHelper, this.minPercent, this.sliceInitPathCustom);
          }
        }
        if (this.sliceTransformFunction !== null) {
          this.sliceTransform = this.sliceTransformFunction(this.wheelnav.centerX, this.wheelnav.centerY, this.wheelnav.wheelRadius, this.baseAngle, this.sliceAngle, this.titleRotateAngle, this.itemIndex, this.sliceTransformCustom);
        } else {
          this.sliceTransform = sliceTransform().NullTransform;
        }
        if (this.sliceSelectedTransformFunction !== null) {
          this.selectTransform = this.sliceSelectedTransformFunction(this.wheelnav.centerX, this.wheelnav.centerY, this.wheelnav.wheelRadius, this.baseAngle, this.sliceAngle, this.titleRotateAngle, this.itemIndex, this.sliceSelectedTransformCustom);
        } else {
          this.selectTransform = sliceTransform().NullTransform;
        }
        if (this.sliceHoverTransformFunction !== null) {
          this.hoverTransform = this.sliceHoverTransformFunction(this.wheelnav.centerX, this.wheelnav.centerY, this.wheelnav.wheelRadius, this.baseAngle, this.sliceAngle, this.titleRotateAngle, this.itemIndex, this.sliceHoverTransformCustom);
        } else {
          this.hoverTransform = sliceTransform().NullTransform;
        }
        if (this.sliceInitTransformFunction !== null) {
          this.initTransform = this.sliceInitTransformFunction(this.wheelnav.centerX, this.wheelnav.centerY, this.wheelnav.wheelRadius, this.baseAngle, this.sliceAngle, this.titleRotateAngle, this.itemIndex, this.sliceInitTransformCustom);
        } else {
          this.initTransform = sliceTransform().NullTransform;
        }
        if (wheelnavTitle().isPathTitle(this.title)) {
          initNavTitle = new wheelnavTitle(this.title, this.wheelnav.raphael.raphael);
          basicNavTitleMin = new wheelnavTitle(this.title, this.wheelnav.raphael.raphael);
          basicNavTitleMax = new wheelnavTitle(this.title, this.wheelnav.raphael.raphael);
          hoverNavTitleMin = new wheelnavTitle(this.titleHover, this.wheelnav.raphael.raphael);
          hoverNavTitleMax = new wheelnavTitle(this.titleHover, this.wheelnav.raphael.raphael);
          selectedNavTitleMin = new wheelnavTitle(this.titleSelected, this.wheelnav.raphael.raphael);
          selectedNavTitleMax = new wheelnavTitle(this.titleSelected, this.wheelnav.raphael.raphael);
          this.navTitleSizeTransform = basicNavTitleMax.getTitleSizeTransform(this.titleWidth, this.titleHeight);
          this.navTitleSizeHoverTransform = hoverNavTitleMax.getTitleSizeTransform(this.titleHoverWidth, this.titleHoverHeight);
          this.navTitleSizeSelectedTransform = selectedNavTitleMax.getTitleSizeTransform(this.titleSelectedWidth, this.titleSelectedHeight);
        } else {
          initNavTitle = new wheelnavTitle(this.title);
          basicNavTitleMin = new wheelnavTitle(this.title);
          basicNavTitleMax = new wheelnavTitle(this.title);
          hoverNavTitleMin = new wheelnavTitle(this.titleHover);
          hoverNavTitleMax = new wheelnavTitle(this.titleHover);
          selectedNavTitleMin = new wheelnavTitle(this.titleSelected);
          selectedNavTitleMax = new wheelnavTitle(this.titleSelected);
        }
        this.initNavTitle = initNavTitle.getTitlePercentAttr(this.sliceInitPath.titlePosX, this.sliceInitPath.titlePosY, this.titleWidth, this.titleHeight);
        this.basicNavTitleMin = basicNavTitleMin.getTitlePercentAttr(this.slicePathMin.titlePosX, this.slicePathMin.titlePosY, this.titleWidth, this.titleHeight);
        this.basicNavTitleMax = basicNavTitleMax.getTitlePercentAttr(this.slicePathMax.titlePosX, this.slicePathMax.titlePosY, this.titleWidth, this.titleHeight);
        this.hoverNavTitleMin = hoverNavTitleMin.getTitlePercentAttr(this.hoverSlicePathMin.titlePosX, this.hoverSlicePathMin.titlePosY, this.titleHoverWidth, this.titleHoverHeight);
        this.hoverNavTitleMax = hoverNavTitleMax.getTitlePercentAttr(this.hoverSlicePathMax.titlePosX, this.hoverSlicePathMax.titlePosY, this.titleHoverWidth, this.titleHoverHeight);
        this.selectedNavTitleMin = selectedNavTitleMin.getTitlePercentAttr(this.selectedSlicePathMin.titlePosX, this.selectedSlicePathMin.titlePosY, this.titleSelectedWidth, this.titleSelectedHeight);
        this.selectedNavTitleMax = selectedNavTitleMax.getTitlePercentAttr(this.selectedSlicePathMax.titlePosX, this.selectedSlicePathMax.titlePosY, this.titleSelectedWidth, this.titleSelectedHeight);
      };
      wheelnavItem.prototype.getCurrentPath = function() {
        var slicePath2;
        if (this.wheelnav.currentPercent === this.wheelnav.maxPercent) {
          if (this.selected) {
            slicePath2 = this.selectedSlicePathMax;
          } else {
            if (this.hovered) {
              slicePath2 = this.hoverSlicePathMax;
            } else {
              slicePath2 = this.slicePathMax;
            }
          }
        } else {
          if (this.selected) {
            slicePath2 = this.selectedSlicePathMin;
          } else {
            if (this.hovered) {
              slicePath2 = this.hoverSlicePathMin;
            } else {
              slicePath2 = this.slicePathMin;
            }
          }
        }
        return slicePath2;
      };
      wheelnavItem.prototype.getCurrentClickablePath = function() {
        var sliceClickablePath;
        if (this.wheelnav.currentPercent === this.wheelnav.maxPercent) {
          sliceClickablePath = this.clickableSlicePathMax;
        } else {
          sliceClickablePath = this.clickableSlicePathMin;
        }
        return sliceClickablePath;
      };
      wheelnavItem.prototype.getCurrentTitle = function() {
        var currentTitle;
        if (this.wheelnav.currentPercent === this.wheelnav.maxPercent) {
          if (this.selected) {
            currentTitle = this.selectedNavTitleMax;
          } else {
            if (this.hovered) {
              currentTitle = this.hoverNavTitleMax;
            } else {
              currentTitle = this.basicNavTitleMax;
            }
          }
        } else {
          if (this.selected) {
            currentTitle = this.selectedNavTitleMin;
          } else {
            if (this.hovered) {
              currentTitle = this.hoverNavTitleMin;
            } else {
              currentTitle = this.basicNavTitleMin;
            }
          }
        }
        return currentTitle;
      };
      wheelnavItem.prototype.getItemRotateString = function() {
        return "r," + this.currentRotateAngle.toString() + "," + this.wheelnav.centerX + "," + this.wheelnav.centerY;
      };
      wheelnavItem.prototype.getTitleRotateString = function(withTitleRotateAngle) {
        var titleRotate = "";
        titleRotate += this.getItemRotateString();
        if (this.titleRotateAngle !== null && withTitleRotateAngle) {
          titleRotate += ",r," + (this.navAngle + this.titleRotateAngle).toString();
        } else {
          titleRotate += ",r," + (-this.currentRotateAngle).toString();
        }
        return titleRotate;
      };
      wheelnavTitle = function(title, raphael) {
        this.title = title;
        if (title !== null) {
          if (raphael !== void 0) {
            this.relativePath = raphael.pathToRelative(title);
            var bbox = raphael.pathBBox(this.relativePath);
            this.centerX = bbox.cx;
            this.centerY = bbox.cy;
            this.width = bbox.width;
            this.height = bbox.height;
            this.startX = this.relativePath[0][1];
            this.startY = this.relativePath[0][2];
          }
          this.title = title;
        } else {
          this.title = "";
        }
        this.isPathTitle = function(title2) {
          if (title2 !== null && (title2.substr(0, 1) === "m" || title2.substr(0, 1) === "M") && (title2.substr(title2.length - 1, 1) === "z" || title2.substr(title2.length - 1, 1) === "Z") && (title2.indexOf(",") > -1 || title2.indexOf(" ") > -1)) {
            return true;
          } else {
            return false;
          }
        };
        this.isImageTitle = function(title2) {
          if (title2 === void 0) {
            title2 = this.title;
          }
          if (title2 !== null && title2.substr(0, 7) === "imgsrc:") {
            return true;
          } else {
            return false;
          }
        };
        return this;
      };
      wheelnavTitle.prototype.getTitlePercentAttr = function(currentX, currentY, titlewidth, titleheight) {
        var transformAttr = {};
        if (this.relativePath !== void 0) {
          var pathCx = currentX + (this.startX - this.centerX);
          var pathCy = currentY + (this.startY - this.centerY);
          this.relativePath[0][1] = pathCx;
          this.relativePath[0][2] = pathCy;
          transformAttr = {
            path: this.relativePath,
            title: this.title
          };
        } else {
          if (this.isImageTitle()) {
            transformAttr = {
              x: currentX - titlewidth / 2,
              y: currentY - titleheight / 2,
              width: titlewidth,
              height: titleheight,
              title: this.title,
              src: this.title.substr(7, this.title.length)
            };
          } else {
            transformAttr = {
              x: currentX,
              y: currentY,
              title: this.title
            };
          }
        }
        return transformAttr;
      };
      wheelnavTitle.prototype.getTitleSizeTransform = function(titlewidth, titleheight) {
        var transformAttr = "";
        if (titlewidth !== null && titleheight !== null) {
          transformAttr = "s";
          if (this.height > this.width) {
            transformAttr += (titlewidth / this.height).toString() + ",";
            transformAttr += (titleheight / this.height).toString();
          } else {
            transformAttr += (titlewidth / this.width).toString() + ",";
            transformAttr += (titleheight / this.width).toString();
          }
        }
        return transformAttr;
      };
      wheelnav.prototype.styleWheel = function() {
        if (!this.cssMode) {
          if (this.spreaderPathInAttr === void 0 || this.spreaderPathInAttr === null) {
            this.spreaderPathInAttr = { fill: "#444", stroke: "#444", "stroke-width": 2, cursor: "pointer" };
          }
          if (this.spreaderPathOutAttr === void 0 || this.spreaderPathOutAttr === null) {
            this.spreaderPathOutAttr = { fill: "#444", stroke: "#444", "stroke-width": 2, cursor: "pointer" };
          }
          if (this.spreaderTitleInAttr === void 0 || this.spreaderTitleInAttr === null) {
            this.spreaderTitleInAttr = { fill: "#eee", stroke: "#444", cursor: "pointer" };
          }
          if (this.spreaderTitleOutAttr === void 0 || this.spreaderTitleOutAttr === null) {
            this.spreaderTitleOutAttr = { fill: "#eee", stroke: "#444", cursor: "pointer" };
          }
          if (this.markerAttr === void 0 || this.markerAttr === null) {
            this.markerAttr = { stroke: "#444", "stroke-width": 2 };
          }
        } else {
          this.spreaderPathInAttr = { "class": this.getSpreaderCssClass("in") };
          this.spreaderPathOutAttr = { "class": this.getSpreaderCssClass("out") };
          this.spreaderTitleInAttr = { "class": this.getSpreaderTitleCssClass("in") };
          this.spreaderTitleOutAttr = { "class": this.getSpreaderTitleCssClass("out") };
          this.markerAttr = { "class": this.getMarkerCssClass() };
        }
      };
      wheelnavItem.prototype.styleNavItem = function() {
        if (!this.wheelnav.cssMode) {
          this.slicePathAttr = { stroke: "#333", "stroke-width": 0, cursor: "pointer", "fill-opacity": 1 };
          this.sliceHoverAttr = { stroke: "#222", "stroke-width": 0, cursor: "pointer", "fill-opacity": 0.77 };
          this.sliceSelectedAttr = { stroke: "#111", "stroke-width": 0, cursor: "default", "fill-opacity": 1 };
          this.titleAttr = { font: this.titleFont, fill: "#333", stroke: "none", cursor: "pointer" };
          this.titleHoverAttr = { font: this.titleFont, fill: "#222", cursor: "pointer", stroke: "none" };
          this.titleSelectedAttr = { font: this.titleFont, fill: "#fff", cursor: "default" };
          this.linePathAttr = { stroke: "#444", "stroke-width": 1, cursor: "pointer" };
          this.lineHoverAttr = { stroke: "#222", "stroke-width": 2, cursor: "pointer" };
          this.lineSelectedAttr = { stroke: "#444", "stroke-width": 1, cursor: "default" };
        } else {
          this.slicePathAttr = { "class": this.wheelnav.getSliceCssClass(this.wheelItemIndex, "basic") };
          this.sliceHoverAttr = { "class": this.wheelnav.getSliceCssClass(this.wheelItemIndex, "hover") };
          this.sliceSelectedAttr = { "class": this.wheelnav.getSliceCssClass(this.wheelItemIndex, "selected") };
          this.titleAttr = { "class": this.wheelnav.getTitleCssClass(this.wheelItemIndex, "basic") };
          this.titleHoverAttr = { "class": this.wheelnav.getTitleCssClass(this.wheelItemIndex, "hover") };
          this.titleSelectedAttr = { "class": this.wheelnav.getTitleCssClass(this.wheelItemIndex, "selected") };
          this.linePathAttr = { "class": this.wheelnav.getLineCssClass(this.wheelItemIndex, "basic") };
          this.lineHoverAttr = { "class": this.wheelnav.getLineCssClass(this.wheelItemIndex, "hover") };
          this.lineSelectedAttr = { "class": this.wheelnav.getLineCssClass(this.wheelItemIndex, "selected") };
        }
        this.sliceClickablePathAttr = { fill: "#FFF", stroke: "#FFF", "stroke-width": 0, cursor: "pointer", "fill-opacity": 0.01 };
        this.sliceClickableHoverAttr = { stroke: "#FFF", "stroke-width": 0, cursor: "pointer" };
        this.sliceClickableSelectedAttr = { stroke: "#FFF", "stroke-width": 0, cursor: "default" };
      };
      wheelnav.prototype.getSliceCssClass = function(index, subclass) {
        return "wheelnav-" + this.holderId + "-slice-" + subclass + "-" + index;
      };
      wheelnav.prototype.getTitleCssClass = function(index, subclass) {
        return "wheelnav-" + this.holderId + "-title-" + subclass + "-" + index;
      };
      wheelnav.prototype.getLineCssClass = function(index, subclass) {
        return "wheelnav-" + this.holderId + "-line-" + subclass + "-" + index;
      };
      wheelnav.prototype.getSpreaderCssClass = function(state) {
        return "wheelnav-" + this.holderId + "-spreader-" + state;
      };
      wheelnav.prototype.getSpreaderTitleCssClass = function(state) {
        return "wheelnav-" + this.holderId + "-spreadertitle-" + state;
      };
      wheelnav.prototype.getMarkerCssClass = function() {
        return "wheelnav-" + this.holderId + "-marker";
      };
      var pathHelper = function() {
        this.sliceRadius = 0;
        this.startAngle = 0;
        this.middleAngle = 0;
        this.endAngle = 0;
        this.sliceAngle = 0;
        this.startTheta = 0;
        this.middleTheta = 0;
        this.endTheta = 0;
        this.titlePosX = 0;
        this.titlePosY = 0;
        this.titleRadius = 0;
        this.titleTheta = 0;
        this.custom = null;
        this.centerX = 0;
        this.centerY = 0;
        this.wheelRadius = 0;
        this.itemIndex = 0;
        this.navItemCount = 0;
        this.navAngle = 0;
        this.setBaseValue = function(percent, custom) {
          if (custom === null) {
            custom = new slicePathCustomization();
          } else {
            this.custom = custom;
          }
          this.sliceRadius = this.wheelRadius * percent * 0.9;
          this.middleAngle = this.startAngle + this.sliceAngle / 2;
          this.endAngle = this.startAngle + this.sliceAngle;
          this.startTheta = this.getTheta(this.startAngle);
          this.middleTheta = this.getTheta(this.middleAngle);
          this.endTheta = this.getTheta(this.endAngle);
          if (custom !== null) {
            if (custom.titleRadiusPercent !== null) {
              this.titleRadius = this.sliceRadius * custom.titleRadiusPercent;
            }
            if (custom.titleSliceAnglePercent !== null) {
              this.titleTheta = this.getTheta(this.startAngle + this.sliceAngle * custom.titleSliceAnglePercent);
            }
          } else {
            this.titleRadius = this.sliceRadius * 0.5;
            this.titleTheta = this.middleTheta;
          }
          this.setTitlePos();
        };
        this.setTitlePos = function() {
          this.titlePosX = this.titleRadius * Math.cos(this.titleTheta) + this.centerX;
          this.titlePosY = this.titleRadius * Math.sin(this.titleTheta) + this.centerY;
        };
        this.getX = function(angle, length) {
          return length * Math.cos(this.getTheta(angle)) + this.centerX;
        };
        this.getY = function(angle, length) {
          return length * Math.sin(this.getTheta(angle)) + this.centerY;
        };
        this.MoveTo = function(angle, length) {
          return ["M", this.getX(angle, length), this.getY(angle, length)];
        };
        this.MoveToCenter = function() {
          return ["M", this.centerX, this.centerY];
        };
        this.LineTo = function(angle, length, angleY, lengthY) {
          if (angleY === void 0) {
            angleY = angle;
          }
          if (lengthY === void 0) {
            lengthY = length;
          }
          return ["L", this.getX(angle, length), this.getY(angleY, lengthY)];
        };
        this.ArcTo = function(arcRadius, angle, length) {
          return ["A", arcRadius, arcRadius, 0, 0, 1, this.getX(angle, length), this.getY(angle, length)];
        };
        this.ArcBackTo = function(arcRadius, angle, length) {
          return ["A", arcRadius, arcRadius, 0, 0, 0, this.getX(angle, length), this.getY(angle, length)];
        };
        this.StartSpreader = function(spreaderPathString2, angle, length) {
          if (this.endAngle - this.startAngle === 360) {
            spreaderPathString2.push(this.MoveTo(angle, length));
          } else {
            spreaderPathString2.push(this.MoveToCenter());
            spreaderPathString2.push(this.LineTo(angle, length));
          }
        };
        this.Close = function() {
          return ["z"];
        };
        this.getTheta = function(angle) {
          return angle % 360 * Math.PI / 180;
        };
        this.radians = function(degrees) {
          return degrees * Math.PI / 180;
        };
        this.degrees = function(radians) {
          return radians * 180 / Math.PI;
        };
        return this;
      };
      var slicePathCustomization = function() {
        this.titleRadiusPercent = 0.5;
        this.titleSliceAnglePercent = 0.5;
        return this;
      };
      var spreaderPathCustomization = function() {
        this.titleRadiusPercent = 0;
        this.titleSliceAnglePercent = 0.5;
        this.spreaderPercent = 1;
        return this;
      };
      var markerPathCustomization = function() {
        this.titleRadiusPercent = 1;
        this.titleSliceAnglePercent = 0.5;
        this.markerPercent = 1.05;
        return this;
      };
      slicePath = function() {
        this.NullSlice = function(helper, percent, custom) {
          helper.setBaseValue(percent, custom);
          return {
            slicePathString: "",
            linePathString: "",
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.NullInitSlice = function(helper, percent, custom) {
          helper.setBaseValue(percent, custom);
          slicePathString = [
            helper.MoveToCenter(),
            helper.Close()
          ];
          return {
            slicePathString,
            linePathString: slicePathString,
            titlePosX: helper.centerX,
            titlePosY: helper.centerY
          };
        };
        this.PieSliceCustomization = function() {
          var custom = new slicePathCustomization();
          custom.titleRadiusPercent = 0.6;
          custom.arcBaseRadiusPercent = 1;
          custom.arcRadiusPercent = 1;
          custom.startRadiusPercent = 0;
          return custom;
        };
        this.PieSlice = function(helper, percent, custom) {
          if (custom === null) {
            custom = PieSliceCustomization();
          }
          helper.setBaseValue(percent, custom);
          var arcBaseRadius = helper.sliceRadius * custom.arcBaseRadiusPercent;
          var arcRadius = helper.sliceRadius * custom.arcRadiusPercent;
          slicePathString = [
            helper.MoveTo(helper.middleAngle, custom.startRadiusPercent * helper.sliceRadius),
            helper.LineTo(helper.startAngle, arcBaseRadius),
            helper.ArcTo(arcRadius, helper.middleAngle, arcBaseRadius),
            helper.ArcTo(arcRadius, helper.endAngle, arcBaseRadius),
            helper.Close()
          ];
          return {
            slicePathString,
            linePathString: "",
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.FlowerSlice = function(helper, percent, custom) {
          if (custom === null) {
            custom = PieSliceCustomization();
            custom.titleRadiusPercent = 0.5;
            custom.arcBaseRadiusPercent = 0.65;
            custom.arcRadiusPercent = 0.14;
          }
          var slicePath2 = PieSlice(helper, percent, custom);
          return {
            slicePathString: slicePath2.slicePathString,
            linePathString: "",
            titlePosX: slicePath2.titlePosX,
            titlePosY: slicePath2.titlePosY
          };
        };
        this.PieArrowSliceCustomization = function() {
          var custom = new slicePathCustomization();
          custom.titleRadiusPercent = 0.6;
          custom.arrowRadiusPercent = 1.1;
          return custom;
        };
        this.PieArrowSlice = function(helper, percent, custom) {
          if (custom === null) {
            custom = PieArrowSliceCustomization();
          }
          helper.setBaseValue(percent, custom);
          r = helper.sliceRadius;
          arrowAngleStart = helper.startAngle + helper.sliceAngle * 0.45;
          arrowAngleEnd = helper.startAngle + helper.sliceAngle * 0.55;
          var arrowRadius = r * custom.arrowRadiusPercent;
          slicePathString = [
            helper.MoveToCenter(),
            helper.LineTo(helper.startAngle, r),
            helper.ArcTo(r, arrowAngleStart, r),
            helper.LineTo(helper.middleAngle, arrowRadius),
            helper.LineTo(arrowAngleEnd, r),
            helper.ArcTo(r, helper.endAngle, r),
            helper.Close()
          ];
          return {
            slicePathString,
            linePathString: "",
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.PieArrowBasePieSlice = function(helper, percent, custom) {
          if (custom === null) {
            custom = PieArrowSliceCustomization();
          }
          custom.arrowRadiusPercent = 1;
          var slicePath2 = PieArrowSlice(helper, percent, custom);
          return {
            slicePathString: slicePath2.slicePathString,
            linePathString: "",
            titlePosX: slicePath2.titlePosX,
            titlePosY: slicePath2.titlePosY
          };
        };
        this.DonutSliceCustomization = function() {
          var custom = new slicePathCustomization();
          custom.minRadiusPercent = 0.37;
          custom.maxRadiusPercent = 0.9;
          return custom;
        };
        this.DonutSlice = function(helper, percent, custom) {
          if (custom === null) {
            custom = DonutSliceCustomization();
          }
          maxRadius = helper.wheelRadius * percent * custom.maxRadiusPercent;
          minRadius = helper.wheelRadius * percent * custom.minRadiusPercent;
          helper.setBaseValue(percent, custom);
          helper.titleRadius = (maxRadius + minRadius) / 2;
          helper.setTitlePos();
          slicePathString = [
            helper.MoveTo(helper.startAngle, minRadius),
            helper.LineTo(helper.startAngle, maxRadius),
            helper.ArcTo(maxRadius, helper.middleAngle, maxRadius),
            helper.ArcTo(maxRadius, helper.endAngle, maxRadius),
            helper.LineTo(helper.endAngle, minRadius),
            helper.ArcBackTo(minRadius, helper.middleAngle, minRadius),
            helper.ArcBackTo(minRadius, helper.startAngle, minRadius),
            helper.Close()
          ];
          return {
            slicePathString,
            linePathString: "",
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.CogSliceCustomization = function() {
          var custom = new slicePathCustomization();
          custom.titleRadiusPercent = 0.55;
          custom.isBasePieSlice = false;
          return custom;
        };
        this.CogSlice = function(helper, percent, custom) {
          if (custom === null) {
            custom = CogSliceCustomization();
          }
          helper.setBaseValue(percent, custom);
          r = helper.sliceRadius;
          rbase = helper.wheelRadius * percent * 0.83;
          percentAngle0625 = helper.startAngle + helper.sliceAngle * 0.0625;
          percentAngle1250 = helper.startAngle + helper.sliceAngle * 0.125;
          percentAngle1875 = helper.startAngle + helper.sliceAngle * 0.1875;
          percentAngle2500 = helper.startAngle + helper.sliceAngle * 0.25;
          percentAngle3125 = helper.startAngle + helper.sliceAngle * 0.3125;
          percentAngle3750 = helper.startAngle + helper.sliceAngle * 0.375;
          percentAngle4375 = helper.startAngle + helper.sliceAngle * 0.4375;
          percentAngle5000 = helper.startAngle + helper.sliceAngle * 0.5;
          percentAngle5625 = helper.startAngle + helper.sliceAngle * 0.5625;
          percentAngle6250 = helper.startAngle + helper.sliceAngle * 0.625;
          percentAngle6875 = helper.startAngle + helper.sliceAngle * 0.6875;
          percentAngle7500 = helper.startAngle + helper.sliceAngle * 0.75;
          percentAngle8125 = helper.startAngle + helper.sliceAngle * 0.8125;
          percentAngle8750 = helper.startAngle + helper.sliceAngle * 0.875;
          percentAngle9375 = helper.startAngle + helper.sliceAngle * 0.9375;
          percentAngle9687 = helper.startAngle + helper.sliceAngle * 0.96875;
          if (custom.isBasePieSlice) {
            r = rbase;
            slicePathString = [
              helper.MoveToCenter(),
              helper.LineTo(helper.startAngle, r),
              helper.ArcTo(r, percentAngle0625, r),
              helper.ArcTo(r, percentAngle1250, r),
              helper.ArcTo(r, percentAngle1875, r),
              helper.ArcTo(r, percentAngle2500, r),
              helper.ArcTo(r, percentAngle3125, r),
              helper.ArcTo(r, percentAngle3750, r),
              helper.ArcTo(r, percentAngle4375, r),
              helper.ArcTo(r, percentAngle5000, r),
              helper.ArcTo(r, percentAngle5625, r),
              helper.ArcTo(r, percentAngle6250, r),
              helper.ArcTo(r, percentAngle6875, r),
              helper.ArcTo(r, percentAngle7500, r),
              helper.ArcTo(r, percentAngle8125, r),
              helper.ArcTo(r, percentAngle8750, r),
              helper.ArcTo(r, percentAngle9375, r),
              helper.ArcTo(r, percentAngle9687, r),
              helper.ArcTo(r, helper.endAngle, r),
              helper.Close()
            ];
          } else {
            slicePathString = [
              helper.MoveToCenter(),
              helper.LineTo(helper.startAngle, r),
              helper.ArcTo(r, percentAngle0625, r),
              helper.LineTo(percentAngle0625, rbase),
              helper.ArcTo(rbase, percentAngle1875, rbase),
              helper.LineTo(percentAngle1875, r),
              helper.ArcTo(r, percentAngle3125, r),
              helper.LineTo(percentAngle3125, rbase),
              helper.ArcTo(rbase, percentAngle4375, rbase),
              helper.LineTo(percentAngle4375, r),
              helper.ArcTo(r, percentAngle5625, r),
              helper.LineTo(percentAngle5625, rbase),
              helper.ArcTo(rbase, percentAngle6875, rbase),
              helper.LineTo(percentAngle6875, r),
              helper.ArcTo(r, percentAngle8125, r),
              helper.LineTo(percentAngle8125, rbase),
              helper.ArcTo(rbase, percentAngle9375, rbase),
              helper.LineTo(percentAngle9375, r),
              helper.ArcTo(r, helper.endAngle, r),
              helper.Close()
            ];
          }
          return {
            slicePathString,
            linePathString: "",
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.CogBasePieSlice = function(helper, percent, custom) {
          if (custom === null) {
            custom = CogSliceCustomization();
          }
          custom.isBasePieSlice = true;
          var slicePath2 = CogSlice(helper, percent, custom);
          return {
            slicePathString: slicePath2.slicePathString,
            linePathString: "",
            titlePosX: slicePath2.titlePosX,
            titlePosY: slicePath2.titlePosY
          };
        };
        this.StarSliceCustomization = function() {
          var custom = new slicePathCustomization();
          custom.titleRadiusPercent = 0.44;
          custom.minRadiusPercent = 0.5;
          custom.isBasePieSlice = false;
          return custom;
        };
        this.StarSlice = function(helper, percent, custom) {
          if (custom === null) {
            custom = StarSliceCustomization();
          }
          helper.setBaseValue(percent, custom);
          r = helper.wheelRadius * percent;
          rbase = r * custom.minRadiusPercent;
          if (custom.isBasePieSlice) {
            r = helper.sliceRadius;
            slicePathString = [
              helper.MoveToCenter(),
              helper.LineTo(helper.startAngle, r),
              helper.ArcTo(r, helper.middleAngle, r),
              helper.ArcTo(r, helper.endAngle, r),
              helper.Close()
            ];
          } else {
            slicePathString = [
              helper.MoveToCenter(),
              helper.LineTo(helper.startAngle, rbase),
              helper.LineTo(helper.middleAngle, r),
              helper.LineTo(helper.endAngle, rbase),
              helper.Close()
            ];
          }
          return {
            slicePathString,
            linePathString: "",
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.StarBasePieSlice = function(helper, percent, custom) {
          if (custom === null) {
            custom = StarSliceCustomization();
          }
          custom.titleRadiusPercent = 0.6;
          custom.isBasePieSlice = true;
          var slicePath2 = StarSlice(helper, percent, custom);
          return {
            slicePathString: slicePath2.slicePathString,
            linePathString: "",
            titlePosX: slicePath2.titlePosX,
            titlePosY: slicePath2.titlePosY
          };
        };
        this.MenuSliceCustomization = function() {
          var custom = new slicePathCustomization();
          custom.menuRadius = 35;
          custom.titleRadiusPercent = 0.63;
          custom.isSelectedLine = false;
          custom.lineBaseRadiusPercent = 0;
          return custom;
        };
        this.MenuSlice = function(helper, percent, custom) {
          if (custom === null) {
            custom = MenuSliceCustomization();
          }
          helper.setBaseValue(percent, custom);
          x = helper.centerX;
          y = helper.centerY;
          var r2 = helper.wheelRadius * percent;
          helper.titleRadius = r2 * custom.titleRadiusPercent;
          helper.setTitlePos();
          var menuRadius = percent * custom.menuRadius;
          if (percent <= 0.05) {
            menuRadius = 10;
          }
          middleTheta = helper.middleTheta;
          slicePathString = [
            ["M", helper.titlePosX - menuRadius * Math.cos(middleTheta), helper.titlePosY - menuRadius * Math.sin(middleTheta)],
            ["A", menuRadius, menuRadius, 0, 0, 1, helper.titlePosX + menuRadius * Math.cos(middleTheta), helper.titlePosY + menuRadius * Math.sin(middleTheta)],
            ["A", menuRadius, menuRadius, 0, 0, 1, helper.titlePosX - menuRadius * Math.cos(middleTheta), helper.titlePosY - menuRadius * Math.sin(middleTheta)],
            ["z"]
          ];
          if (percent <= 0.05) {
            linePathString = [
              ["M", x, y],
              ["A", 1, 1, 0, 0, 1, x + 1, y + 1]
            ];
          } else {
            if (!custom.isSelectedLine) {
              linePathString = [
                helper.MoveTo(helper.middleAngle, custom.lineBaseRadiusPercent * r2),
                helper.ArcTo(r2 / 2, helper.middleAngle, helper.titleRadius - menuRadius)
              ];
            } else {
              linePathString = [
                helper.MoveTo(helper.middleAngle, custom.lineBaseRadiusPercent * r2),
                helper.ArcTo(r2 / 3, helper.middleAngle, helper.titleRadius - menuRadius)
              ];
            }
          }
          return {
            slicePathString,
            linePathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.MenuSliceSelectedLine = function(helper, percent, custom) {
          if (custom === null) {
            custom = MenuSliceCustomization();
          }
          custom.isSelectedLine = true;
          var slicePath2 = MenuSlice(helper, percent, custom);
          return {
            slicePathString: slicePath2.slicePathString,
            linePathString: slicePath2.linePathString,
            titlePosX: slicePath2.titlePosX,
            titlePosY: slicePath2.titlePosY
          };
        };
        this.MenuSliceWithoutLine = function(helper, percent, custom) {
          var slicePath2 = MenuSlice(helper, percent, custom);
          return {
            slicePathString: slicePath2.slicePathString,
            linePathString: "",
            titlePosX: slicePath2.titlePosX,
            titlePosY: slicePath2.titlePosY
          };
        };
        this.LineSlice = function(helper, percent, custom) {
          helper.setBaseValue(percent, custom);
          r = helper.sliceRadius;
          if (helper.sliceAngle > 60 && helper.sliceAngle < 180) {
            helper.titleRadius = r * (180 / helper.sliceAngle / 5);
            helper.setTitlePos();
          } else {
            helper.titleRadius = r * 0.55;
            helper.setTitlePos();
          }
          if (helper.sliceAngle < 180) {
            slicePathString = [
              helper.MoveToCenter(),
              helper.LineTo(helper.startAngle, r),
              helper.LineTo(helper.endAngle, r),
              helper.Close()
            ];
          } else {
            if (helper.startAngle === 180 || helper.startAngle === 0 || helper.startAngle === -180 || helper.startAngle === 360) {
              slicePathString = [
                helper.MoveToCenter(),
                helper.LineTo(helper.startAngle, r),
                helper.LineTo(helper.startAngle, r, helper.middleAngle, r),
                helper.LineTo(helper.endAngle, r, helper.middleAngle, r),
                helper.LineTo(helper.endAngle, r),
                helper.Close()
              ];
            } else {
              slicePathString = [
                helper.MoveToCenter(),
                helper.LineTo(helper.startAngle, r),
                helper.LineTo(helper.middleAngle, r, helper.startAngle, r),
                helper.LineTo(helper.middleAngle, r, helper.endAngle, r),
                helper.LineTo(helper.endAngle, r),
                helper.Close()
              ];
            }
          }
          return {
            slicePathString,
            linePathString: "",
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.EyeSliceCustomization = function() {
          var custom = new slicePathCustomization();
          custom.titleRadiusPercent = 0.68;
          return custom;
        };
        this.EyeSlice = function(helper, percent, custom) {
          if (custom === null) {
            custom = EyeSliceCustomization();
          }
          helper.setBaseValue(percent, custom);
          r = helper.wheelRadius * percent * 0.7;
          if (percent === 0) {
            r = 0.01;
          }
          startAngle = helper.startAngle;
          endAngle = helper.endAngle;
          if (helper.sliceAngle === 180) {
            startAngle = helper.startAngle + helper.sliceAngle / 4;
            endAngle = helper.startAngle + helper.sliceAngle - helper.sliceAngle / 4;
          }
          slicePathString = [
            helper.MoveTo(endAngle, r),
            helper.ArcTo(r, startAngle, r),
            helper.ArcTo(r, endAngle, r),
            helper.Close()
          ];
          return {
            slicePathString,
            linePathString: "",
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.WheelSlice = function(helper, percent, custom) {
          helper.setBaseValue(percent, custom);
          x = helper.centerX;
          y = helper.centerY;
          r = helper.sliceRadius;
          startTheta = helper.startTheta;
          middleTheta = helper.middleTheta;
          endTheta = helper.endTheta;
          var innerRadiusPercent;
          var startendRadiusPercent;
          if (helper.sliceAngle < 120) {
            helper.titleRadius = r * 0.57;
            innerRadiusPercent = 0.9;
            middleRadiusPercent = 0.87;
            startendRadiusPercent = 0.87;
          } else if (helper.sliceAngle < 180) {
            helper.titleRadius = r * 0.52;
            innerRadiusPercent = 0.91;
            middleRadiusPercent = 0.87;
            startendRadiusPercent = 0.87;
          } else {
            helper.titleRadius = r * 0.45;
            innerRadiusPercent = 0.873;
            middleRadiusPercent = 0.87;
            startendRadiusPercent = 0.94;
          }
          slicePathString = [
            helper.MoveTo(helper.middleAngle, r * 0.07),
            ["L", r * 0.07 * Math.cos(middleTheta) + r * startendRadiusPercent * Math.cos(startTheta) + x, r * 0.07 * Math.sin(middleTheta) + r * startendRadiusPercent * Math.sin(startTheta) + y],
            ["A", r * innerRadiusPercent, r * innerRadiusPercent, 0, 0, 1, r * 0.07 * Math.cos(middleTheta) + r * middleRadiusPercent * Math.cos(middleTheta) + x, r * 0.07 * Math.sin(middleTheta) + r * middleRadiusPercent * Math.sin(middleTheta) + y],
            ["A", r * innerRadiusPercent, r * innerRadiusPercent, 0, 0, 1, r * 0.07 * Math.cos(middleTheta) + r * startendRadiusPercent * Math.cos(endTheta) + x, r * 0.07 * Math.sin(middleTheta) + r * startendRadiusPercent * Math.sin(endTheta) + y],
            helper.Close()
          ];
          linePathString = [
            helper.MoveTo(helper.startAngle, r),
            helper.ArcTo(r, helper.middleAngle, r),
            helper.ArcTo(r, helper.endAngle, r),
            helper.ArcBackTo(r, helper.middleAngle, r),
            helper.ArcBackTo(r, helper.startAngle, r)
          ];
          helper.setTitlePos();
          return {
            slicePathString,
            linePathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.OuterStrokeSlice = function(helper, percent, custom) {
          helper.setBaseValue(percent, custom);
          x = helper.centerX;
          y = helper.centerY;
          r = helper.sliceRadius;
          innerRadius = r / 4;
          if (helper.sliceAngle < 120) {
            helper.titleRadius = r * 0.57;
          } else if (helper.sliceAngle < 180) {
            helper.titleRadius = r * 0.52;
          } else {
            helper.titleRadius = r * 0.45;
          }
          linePathString = [
            helper.MoveTo(helper.startAngle, innerRadius),
            helper.LineTo(helper.startAngle, r),
            helper.MoveTo(helper.endAngle, innerRadius),
            helper.LineTo(helper.endAngle, r)
          ];
          slicePathString = [
            helper.MoveTo(helper.startAngle, r),
            helper.ArcTo(r, helper.middleAngle, r),
            helper.ArcTo(r, helper.endAngle, r),
            helper.ArcBackTo(r, helper.middleAngle, r),
            helper.ArcBackTo(r, helper.startAngle, r),
            helper.MoveTo(helper.startAngle, innerRadius),
            helper.ArcTo(innerRadius, helper.middleAngle, innerRadius),
            helper.ArcTo(innerRadius, helper.endAngle, innerRadius),
            helper.ArcBackTo(innerRadius, helper.middleAngle, innerRadius),
            helper.ArcBackTo(innerRadius, helper.startAngle, innerRadius)
          ];
          helper.setTitlePos();
          return {
            slicePathString,
            linePathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.TabSlice = function(helper, percent, custom) {
          var rOriginal = helper.wheelRadius * 0.9;
          var navItemCount = 360 / helper.sliceAngle;
          var itemSize = 2 * rOriginal / navItemCount;
          x = helper.centerX;
          y = helper.centerY;
          itemIndex = helper.itemIndex;
          titlePosX = x;
          titlePosY = itemIndex * itemSize + y + itemSize / 2 - rOriginal;
          slicePathString = [
            ["M", x - itemSize / 2, itemIndex * itemSize + y - rOriginal],
            ["L", itemSize / 2 + x, itemIndex * itemSize + y - rOriginal],
            ["L", itemSize / 2 + x, (itemIndex + 1) * itemSize + y - rOriginal],
            ["L", x - itemSize / 2, (itemIndex + 1) * itemSize + y - rOriginal],
            ["z"]
          ];
          return {
            slicePathString,
            linePathString: "",
            titlePosX,
            titlePosY
          };
        };
        this.YinYangSlice = function(helper, percent, custom) {
          helper.setBaseValue(percent, custom);
          r = helper.sliceRadius;
          slicePathString = [
            helper.MoveToCenter(),
            helper.ArcTo(r / 2, helper.startAngle, r),
            helper.ArcTo(r, helper.middleAngle, r),
            helper.ArcTo(r, helper.endAngle, r),
            helper.ArcBackTo(r / 2, 0, 0),
            helper.Close()
          ];
          titlePosX = helper.getX(helper.startAngle, r / 2);
          titlePosY = helper.getY(helper.startAngle, r / 2);
          return {
            slicePathString,
            linePathString: slicePathString,
            titlePosX,
            titlePosY
          };
        };
        this.WebSlice = function(helper, percent, custom) {
          helper.setBaseValue(percent, custom);
          r = helper.sliceRadius;
          helper.titleRadius = r * 0.55;
          helper.setTitlePos();
          linePathString = [
            helper.MoveToCenter(),
            helper.LineTo(helper.startAngle, r * 1.1),
            helper.MoveToCenter(),
            helper.LineTo(helper.endAngle, r * 1.1),
            helper.MoveTo(helper.startAngle, r * 0.15),
            helper.LineTo(helper.endAngle, r * 0.15),
            helper.MoveTo(helper.startAngle, r * 0.35),
            helper.LineTo(helper.endAngle, r * 0.35),
            helper.MoveTo(helper.startAngle, r * 0.55),
            helper.LineTo(helper.endAngle, r * 0.55),
            helper.MoveTo(helper.startAngle, r * 0.75),
            helper.LineTo(helper.endAngle, r * 0.75),
            helper.MoveTo(helper.startAngle, r * 0.95),
            helper.LineTo(helper.endAngle, r * 0.95),
            helper.Close()
          ];
          return {
            slicePathString: "",
            linePathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.WinterSliceCustomization = function() {
          var custom = new slicePathCustomization();
          custom.titleRadiusPercent = 0.85;
          custom.arcRadiusPercent = 1;
          return custom;
        };
        this.WinterSlice = function(helper, percent, custom) {
          if (custom === null) {
            custom = WinterSliceCustomization();
          }
          helper.setBaseValue(percent, custom);
          sliceAngle = helper.sliceAngle;
          parallelAngle = helper.startAngle + sliceAngle / 4;
          parallelAngle2 = helper.startAngle + sliceAngle / 4 * 3;
          borderAngle1 = helper.startAngle + sliceAngle / 200;
          borderAngle2 = helper.startAngle + sliceAngle / 2 - sliceAngle / 200;
          borderAngle3 = helper.startAngle + sliceAngle / 2 + sliceAngle / 200;
          borderAngle4 = helper.startAngle + sliceAngle - sliceAngle / 200;
          var arcRadius = helper.sliceRadius * custom.arcRadiusPercent;
          slicePathString = [
            helper.MoveToCenter(),
            helper.MoveTo(parallelAngle, arcRadius / 100),
            helper.LineTo(borderAngle1, arcRadius / 2),
            helper.LineTo(parallelAngle, arcRadius - arcRadius / 100),
            helper.LineTo(borderAngle2, arcRadius / 2),
            helper.LineTo(parallelAngle, arcRadius / 100),
            helper.MoveTo(parallelAngle2, arcRadius / 100),
            helper.LineTo(borderAngle4, arcRadius / 2),
            helper.LineTo(parallelAngle2, arcRadius - arcRadius / 100),
            helper.LineTo(borderAngle3, arcRadius / 2),
            helper.LineTo(parallelAngle2, arcRadius / 100),
            helper.Close()
          ];
          linePathString = [
            helper.MoveTo(parallelAngle, arcRadius),
            helper.LineTo(borderAngle2, arcRadius / 2),
            helper.MoveTo(borderAngle3, arcRadius / 2),
            helper.LineTo(parallelAngle2, arcRadius)
          ];
          return {
            slicePathString,
            linePathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.TutorialSliceCustomization = function() {
          var custom = new slicePathCustomization();
          custom.titleRadiusPercent = 0.6;
          custom.isMoveTo = false;
          custom.isLineTo = false;
          custom.isArcTo = false;
          custom.isArcBackTo = false;
          return custom;
        };
        this.TutorialSlice = function(helper, percent, custom) {
          if (custom === null) {
            custom = TutorialSliceCustomization();
          }
          helper.setBaseValue(percent, custom);
          slicePathString = [];
          slicePathString.push(helper.MoveToCenter());
          if (custom.isMoveTo === true) {
            slicePathString.push(helper.MoveTo(helper.middleAngle, helper.sliceRadius / 4));
          }
          if (custom.isLineTo) {
            slicePathString.push(helper.LineTo(helper.startAngle, helper.sliceRadius));
          }
          if (custom.isArcTo) {
            slicePathString.push(helper.ArcTo(helper.sliceRadius, helper.middleAngle, helper.sliceRadius));
          }
          if (custom.isArcBackTo) {
            slicePathString.push(helper.ArcBackTo(helper.sliceRadius, helper.endAngle, helper.sliceRadius));
          }
          slicePathString.push(helper.Close());
          linePathString = [
            helper.MoveToCenter(),
            helper.LineTo(helper.startAngle, helper.sliceRadius),
            helper.ArcTo(helper.sliceRadius, helper.middleAngle, helper.sliceRadius),
            helper.ArcTo(helper.sliceRadius, helper.endAngle, helper.sliceRadius),
            helper.Close()
          ];
          return {
            slicePathString,
            linePathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        return this;
      };
      var sliceTransform = function() {
        this.startAngle = 0;
        this.startTheta = 0;
        this.middleTheta = 0;
        this.endTheta = 0;
        var setBaseValue = function(x2, y2, rOriginal, baseAngle2, sliceAngle2, titleRotateAngle, itemIndex2, custom) {
          this.startAngle = baseAngle2;
          this.startTheta = getTheta(startAngle);
          this.middleTheta = getTheta(startAngle + sliceAngle2 / 2);
          this.endTheta = getTheta(startAngle + sliceAngle2);
        };
        var getTheta = function(angle) {
          return angle % 360 * Math.PI / 180;
        };
        this.NullTransform = function(x2, y2, rOriginal, baseAngle2, sliceAngle2, titleRotateAngle, itemIndex2, custom) {
          return {
            sliceTransformString: "",
            lineTransformString: "",
            titleTransformString: ""
          };
        };
        this.MoveMiddleTransform = function(x2, y2, rOriginal, baseAngle2, sliceAngle2, titleRotateAngle, itemIndex2, custom) {
          setBaseValue(x2, y2, rOriginal, baseAngle2, sliceAngle2, titleRotateAngle, itemIndex2);
          var sliceTransformString = "t" + (rOriginal / 10 * Math.cos(middleTheta)).toString() + "," + (rOriginal / 10 * Math.sin(middleTheta)).toString();
          var baseTheta;
          if (titleRotateAngle !== null) {
            baseTheta = getTheta(-titleRotateAngle);
          } else {
            var wheelBaseAngle = baseAngle2 - itemIndex2 * sliceAngle2;
            baseTheta = getTheta(wheelBaseAngle + sliceAngle2 / 2);
          }
          var titleTransformString = "s1,r0,t" + (rOriginal / 10 * Math.cos(baseTheta)).toString() + "," + (rOriginal / 10 * Math.sin(baseTheta)).toString();
          return {
            sliceTransformString,
            lineTransformString: sliceTransformString,
            titleTransformString
          };
        };
        this.RotateTransform = function(x2, y2, rOriginal, baseAngle2, sliceAngle2, titleRotateAngle, itemIndex2, custom) {
          var sliceTransformString = "s1,r360";
          return {
            sliceTransformString,
            lineTransformString: sliceTransformString,
            titleTransformString: sliceTransformString
          };
        };
        this.RotateHalfTransform = function(x2, y2, rOriginal, baseAngle2, sliceAngle2, titleRotateAngle, itemIndex2, custom) {
          var sliceTransformString = "s1,r90";
          return {
            sliceTransformString,
            lineTransformString: sliceTransformString,
            titleTransformString: sliceTransformString
          };
        };
        this.RotateTitleTransform = function(x2, y2, rOriginal, baseAngle2, sliceAngle2, titleRotateAngle, itemIndex2, custom) {
          var titleTransformString = "s1,r360";
          return {
            sliceTransformString: "",
            lineTransformString: "",
            titleTransformString
          };
        };
        this.ScaleTransform = function(x2, y2, rOriginal, baseAngle2, sliceAngle2, titleRotateAngle, itemIndex2, custom) {
          var sliceTransformString = "s1.2";
          return {
            sliceTransformString,
            lineTransformString: "",
            titleTransformString: sliceTransformString
          };
        };
        this.ScaleTitleTransform = function(x2, y2, rOriginal, baseAngle2, sliceAngle2, titleRotateAngle, itemIndex2, custom) {
          return {
            sliceTransformString: "",
            lineTransformString: "",
            titleTransformString: "s1.3"
          };
        };
        this.RotateScaleTransform = function(x2, y2, rOriginal, baseAngle2, sliceAngle2, titleRotateAngle, itemIndex2, custom) {
          var sliceTransformString = "r360,s1.3";
          return {
            sliceTransformString,
            lineTransformString: "",
            titleTransformString: sliceTransformString
          };
        };
        this.CustomTransform = function(x2, y2, rOriginal, baseAngle2, sliceAngle2, titleRotateAngle, itemIndex2, custom) {
          var sliceTransformString = custom.scaleString + "," + custom.rotateString;
          return {
            sliceTransformString,
            lineTransformString: sliceTransformString,
            titleTransformString: sliceTransformString
          };
        };
        this.CustomTitleTransform = function(x2, y2, rOriginal, baseAngle2, sliceAngle2, titleRotateAngle, itemIndex2, custom) {
          var titleTransformString = custom.scaleString + "," + custom.rotateString;
          return {
            sliceTransformString: "",
            lineTransformString: "",
            titleTransformString
          };
        };
        return this;
      };
      spreader = function(wheelnav3) {
        this.wheelnav = wheelnav3;
        if (this.wheelnav.spreaderEnable) {
          this.spreaderHelper = new pathHelper();
          this.spreaderHelper.centerX = this.wheelnav.centerX;
          this.spreaderHelper.centerY = this.wheelnav.centerY;
          this.spreaderHelper.navItemCount = this.wheelnav.navItemCount;
          this.spreaderHelper.navAngle = this.wheelnav.navAngle;
          this.spreaderHelper.wheelRadius = this.wheelnav.spreaderRadius;
          this.spreaderHelper.startAngle = this.wheelnav.spreaderStartAngle;
          this.spreaderHelper.sliceAngle = this.wheelnav.spreaderSliceAngle;
          var thisWheelNav = this.wheelnav;
          this.animateeffect = "bounce";
          this.animatetime = 1500;
          if (this.wheelnav.animateeffect !== null) {
            this.animateeffect = this.wheelnav.animateeffect;
          }
          if (this.wheelnav.animatetime !== null) {
            this.animatetime = this.wheelnav.animatetime;
          }
          if (this.wheelnav.spreaderTitleFont !== null) {
            this.fontAttr = { font: this.wheelnav.spreaderTitleFont };
          } else {
            this.fontAttr = { font: "100 32px Impact, Charcoal, sans-serif" };
          }
          this.spreaderPathIn = this.wheelnav.spreaderPathFunction(this.spreaderHelper, this.wheelnav.spreaderInPercent, this.wheelnav.spreaderPathCustom);
          this.spreaderPathOut = this.wheelnav.spreaderPathFunction(this.spreaderHelper, this.wheelnav.spreaderOutPercent, this.wheelnav.spreaderPathCustom);
          var currentPath2 = this.spreaderPathOut;
          if (thisWheelNav.initPercent < thisWheelNav.maxPercent) {
            currentPath2 = this.spreaderPathIn;
          }
          this.spreaderPath = this.wheelnav.raphael.path(currentPath2.spreaderPathString);
          this.spreaderPath.attr(thisWheelNav.spreaderPathAttr);
          this.spreaderPath.id = thisWheelNav.getSpreaderId();
          this.spreaderPath.node.id = this.spreaderPath.id;
          this.spreaderPath.click(function() {
            thisWheelNav.spreadWheel();
          });
          this.inTitleWidth = this.wheelnav.spreaderInTitleWidth;
          this.inTitleHeight = this.wheelnav.spreaderInTitleHeight;
          this.outTitleWidth = this.wheelnav.spreaderOutTitleWidth;
          this.outTitleHeight = this.wheelnav.spreaderOutTitleHeight;
          if (this.inTitleWidth !== null && this.inTitleHeight === null) {
            this.inTitleHeight = this.inTitleWidth;
          }
          if (this.inTitleWidth === null && this.inTitleHeight !== null) {
            this.inTitleWidth = this.inTitleHeight;
          }
          if (this.outTitleWidth !== null && this.outTitleHeight === null) {
            this.outTitleHeight = this.outTitleWidth;
          }
          if (this.outTitleWidth === null && this.outTitleHeight !== null) {
            this.outTitleWidth = this.outTitleHeight;
          }
          if (wheelnavTitle().isImageTitle(this.wheelnav.spreaderOutTitle)) {
            if (this.inTitleWidth === null) {
              this.inTitleWidth = 32;
            }
            if (this.inTitleHeight === null) {
              this.inTitleHeight = 32;
            }
            if (this.outTitleWidth === null) {
              this.outTitleWidth = 32;
            }
            if (this.outTitleHeight === null) {
              this.outTitleHeight = 32;
            }
          }
          if (wheelnavTitle().isPathTitle(this.wheelnav.spreaderInTitle)) {
            inTitle = new wheelnavTitle(this.wheelnav.spreaderInTitle, this.wheelnav.raphael.raphael);
          } else {
            inTitle = new wheelnavTitle(this.wheelnav.spreaderInTitle);
          }
          this.inTitleSizeTransform = inTitle.getTitleSizeTransform(this.inTitleWidth, this.inTitleHeight);
          this.inTitle = inTitle.getTitlePercentAttr(this.spreaderPathIn.titlePosX, this.spreaderPathIn.titlePosY, this.inTitleWidth, this.inTitleHeight);
          if (wheelnavTitle().isPathTitle(this.wheelnav.spreaderOutTitle)) {
            outTitle = new wheelnavTitle(this.wheelnav.spreaderOutTitle, this.wheelnav.raphael.raphael);
          } else {
            outTitle = new wheelnavTitle(this.wheelnav.spreaderOutTitle);
          }
          this.outTitleSizeTransform = outTitle.getTitleSizeTransform(this.outTitleWidth, this.outTitleHeight);
          this.outTitle = outTitle.getTitlePercentAttr(this.spreaderPathOut.titlePosX, this.spreaderPathOut.titlePosY, this.outTitleWidth, this.outTitleHeight);
          var currentTitle = this.outTitle;
          var currentTitleAttr = this.wheelnav.spreaderTitleOutAttr;
          var currentTitleWidth = this.outTitleWidth;
          var currentTitleHeight = this.outTitleHeight;
          var currentTitleSizeTransform = this.outTitleSizeTransform;
          if (thisWheelNav.initPercent < thisWheelNav.maxPercent) {
            currentTitle = this.inTitle;
            currentTitleAttr = this.wheelnav.spreaderTitleInAttr;
            currentTitleWidth = this.inTitleWidth;
            currentTitleHeight = this.inTitleHeight;
            currentTitleSizeTransform = this.inTitleSizeTransform;
          }
          if (wheelnavTitle().isPathTitle(this.wheelnav.spreaderOutTitle)) {
            this.spreaderTitle = thisWheelNav.raphael.path(currentTitle.path);
          } else if (wheelnavTitle().isImageTitle(this.wheelnav.spreaderOutTitle)) {
            this.spreaderTitle = this.wheelnav.raphael.image(currentTitle.src, currentPath2.titlePosX - currentTitleWidth / 2, currentPath2.titlePosY - currentTitleHeight / 2, currentTitleWidth, currentTitleHeight);
          } else {
            this.spreaderTitle = thisWheelNav.raphael.text(currentPath2.titlePosX, currentPath2.titlePosY, currentTitle.title);
          }
          this.spreaderTitle.attr(this.fontAttr);
          this.spreaderTitle.attr(currentTitleAttr);
          this.spreaderTitle.attr({ transform: currentTitleSizeTransform });
          this.spreaderTitle.id = thisWheelNav.getSpreaderTitleId();
          this.spreaderTitle.node.id = this.spreaderTitle.id;
          this.spreaderTitle.click(function() {
            thisWheelNav.spreadWheel();
          });
          this.setCurrentTransform();
        }
        return this;
      };
      spreader.prototype.setCurrentTransform = function(withoutAnimate) {
        if (this.wheelnav.spreaderEnable) {
          if (withoutAnimate === void 0 || withoutAnimate === false) {
            if (this.wheelnav.currentPercent > this.wheelnav.minPercent) {
              currentPath = this.spreaderPathOut.spreaderPathString;
            } else {
              currentPath = this.spreaderPathIn.spreaderPathString;
            }
            spreaderTransformAttr = {
              path: currentPath
            };
            this.spreaderPath.animate(spreaderTransformAttr, this.animatetime, this.animateeffect);
            var currentTitle;
            var titleTransformAttr;
            var titleSizeTransform;
            if (this.wheelnav.currentPercent === this.wheelnav.maxPercent) {
              currentTitle = this.outTitle;
              titleTransformAttr = this.wheelnav.spreaderTitleOutAttr;
              this.spreaderPath.attr(this.wheelnav.spreaderPathOutAttr);
              titleSizeTransform = this.outTitleSizeTransform;
            } else {
              currentTitle = this.inTitle;
              titleTransformAttr = this.wheelnav.spreaderTitleInAttr;
              this.spreaderPath.attr(this.wheelnav.spreaderPathInAttr);
              titleSizeTransform = this.inTitleSizeTransform;
            }
            if (wheelnavTitle().isPathTitle(currentTitle.title)) {
              titleTransformAttr.path = currentTitle.path;
              titleTransformAttr.transform = titleSizeTransform;
            } else if (wheelnavTitle().isImageTitle(currentTitle.title)) {
              titleTransformAttr.x = currentTitle.x;
              titleTransformAttr.y = currentTitle.y;
              titleTransformAttr.width = currentTitle.width;
              titleTransformAttr.height = currentTitle.height;
              this.spreaderTitle.attr({ src: currentTitle.src });
            } else {
              offYOffset = 0;
              if (currentTitle.title === "-") {
                offYOffset = 3;
              }
              ;
              titleTransformAttr.x = currentTitle.x;
              titleTransformAttr.y = currentTitle.y - offYOffset;
              if (currentTitle.title !== null) {
                this.spreaderTitle.attr({ text: currentTitle.title });
              }
            }
            this.spreaderTitle.animate(titleTransformAttr, this.animatetime, this.animateeffect);
          }
          this.spreaderPath.toFront();
          this.spreaderTitle.toFront();
        }
      };
      spreaderPath = function() {
        this.NullSpreader = function(helper, custom) {
          if (custom === null) {
            custom = new spreaderPathCustomization();
          }
          helper.setBaseValue(custom.spreaderPercent, custom);
          return {
            spreaderPathString: "",
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.PieSpreaderCustomization = function() {
          var custom = new spreaderPathCustomization();
          custom.spreaderRadius = 25;
          custom.arcBaseRadiusPercent = 1;
          custom.arcRadiusPercent = 1;
          custom.startRadiusPercent = 0;
          return custom;
        };
        this.PieSpreader = function(helper, percent, custom) {
          if (custom === null) {
            custom = PieSpreaderCustomization();
          }
          helper.setBaseValue(custom.spreaderPercent * percent, custom);
          var arcBaseRadius = helper.sliceRadius * custom.arcBaseRadiusPercent;
          var arcRadius = helper.sliceRadius * custom.arcRadiusPercent;
          spreaderPathString = [];
          helper.StartSpreader(spreaderPathString, helper.startAngle, arcBaseRadius);
          spreaderPathString.push(helper.ArcTo(arcRadius, helper.middleAngle, arcBaseRadius));
          spreaderPathString.push(helper.ArcTo(arcRadius, helper.endAngle, arcBaseRadius));
          spreaderPathString.push(helper.Close());
          return {
            spreaderPathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.StarSpreaderCustomization = function() {
          var custom = new spreaderPathCustomization();
          custom.minRadiusPercent = 0.5;
          return custom;
        };
        this.StarSpreader = function(helper, percent, custom) {
          if (custom === null) {
            custom = StarSpreaderCustomization();
          }
          helper.setBaseValue(custom.spreaderPercent * percent, custom);
          rbase = helper.wheelRadius * custom.spreaderPercent * custom.minRadiusPercent * percent;
          r = helper.sliceRadius;
          spreaderPathString = [];
          sliceAngle = helper.sliceAngle / helper.navItemCount;
          baseAngle = helper.navAngle;
          if (helper.endAngle - helper.startAngle < 360) {
            baseAngle = helper.startAngle;
          }
          helper.StartSpreader(spreaderPathString, baseAngle, r);
          for (var i2 = 0; i2 < helper.navItemCount; i2++) {
            startAngle = i2 * sliceAngle + (baseAngle + sliceAngle / 2);
            middleAngle = startAngle + sliceAngle / 2;
            endAngle = startAngle + sliceAngle;
            if (helper.endAngle - helper.startAngle < 360) {
              if (i2 === helper.navItemCount - 1) {
                endAngle = middleAngle;
              }
            }
            spreaderPathString.push(helper.LineTo(startAngle, rbase));
            spreaderPathString.push(helper.LineTo(middleAngle, r));
            spreaderPathString.push(helper.LineTo(endAngle, rbase));
          }
          spreaderPathString.push(helper.Close());
          return {
            spreaderPathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.AntiStarSpreaderCustomization = function() {
          var custom = new spreaderPathCustomization();
          custom.minRadiusPercent = 0.21;
          return custom;
        };
        this.AntiStarSpreader = function(helper, percent, custom) {
          if (custom === null) {
            custom = AntiStarSpreaderCustomization();
          }
          helper.setBaseValue(custom.spreaderPercent * percent, custom);
          rbase = helper.wheelRadius * custom.spreaderPercent * custom.minRadiusPercent * percent;
          r = helper.sliceRadius;
          spreaderPathString = [];
          sliceAngle = helper.sliceAngle / helper.navItemCount;
          baseAngle = helper.navAngle;
          if (helper.endAngle - helper.startAngle < 360) {
            baseAngle = helper.startAngle;
            helper.StartSpreader(spreaderPathString, baseAngle, rbase);
          } else {
            spreaderPathString.push(helper.MoveTo(helper.startAngle + (helper.navAngle + sliceAngle / 2), rbase));
          }
          for (var i2 = 0; i2 < helper.navItemCount; i2++) {
            startAngle = i2 * sliceAngle + (baseAngle + sliceAngle / 2);
            middleAngle = startAngle + sliceAngle / 2;
            endAngle = startAngle + sliceAngle;
            if (helper.endAngle - helper.startAngle < 360) {
              if (i2 === helper.navItemCount - 1) {
                endAngle = middleAngle;
              }
            }
            spreaderPathString.push(helper.LineTo(startAngle, r));
            spreaderPathString.push(helper.LineTo(middleAngle, rbase));
            spreaderPathString.push(helper.LineTo(endAngle, r));
          }
          spreaderPathString.push(helper.Close());
          return {
            spreaderPathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.FlowerSpreaderCustomization = function() {
          var custom = new spreaderPathCustomization();
          custom.minRadiusPercent = 0.63;
          custom.menuRadius = 7;
          ;
          return custom;
        };
        this.FlowerSpreader = function(helper, percent, custom) {
          if (custom === null) {
            custom = FlowerSpreaderCustomization();
          }
          helper.setBaseValue(custom.spreaderPercent * percent, custom);
          rbase = helper.wheelRadius * custom.spreaderPercent * custom.minRadiusPercent * percent;
          r = helper.sliceRadius;
          spreaderPathString = [];
          sliceAngle = helper.sliceAngle / helper.navItemCount;
          baseAngle = helper.navAngle;
          if (helper.endAngle - helper.startAngle < 360) {
            baseAngle = helper.startAngle;
            helper.StartSpreader(spreaderPathString, baseAngle, rbase);
          } else {
            spreaderPathString.push(helper.MoveTo(helper.startAngle + (helper.navAngle + sliceAngle / 2), rbase));
          }
          for (var i2 = 0; i2 < helper.navItemCount; i2++) {
            startAngle = i2 * sliceAngle + (baseAngle + sliceAngle / 2);
            middleAngle = startAngle + sliceAngle / 2;
            endAngle = startAngle + sliceAngle;
            if (helper.endAngle - helper.startAngle < 360) {
              if (i2 === 0) {
                spreaderPathString.push(helper.ArcTo(custom.menuRadius, startAngle, rbase));
              }
              if (i2 === helper.navItemCount - 1) {
                endAngle = middleAngle;
              }
            } else {
              spreaderPathString.push(helper.LineTo(startAngle, rbase));
            }
            spreaderPathString.push(helper.ArcTo(custom.menuRadius, endAngle, rbase));
          }
          spreaderPathString.push(helper.Close());
          return {
            spreaderPathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.HolderSpreaderCustomization = function() {
          var custom = new spreaderPathCustomization();
          custom.minRadiusPercent = 0.5;
          custom.menuRadius = 37;
          return custom;
        };
        this.HolderSpreader = function(helper, percent, custom) {
          if (custom === null) {
            custom = HolderSpreaderCustomization();
          }
          helper.setBaseValue(custom.spreaderPercent * percent, custom);
          rbase = helper.wheelRadius * custom.spreaderPercent * custom.minRadiusPercent * percent;
          r = helper.sliceRadius;
          spreaderPathString = [];
          sliceAngle = helper.sliceAngle / helper.navItemCount;
          baseAngle = helper.navAngle;
          if (helper.endAngle - helper.startAngle < 360) {
            baseAngle = helper.startAngle;
            helper.StartSpreader(spreaderPathString, baseAngle, rbase);
          } else {
            spreaderPathString.push(helper.MoveTo(helper.startAngle + (helper.navAngle + sliceAngle / 2), rbase));
          }
          for (var i2 = 0; i2 < helper.navItemCount; i2++) {
            startAngle = i2 * sliceAngle + (baseAngle + sliceAngle / 2);
            middleAngle = startAngle + sliceAngle / 4;
            endAngle = startAngle + sliceAngle;
            if (helper.endAngle - helper.startAngle < 360) {
              if (i2 === helper.navItemCount - 1) {
                endAngle = middleAngle;
              }
            } else {
              spreaderPathString.push(helper.LineTo(startAngle, rbase));
            }
            spreaderPathString.push(helper.LineTo(startAngle, r));
            spreaderPathString.push(helper.ArcBackTo(custom.menuRadius, middleAngle, rbase));
            spreaderPathString.push(helper.ArcTo(custom.menuRadius, endAngle, r));
          }
          spreaderPathString.push(helper.Close());
          return {
            spreaderPathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.LineSpreaderCustomization = function() {
          var custom = new spreaderPathCustomization();
          custom.minRadiusPercent = 0.5;
          return custom;
        };
        this.LineSpreader = function(helper, percent, custom) {
          if (custom === null) {
            custom = LineSpreaderCustomization();
          }
          helper.setBaseValue(custom.spreaderPercent * percent, custom);
          rbase = helper.wheelRadius * custom.spreaderPercent * custom.minRadiusPercent * percent;
          r = helper.sliceRadius;
          spreaderPathString = [];
          sliceAngle = helper.sliceAngle / helper.navItemCount;
          baseAngle = helper.navAngle;
          if (helper.endAngle - helper.startAngle < 360) {
            baseAngle = helper.startAngle;
          }
          spreaderPathString.push(helper.MoveTo(baseAngle + sliceAngle / 2, r));
          for (var i2 = 0; i2 < helper.navItemCount; i2++) {
            startAngle = i2 * sliceAngle + (baseAngle + sliceAngle / 2);
            endAngle = startAngle + sliceAngle;
            if (helper.navItemCount === 2) {
              endAngle -= 90;
            }
            spreaderPathString.push(helper.LineTo(startAngle, r));
            spreaderPathString.push(helper.LineTo(endAngle, r));
          }
          spreaderPathString.push(helper.Close());
          return {
            spreaderPathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        return this;
      };
      marker = function(wheelnav3) {
        this.wheelnav = wheelnav3;
        if (this.wheelnav.markerEnable) {
          this.markerHelper = new pathHelper();
          this.markerHelper.centerX = this.wheelnav.centerX;
          this.markerHelper.centerY = this.wheelnav.centerY;
          this.markerHelper.navItemCount = this.wheelnav.navItemCount;
          this.markerHelper.navAngle = this.wheelnav.navAngle;
          this.markerHelper.wheelRadius = this.wheelnav.wheelRadius * this.wheelnav.maxPercent;
          this.markerHelper.sliceAngle = this.wheelnav.navItems[0].sliceAngle;
          this.markerHelper.startAngle = this.markerHelper.navAngle - this.markerHelper.sliceAngle / 2;
          this.animateeffect = "bounce";
          this.animatetime = 1500;
          if (this.wheelnav.animateeffect !== null) {
            this.animateeffect = this.wheelnav.animateeffect;
          }
          if (this.wheelnav.animatetime !== null) {
            this.animatetime = this.wheelnav.animatetime;
          }
          this.markerPathMin = this.wheelnav.markerPathFunction(this.markerHelper, this.wheelnav.minPercent, this.wheelnav.markerPathCustom);
          this.markerPathMax = this.wheelnav.markerPathFunction(this.markerHelper, this.wheelnav.maxPercent, this.wheelnav.markerPathCustom);
          this.marker = this.wheelnav.raphael.path(this.markerPathMax.markerPathString);
          this.marker.attr(this.wheelnav.markerAttr);
          this.marker.id = this.wheelnav.getMarkerId();
          this.marker.node.id = this.marker.id;
        }
        return this;
      };
      marker.prototype.setCurrentTransform = function(navAngle) {
        if (this.wheelnav.markerEnable) {
          var currentPath2 = "";
          if (this.wheelnav.currentPercent === this.wheelnav.maxPercent) {
            currentPath2 = this.markerPathMax.markerPathString;
          } else {
            currentPath2 = this.markerPathMin.markerPathString;
          }
          if (navAngle !== void 0) {
            var rotationAngle = navAngle - this.markerHelper.navAngle;
            markerTransformAttr = {
              transform: "r," + rotationAngle.toString() + "," + this.wheelnav.centerX + "," + this.wheelnav.centerY,
              path: currentPath2
            };
          } else {
            markerTransformAttr = {
              path: currentPath2
            };
          }
          this.marker.animate(markerTransformAttr, this.animatetime, this.animateeffect);
          this.marker.toFront();
        }
      };
      markerPath = function() {
        this.NullMarker = function(helper, custom) {
          if (custom === null) {
            custom = new markerPathCustomization();
          }
          helper.setBaseValue(custom);
          return {
            markerPathString: "",
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.TriangleMarkerCustomization = function() {
          var custom = new markerPathCustomization();
          custom.arcBaseRadiusPercent = 1.09;
          custom.arcRadiusPercent = 1.2;
          custom.startRadiusPercent = 0;
          return custom;
        };
        this.TriangleMarker = function(helper, percent, custom) {
          if (custom === null) {
            custom = TriangleMarkerCustomization();
          }
          helper.setBaseValue(custom.markerPercent * percent, custom);
          var arcBaseRadius = helper.sliceRadius * custom.arcBaseRadiusPercent;
          var arcRadius = helper.sliceRadius * custom.arcRadiusPercent;
          var startAngle2 = helper.startAngle + helper.sliceAngle * 0.46;
          var endAngle2 = helper.startAngle + helper.sliceAngle * 0.54;
          markerPathString = [
            helper.MoveTo(helper.navAngle, arcBaseRadius),
            helper.LineTo(startAngle2, arcRadius),
            helper.LineTo(endAngle2, arcRadius),
            helper.Close()
          ];
          return {
            markerPathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.PieLineMarkerCustomization = function() {
          var custom = new markerPathCustomization();
          custom.arcBaseRadiusPercent = 1;
          custom.arcRadiusPercent = 1;
          custom.startRadiusPercent = 0;
          custom.sliceAngle = null;
          return custom;
        };
        this.PieLineMarker = function(helper, percent, custom) {
          if (custom === null) {
            custom = PieLineMarkerCustomization();
          }
          helper.setBaseValue(custom.markerPercent * percent, custom);
          var arcBaseRadius = helper.sliceRadius * custom.arcBaseRadiusPercent;
          var arcRadius = helper.sliceRadius * custom.arcRadiusPercent;
          if (custom.sliceAngle !== null) {
            helper.startAngle = helper.navAngle - custom.sliceAngle / 2;
            helper.endAngle = helper.navAngle + custom.sliceAngle / 2;
          }
          markerPathString = [
            helper.MoveTo(helper.startAngle, arcBaseRadius),
            helper.ArcTo(arcRadius, helper.endAngle, arcBaseRadius),
            helper.ArcBackTo(arcRadius, helper.startAngle, arcBaseRadius),
            helper.Close()
          ];
          return {
            markerPathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.MenuMarkerCustomization = function() {
          var custom = new markerPathCustomization();
          custom.menuRadius = 40;
          custom.titleRadiusPercent = 0.63;
          custom.lineBaseRadiusPercent = 0;
          return custom;
        };
        this.MenuMarker = function(helper, percent, custom) {
          if (custom === null) {
            custom = MenuMarkerCustomization();
          }
          helper.setBaseValue(custom.markerPercent * percent, custom);
          x = helper.centerX;
          y = helper.centerY;
          helper.titleRadius = helper.wheelRadius * custom.titleRadiusPercent * percent;
          helper.setTitlePos();
          var menuRadius = custom.menuRadius * percent;
          if (percent <= 0.05) {
            menuRadius = 11;
          }
          middleTheta = helper.middleTheta;
          markerPathString = [
            ["M", helper.titlePosX - menuRadius * Math.cos(middleTheta), helper.titlePosY - menuRadius * Math.sin(middleTheta)],
            ["A", menuRadius, menuRadius, 0, 0, 1, helper.titlePosX + menuRadius * Math.cos(middleTheta), helper.titlePosY + menuRadius * Math.sin(middleTheta)],
            ["A", menuRadius, menuRadius, 0, 0, 1, helper.titlePosX - menuRadius * Math.cos(middleTheta), helper.titlePosY - menuRadius * Math.sin(middleTheta)],
            ["z"]
          ];
          return {
            markerPathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.LineMarkerCustomization = function() {
          var custom = new markerPathCustomization();
          custom.arcBaseRadiusPercent = 1.05;
          custom.arcRadiusPercent = 1.2;
          custom.startRadiusPercent = 0;
          return custom;
        };
        this.LineMarker = function(helper, percent, custom) {
          if (custom === null) {
            custom = LineMarkerCustomization();
          }
          helper.setBaseValue(custom.markerPercent * percent, custom);
          var arcBaseRadius = helper.sliceRadius * custom.arcBaseRadiusPercent;
          var arcRadius = helper.sliceRadius * custom.arcRadiusPercent;
          markerPathString = [
            helper.MoveTo(helper.navAngle, arcBaseRadius),
            helper.LineTo(helper.navAngle, arcRadius),
            helper.Close()
          ];
          return {
            markerPathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        this.DropMarkerCustomization = function() {
          var custom = new markerPathCustomization();
          custom.dropBaseRadiusPercent = 0;
          custom.dropRadiusPercent = 0.15;
          return custom;
        };
        this.DropMarker = function(helper, percent, custom) {
          if (custom === null) {
            custom = DropMarkerCustomization();
          }
          helper.setBaseValue(custom.markerPercent * percent, custom);
          var arcBaseRadius = helper.sliceRadius * custom.dropBaseRadiusPercent;
          var startAngle2 = helper.startAngle + helper.sliceAngle * 0.2;
          var startAngle22 = helper.startAngle;
          var endAngle2 = helper.startAngle + helper.sliceAngle * 0.8;
          var endAngle22 = helper.startAngle + helper.sliceAngle;
          var dropRadius = helper.sliceRadius * custom.dropRadiusPercent;
          markerPathString = [
            helper.MoveTo(0, dropRadius),
            helper.ArcTo(dropRadius, 180, dropRadius),
            helper.ArcTo(dropRadius, 360, dropRadius),
            helper.MoveTo(helper.navAngle, arcBaseRadius),
            helper.LineTo(startAngle2, dropRadius),
            helper.LineTo(startAngle22, dropRadius),
            helper.LineTo(helper.navAngle, dropRadius * 1.6),
            helper.LineTo(endAngle22, dropRadius),
            helper.LineTo(endAngle2, dropRadius),
            helper.Close()
          ];
          return {
            markerPathString,
            titlePosX: helper.titlePosX,
            titlePosY: helper.titlePosY
          };
        };
        return this;
      };
      var colorpalette = {
        defaultpalette: new Array("#2D9E46", "#F5BE41", "#F77604", "#D63C22", "#006BA6", "#92ADAF"),
        purple: new Array("#4F346B", "#623491", "#9657D6", "#AD74E7", "#CBA3F3"),
        greenred: new Array("#17B92A", "#FF3D00", "#17B92A", "#FF3D00"),
        greensilver: new Array("#1F700A", "#79CC3C", "#D4E178", "#E6D5C3", "#AC875D"),
        oceanfive: new Array("#00A0B0", "#6A4A3C", "#CC333F", "#EB6841", "#EDC951"),
        garden: new Array("#648A4F", "#2B2B29", "#DF6126", "#FFA337", "#F57C85"),
        gamebookers: new Array("#FF9900", "#DCDCDC", "#BCBCBC", "#3299BB", "#727272"),
        parrot: new Array("#D80351", "#F5D908", "#00A3EE", "#929292", "#3F3F3F"),
        pisycholand: new Array("#FF1919", "#FF5E19", "#FF9F19", "#E4FF19", "#29FF19"),
        makeLOVEnotWAR: new Array("#2C0EF0", "#B300FF", "#6751F0", "#FF006F", "#8119FF"),
        theworldismine: new Array("#F21D1D", "#FF2167", "#B521FF", "#7E2AA8", "#000000"),
        fractalloveone: new Array("#002EFF", "#00FFF7", "#00FF62", "#FFAA00", "#FFF700"),
        fractallovetwo: new Array("#FF9500", "#FF0000", "#FF00F3", "#AA00FF", "#002EFF"),
        fractallove: new Array("#002EFF", "#00FFF7", "#00FF62", "#FFAA00", "#F5D908", "#FF0000", "#FF00F3", "#AA00FF"),
        sprinkles: new Array("#272523", "#FFACAC", "#FFD700", "#00590C", "#08006D"),
        goldenyellow: new Array("#D8B597", "#8C4006", "#B6690F", "#E3C57F", "#FFEDBE"),
        hotaru: new Array("#364C4A", "#497C7F", "#92C5C0", "#858168", "#CCBCA5")
      };
    }
  });

  // ../deps/phoenix_html/priv/static/phoenix_html.js
  (function() {
    var PolyfillEvent = eventConstructor();
    function eventConstructor() {
      if (typeof window.CustomEvent === "function")
        return window.CustomEvent;
      function CustomEvent2(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: void 0 };
        var evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
      }
      CustomEvent2.prototype = window.Event.prototype;
      return CustomEvent2;
    }
    function buildHiddenInput(name, value) {
      var input = document.createElement("input");
      input.type = "hidden";
      input.name = name;
      input.value = value;
      return input;
    }
    function handleClick(element, targetModifierKey) {
      var to = element.getAttribute("data-to"), method = buildHiddenInput("_method", element.getAttribute("data-method")), csrf = buildHiddenInput("_csrf_token", element.getAttribute("data-csrf")), form = document.createElement("form"), submit = document.createElement("input"), target = element.getAttribute("target");
      form.method = element.getAttribute("data-method") === "get" ? "get" : "post";
      form.action = to;
      form.style.display = "none";
      if (target)
        form.target = target;
      else if (targetModifierKey)
        form.target = "_blank";
      form.appendChild(csrf);
      form.appendChild(method);
      document.body.appendChild(form);
      submit.type = "submit";
      form.appendChild(submit);
      submit.click();
    }
    window.addEventListener("click", function(e) {
      var element = e.target;
      if (e.defaultPrevented)
        return;
      while (element && element.getAttribute) {
        var phoenixLinkEvent = new PolyfillEvent("phoenix.link.click", {
          "bubbles": true,
          "cancelable": true
        });
        if (!element.dispatchEvent(phoenixLinkEvent)) {
          e.preventDefault();
          e.stopImmediatePropagation();
          return false;
        }
        if (element.getAttribute("data-method")) {
          handleClick(element, e.metaKey || e.shiftKey);
          e.preventDefault();
          return false;
        } else {
          element = element.parentNode;
        }
      }
    }, false);
    window.addEventListener("phoenix.link.click", function(e) {
      var message = e.target.getAttribute("data-confirm");
      if (message && !window.confirm(message)) {
        e.preventDefault();
      }
    }, false);
  })();

  // ../deps/phoenix/priv/static/phoenix.mjs
  var closure = (value) => {
    if (typeof value === "function") {
      return value;
    } else {
      let closure22 = function() {
        return value;
      };
      return closure22;
    }
  };
  var globalSelf = typeof self !== "undefined" ? self : null;
  var phxWindow = typeof window !== "undefined" ? window : null;
  var global = globalSelf || phxWindow || global;
  var DEFAULT_VSN = "2.0.0";
  var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };
  var DEFAULT_TIMEOUT = 1e4;
  var WS_CLOSE_NORMAL = 1e3;
  var CHANNEL_STATES = {
    closed: "closed",
    errored: "errored",
    joined: "joined",
    joining: "joining",
    leaving: "leaving"
  };
  var CHANNEL_EVENTS = {
    close: "phx_close",
    error: "phx_error",
    join: "phx_join",
    reply: "phx_reply",
    leave: "phx_leave"
  };
  var TRANSPORTS = {
    longpoll: "longpoll",
    websocket: "websocket"
  };
  var XHR_STATES = {
    complete: 4
  };
  var Push = class {
    constructor(channel, event, payload, timeout) {
      this.channel = channel;
      this.event = event;
      this.payload = payload || function() {
        return {};
      };
      this.receivedResp = null;
      this.timeout = timeout;
      this.timeoutTimer = null;
      this.recHooks = [];
      this.sent = false;
    }
    resend(timeout) {
      this.timeout = timeout;
      this.reset();
      this.send();
    }
    send() {
      if (this.hasReceived("timeout")) {
        return;
      }
      this.startTimeout();
      this.sent = true;
      this.channel.socket.push({
        topic: this.channel.topic,
        event: this.event,
        payload: this.payload(),
        ref: this.ref,
        join_ref: this.channel.joinRef()
      });
    }
    receive(status, callback) {
      if (this.hasReceived(status)) {
        callback(this.receivedResp.response);
      }
      this.recHooks.push({ status, callback });
      return this;
    }
    reset() {
      this.cancelRefEvent();
      this.ref = null;
      this.refEvent = null;
      this.receivedResp = null;
      this.sent = false;
    }
    matchReceive({ status, response, _ref }) {
      this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));
    }
    cancelRefEvent() {
      if (!this.refEvent) {
        return;
      }
      this.channel.off(this.refEvent);
    }
    cancelTimeout() {
      clearTimeout(this.timeoutTimer);
      this.timeoutTimer = null;
    }
    startTimeout() {
      if (this.timeoutTimer) {
        this.cancelTimeout();
      }
      this.ref = this.channel.socket.makeRef();
      this.refEvent = this.channel.replyEventName(this.ref);
      this.channel.on(this.refEvent, (payload) => {
        this.cancelRefEvent();
        this.cancelTimeout();
        this.receivedResp = payload;
        this.matchReceive(payload);
      });
      this.timeoutTimer = setTimeout(() => {
        this.trigger("timeout", {});
      }, this.timeout);
    }
    hasReceived(status) {
      return this.receivedResp && this.receivedResp.status === status;
    }
    trigger(status, response) {
      this.channel.trigger(this.refEvent, { status, response });
    }
  };
  var Timer = class {
    constructor(callback, timerCalc) {
      this.callback = callback;
      this.timerCalc = timerCalc;
      this.timer = null;
      this.tries = 0;
    }
    reset() {
      this.tries = 0;
      clearTimeout(this.timer);
    }
    scheduleTimeout() {
      clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        this.tries = this.tries + 1;
        this.callback();
      }, this.timerCalc(this.tries + 1));
    }
  };
  var Channel = class {
    constructor(topic, params, socket) {
      this.state = CHANNEL_STATES.closed;
      this.topic = topic;
      this.params = closure(params || {});
      this.socket = socket;
      this.bindings = [];
      this.bindingRef = 0;
      this.timeout = this.socket.timeout;
      this.joinedOnce = false;
      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
      this.pushBuffer = [];
      this.stateChangeRefs = [];
      this.rejoinTimer = new Timer(() => {
        if (this.socket.isConnected()) {
          this.rejoin();
        }
      }, this.socket.rejoinAfterMs);
      this.stateChangeRefs.push(this.socket.onError(() => this.rejoinTimer.reset()));
      this.stateChangeRefs.push(this.socket.onOpen(() => {
        this.rejoinTimer.reset();
        if (this.isErrored()) {
          this.rejoin();
        }
      }));
      this.joinPush.receive("ok", () => {
        this.state = CHANNEL_STATES.joined;
        this.rejoinTimer.reset();
        this.pushBuffer.forEach((pushEvent) => pushEvent.send());
        this.pushBuffer = [];
      });
      this.joinPush.receive("error", () => {
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.onClose(() => {
        this.rejoinTimer.reset();
        if (this.socket.hasLogger())
          this.socket.log("channel", `close ${this.topic} ${this.joinRef()}`);
        this.state = CHANNEL_STATES.closed;
        this.socket.remove(this);
      });
      this.onError((reason) => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `error ${this.topic}`, reason);
        if (this.isJoining()) {
          this.joinPush.reset();
        }
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.joinPush.receive("timeout", () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `timeout ${this.topic} (${this.joinRef()})`, this.joinPush.timeout);
        let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), this.timeout);
        leavePush.send();
        this.state = CHANNEL_STATES.errored;
        this.joinPush.reset();
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.on(CHANNEL_EVENTS.reply, (payload, ref) => {
        this.trigger(this.replyEventName(ref), payload);
      });
    }
    join(timeout = this.timeout) {
      if (this.joinedOnce) {
        throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");
      } else {
        this.timeout = timeout;
        this.joinedOnce = true;
        this.rejoin();
        return this.joinPush;
      }
    }
    onClose(callback) {
      this.on(CHANNEL_EVENTS.close, callback);
    }
    onError(callback) {
      return this.on(CHANNEL_EVENTS.error, (reason) => callback(reason));
    }
    on(event, callback) {
      let ref = this.bindingRef++;
      this.bindings.push({ event, ref, callback });
      return ref;
    }
    off(event, ref) {
      this.bindings = this.bindings.filter((bind) => {
        return !(bind.event === event && (typeof ref === "undefined" || ref === bind.ref));
      });
    }
    canPush() {
      return this.socket.isConnected() && this.isJoined();
    }
    push(event, payload, timeout = this.timeout) {
      payload = payload || {};
      if (!this.joinedOnce) {
        throw new Error(`tried to push '${event}' to '${this.topic}' before joining. Use channel.join() before pushing events`);
      }
      let pushEvent = new Push(this, event, function() {
        return payload;
      }, timeout);
      if (this.canPush()) {
        pushEvent.send();
      } else {
        pushEvent.startTimeout();
        this.pushBuffer.push(pushEvent);
      }
      return pushEvent;
    }
    leave(timeout = this.timeout) {
      this.rejoinTimer.reset();
      this.joinPush.cancelTimeout();
      this.state = CHANNEL_STATES.leaving;
      let onClose = () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `leave ${this.topic}`);
        this.trigger(CHANNEL_EVENTS.close, "leave");
      };
      let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), timeout);
      leavePush.receive("ok", () => onClose()).receive("timeout", () => onClose());
      leavePush.send();
      if (!this.canPush()) {
        leavePush.trigger("ok", {});
      }
      return leavePush;
    }
    onMessage(_event, payload, _ref) {
      return payload;
    }
    isMember(topic, event, payload, joinRef) {
      if (this.topic !== topic) {
        return false;
      }
      if (joinRef && joinRef !== this.joinRef()) {
        if (this.socket.hasLogger())
          this.socket.log("channel", "dropping outdated message", { topic, event, payload, joinRef });
        return false;
      } else {
        return true;
      }
    }
    joinRef() {
      return this.joinPush.ref;
    }
    rejoin(timeout = this.timeout) {
      if (this.isLeaving()) {
        return;
      }
      this.socket.leaveOpenTopic(this.topic);
      this.state = CHANNEL_STATES.joining;
      this.joinPush.resend(timeout);
    }
    trigger(event, payload, ref, joinRef) {
      let handledPayload = this.onMessage(event, payload, ref, joinRef);
      if (payload && !handledPayload) {
        throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");
      }
      let eventBindings = this.bindings.filter((bind) => bind.event === event);
      for (let i2 = 0; i2 < eventBindings.length; i2++) {
        let bind = eventBindings[i2];
        bind.callback(handledPayload, ref, joinRef || this.joinRef());
      }
    }
    replyEventName(ref) {
      return `chan_reply_${ref}`;
    }
    isClosed() {
      return this.state === CHANNEL_STATES.closed;
    }
    isErrored() {
      return this.state === CHANNEL_STATES.errored;
    }
    isJoined() {
      return this.state === CHANNEL_STATES.joined;
    }
    isJoining() {
      return this.state === CHANNEL_STATES.joining;
    }
    isLeaving() {
      return this.state === CHANNEL_STATES.leaving;
    }
  };
  var Ajax = class {
    static request(method, endPoint, accept, body, timeout, ontimeout, callback) {
      if (global.XDomainRequest) {
        let req = new global.XDomainRequest();
        return this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);
      } else {
        let req = new global.XMLHttpRequest();
        return this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);
      }
    }
    static xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {
      req.timeout = timeout;
      req.open(method, endPoint);
      req.onload = () => {
        let response = this.parseJSON(req.responseText);
        callback && callback(response);
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.onprogress = () => {
      };
      req.send(body);
      return req;
    }
    static xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {
      req.open(method, endPoint, true);
      req.timeout = timeout;
      req.setRequestHeader("Content-Type", accept);
      req.onerror = () => callback && callback(null);
      req.onreadystatechange = () => {
        if (req.readyState === XHR_STATES.complete && callback) {
          let response = this.parseJSON(req.responseText);
          callback(response);
        }
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.send(body);
      return req;
    }
    static parseJSON(resp) {
      if (!resp || resp === "") {
        return null;
      }
      try {
        return JSON.parse(resp);
      } catch (e) {
        console && console.log("failed to parse JSON response", resp);
        return null;
      }
    }
    static serialize(obj, parentKey) {
      let queryStr = [];
      for (var key in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, key)) {
          continue;
        }
        let paramKey = parentKey ? `${parentKey}[${key}]` : key;
        let paramVal = obj[key];
        if (typeof paramVal === "object") {
          queryStr.push(this.serialize(paramVal, paramKey));
        } else {
          queryStr.push(encodeURIComponent(paramKey) + "=" + encodeURIComponent(paramVal));
        }
      }
      return queryStr.join("&");
    }
    static appendParams(url, params) {
      if (Object.keys(params).length === 0) {
        return url;
      }
      let prefix = url.match(/\?/) ? "&" : "?";
      return `${url}${prefix}${this.serialize(params)}`;
    }
  };
  var LongPoll = class {
    constructor(endPoint) {
      this.endPoint = null;
      this.token = null;
      this.skipHeartbeat = true;
      this.reqs = /* @__PURE__ */ new Set();
      this.onopen = function() {
      };
      this.onerror = function() {
      };
      this.onmessage = function() {
      };
      this.onclose = function() {
      };
      this.pollEndpoint = this.normalizeEndpoint(endPoint);
      this.readyState = SOCKET_STATES.connecting;
      this.poll();
    }
    normalizeEndpoint(endPoint) {
      return endPoint.replace("ws://", "http://").replace("wss://", "https://").replace(new RegExp("(.*)/" + TRANSPORTS.websocket), "$1/" + TRANSPORTS.longpoll);
    }
    endpointURL() {
      return Ajax.appendParams(this.pollEndpoint, { token: this.token });
    }
    closeAndRetry(code, reason, wasClean) {
      this.close(code, reason, wasClean);
      this.readyState = SOCKET_STATES.connecting;
    }
    ontimeout() {
      this.onerror("timeout");
      this.closeAndRetry(1005, "timeout", false);
    }
    isActive() {
      return this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting;
    }
    poll() {
      this.ajax("GET", null, () => this.ontimeout(), (resp) => {
        if (resp) {
          var { status, token, messages } = resp;
          this.token = token;
        } else {
          status = 0;
        }
        switch (status) {
          case 200:
            messages.forEach((msg) => {
              setTimeout(() => this.onmessage({ data: msg }), 0);
            });
            this.poll();
            break;
          case 204:
            this.poll();
            break;
          case 410:
            this.readyState = SOCKET_STATES.open;
            this.onopen({});
            this.poll();
            break;
          case 403:
            this.onerror(403);
            this.close(1008, "forbidden", false);
            break;
          case 0:
          case 500:
            this.onerror(500);
            this.closeAndRetry(1011, "internal server error", 500);
            break;
          default:
            throw new Error(`unhandled poll status ${status}`);
        }
      });
    }
    send(body) {
      this.ajax("POST", body, () => this.onerror("timeout"), (resp) => {
        if (!resp || resp.status !== 200) {
          this.onerror(resp && resp.status);
          this.closeAndRetry(1011, "internal server error", false);
        }
      });
    }
    close(code, reason, wasClean) {
      for (let req of this.reqs) {
        req.abort();
      }
      this.readyState = SOCKET_STATES.closed;
      let opts = Object.assign({ code: 1e3, reason: void 0, wasClean: true }, { code, reason, wasClean });
      if (typeof CloseEvent !== "undefined") {
        this.onclose(new CloseEvent("close", opts));
      } else {
        this.onclose(opts);
      }
    }
    ajax(method, body, onCallerTimeout, callback) {
      let req;
      let ontimeout = () => {
        this.reqs.delete(req);
        onCallerTimeout();
      };
      req = Ajax.request(method, this.endpointURL(), "application/json", body, this.timeout, ontimeout, (resp) => {
        this.reqs.delete(req);
        if (this.isActive()) {
          callback(resp);
        }
      });
      this.reqs.add(req);
    }
  };
  var serializer_default = {
    HEADER_LENGTH: 1,
    META_LENGTH: 4,
    KINDS: { push: 0, reply: 1, broadcast: 2 },
    encode(msg, callback) {
      if (msg.payload.constructor === ArrayBuffer) {
        return callback(this.binaryEncode(msg));
      } else {
        let payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];
        return callback(JSON.stringify(payload));
      }
    },
    decode(rawPayload, callback) {
      if (rawPayload.constructor === ArrayBuffer) {
        return callback(this.binaryDecode(rawPayload));
      } else {
        let [join_ref, ref, topic, event, payload] = JSON.parse(rawPayload);
        return callback({ join_ref, ref, topic, event, payload });
      }
    },
    binaryEncode(message) {
      let { join_ref, ref, event, topic, payload } = message;
      let metaLength = this.META_LENGTH + join_ref.length + ref.length + topic.length + event.length;
      let header = new ArrayBuffer(this.HEADER_LENGTH + metaLength);
      let view = new DataView(header);
      let offset = 0;
      view.setUint8(offset++, this.KINDS.push);
      view.setUint8(offset++, join_ref.length);
      view.setUint8(offset++, ref.length);
      view.setUint8(offset++, topic.length);
      view.setUint8(offset++, event.length);
      Array.from(join_ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(topic, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(event, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      var combined = new Uint8Array(header.byteLength + payload.byteLength);
      combined.set(new Uint8Array(header), 0);
      combined.set(new Uint8Array(payload), header.byteLength);
      return combined.buffer;
    },
    binaryDecode(buffer) {
      let view = new DataView(buffer);
      let kind = view.getUint8(0);
      let decoder = new TextDecoder();
      switch (kind) {
        case this.KINDS.push:
          return this.decodePush(buffer, view, decoder);
        case this.KINDS.reply:
          return this.decodeReply(buffer, view, decoder);
        case this.KINDS.broadcast:
          return this.decodeBroadcast(buffer, view, decoder);
      }
    },
    decodePush(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let topicSize = view.getUint8(2);
      let eventSize = view.getUint8(3);
      let offset = this.HEADER_LENGTH + this.META_LENGTH - 1;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      return { join_ref: joinRef, ref: null, topic, event, payload: data };
    },
    decodeReply(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let refSize = view.getUint8(2);
      let topicSize = view.getUint8(3);
      let eventSize = view.getUint8(4);
      let offset = this.HEADER_LENGTH + this.META_LENGTH;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let ref = decoder.decode(buffer.slice(offset, offset + refSize));
      offset = offset + refSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      let payload = { status: event, response: data };
      return { join_ref: joinRef, ref, topic, event: CHANNEL_EVENTS.reply, payload };
    },
    decodeBroadcast(buffer, view, decoder) {
      let topicSize = view.getUint8(1);
      let eventSize = view.getUint8(2);
      let offset = this.HEADER_LENGTH + 2;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      return { join_ref: null, ref: null, topic, event, payload: data };
    }
  };
  var Socket = class {
    constructor(endPoint, opts = {}) {
      this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };
      this.channels = [];
      this.sendBuffer = [];
      this.ref = 0;
      this.timeout = opts.timeout || DEFAULT_TIMEOUT;
      this.transport = opts.transport || global.WebSocket || LongPoll;
      this.establishedConnections = 0;
      this.defaultEncoder = serializer_default.encode.bind(serializer_default);
      this.defaultDecoder = serializer_default.decode.bind(serializer_default);
      this.closeWasClean = false;
      this.binaryType = opts.binaryType || "arraybuffer";
      this.connectClock = 1;
      if (this.transport !== LongPoll) {
        this.encode = opts.encode || this.defaultEncoder;
        this.decode = opts.decode || this.defaultDecoder;
      } else {
        this.encode = this.defaultEncoder;
        this.decode = this.defaultDecoder;
      }
      let awaitingConnectionOnPageShow = null;
      if (phxWindow && phxWindow.addEventListener) {
        phxWindow.addEventListener("pagehide", (_e) => {
          if (this.conn) {
            this.disconnect();
            awaitingConnectionOnPageShow = this.connectClock;
          }
        });
        phxWindow.addEventListener("pageshow", (_e) => {
          if (awaitingConnectionOnPageShow === this.connectClock) {
            awaitingConnectionOnPageShow = null;
            this.connect();
          }
        });
      }
      this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 3e4;
      this.rejoinAfterMs = (tries) => {
        if (opts.rejoinAfterMs) {
          return opts.rejoinAfterMs(tries);
        } else {
          return [1e3, 2e3, 5e3][tries - 1] || 1e4;
        }
      };
      this.reconnectAfterMs = (tries) => {
        if (opts.reconnectAfterMs) {
          return opts.reconnectAfterMs(tries);
        } else {
          return [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][tries - 1] || 5e3;
        }
      };
      this.logger = opts.logger || null;
      this.longpollerTimeout = opts.longpollerTimeout || 2e4;
      this.params = closure(opts.params || {});
      this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
      this.vsn = opts.vsn || DEFAULT_VSN;
      this.heartbeatTimeoutTimer = null;
      this.heartbeatTimer = null;
      this.pendingHeartbeatRef = null;
      this.reconnectTimer = new Timer(() => {
        this.teardown(() => this.connect());
      }, this.reconnectAfterMs);
    }
    getLongPollTransport() {
      return LongPoll;
    }
    replaceTransport(newTransport) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.sendBuffer = [];
      if (this.conn) {
        this.conn.close();
        this.conn = null;
      }
      this.transport = newTransport;
    }
    protocol() {
      return location.protocol.match(/^https/) ? "wss" : "ws";
    }
    endPointURL() {
      let uri = Ajax.appendParams(Ajax.appendParams(this.endPoint, this.params()), { vsn: this.vsn });
      if (uri.charAt(0) !== "/") {
        return uri;
      }
      if (uri.charAt(1) === "/") {
        return `${this.protocol()}:${uri}`;
      }
      return `${this.protocol()}://${location.host}${uri}`;
    }
    disconnect(callback, code, reason) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.teardown(callback, code, reason);
    }
    connect(params) {
      if (params) {
        console && console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor");
        this.params = closure(params);
      }
      if (this.conn) {
        return;
      }
      this.connectClock++;
      this.closeWasClean = false;
      this.conn = new this.transport(this.endPointURL());
      this.conn.binaryType = this.binaryType;
      this.conn.timeout = this.longpollerTimeout;
      this.conn.onopen = () => this.onConnOpen();
      this.conn.onerror = (error) => this.onConnError(error);
      this.conn.onmessage = (event) => this.onConnMessage(event);
      this.conn.onclose = (event) => this.onConnClose(event);
    }
    log(kind, msg, data) {
      this.logger(kind, msg, data);
    }
    hasLogger() {
      return this.logger !== null;
    }
    onOpen(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.open.push([ref, callback]);
      return ref;
    }
    onClose(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.close.push([ref, callback]);
      return ref;
    }
    onError(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.error.push([ref, callback]);
      return ref;
    }
    onMessage(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.message.push([ref, callback]);
      return ref;
    }
    ping(callback) {
      if (!this.isConnected()) {
        return false;
      }
      let ref = this.makeRef();
      let startTime = Date.now();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref });
      let onMsgRef = this.onMessage((msg) => {
        if (msg.ref === ref) {
          this.off([onMsgRef]);
          callback(Date.now() - startTime);
        }
      });
      return true;
    }
    clearHeartbeats() {
      clearTimeout(this.heartbeatTimer);
      clearTimeout(this.heartbeatTimeoutTimer);
    }
    onConnOpen() {
      if (this.hasLogger())
        this.log("transport", `connected to ${this.endPointURL()}`);
      this.closeWasClean = false;
      this.establishedConnections++;
      this.flushSendBuffer();
      this.reconnectTimer.reset();
      this.resetHeartbeat();
      this.stateChangeCallbacks.open.forEach(([, callback]) => callback());
    }
    heartbeatTimeout() {
      if (this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
        if (this.hasLogger()) {
          this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
        }
        this.triggerChanError();
        this.closeWasClean = false;
        this.teardown(() => this.reconnectTimer.scheduleTimeout(), WS_CLOSE_NORMAL, "heartbeat timeout");
      }
    }
    resetHeartbeat() {
      if (this.conn && this.conn.skipHeartbeat) {
        return;
      }
      this.pendingHeartbeatRef = null;
      this.clearHeartbeats();
      this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    }
    teardown(callback, code, reason) {
      if (!this.conn) {
        return callback && callback();
      }
      this.waitForBufferDone(() => {
        if (this.conn) {
          if (code) {
            this.conn.close(code, reason || "");
          } else {
            this.conn.close();
          }
        }
        this.waitForSocketClosed(() => {
          if (this.conn) {
            this.conn.onopen = function() {
            };
            this.conn.onerror = function() {
            };
            this.conn.onmessage = function() {
            };
            this.conn.onclose = function() {
            };
            this.conn = null;
          }
          callback && callback();
        });
      });
    }
    waitForBufferDone(callback, tries = 1) {
      if (tries === 5 || !this.conn || !this.conn.bufferedAmount) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForBufferDone(callback, tries + 1);
      }, 150 * tries);
    }
    waitForSocketClosed(callback, tries = 1) {
      if (tries === 5 || !this.conn || this.conn.readyState === SOCKET_STATES.closed) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForSocketClosed(callback, tries + 1);
      }, 150 * tries);
    }
    onConnClose(event) {
      let closeCode = event && event.code;
      if (this.hasLogger())
        this.log("transport", "close", event);
      this.triggerChanError();
      this.clearHeartbeats();
      if (!this.closeWasClean && closeCode !== 1e3) {
        this.reconnectTimer.scheduleTimeout();
      }
      this.stateChangeCallbacks.close.forEach(([, callback]) => callback(event));
    }
    onConnError(error) {
      if (this.hasLogger())
        this.log("transport", error);
      let transportBefore = this.transport;
      let establishedBefore = this.establishedConnections;
      this.stateChangeCallbacks.error.forEach(([, callback]) => {
        callback(error, transportBefore, establishedBefore);
      });
      if (transportBefore === this.transport || establishedBefore > 0) {
        this.triggerChanError();
      }
    }
    triggerChanError() {
      this.channels.forEach((channel) => {
        if (!(channel.isErrored() || channel.isLeaving() || channel.isClosed())) {
          channel.trigger(CHANNEL_EVENTS.error);
        }
      });
    }
    connectionState() {
      switch (this.conn && this.conn.readyState) {
        case SOCKET_STATES.connecting:
          return "connecting";
        case SOCKET_STATES.open:
          return "open";
        case SOCKET_STATES.closing:
          return "closing";
        default:
          return "closed";
      }
    }
    isConnected() {
      return this.connectionState() === "open";
    }
    remove(channel) {
      this.off(channel.stateChangeRefs);
      this.channels = this.channels.filter((c) => c.joinRef() !== channel.joinRef());
    }
    off(refs) {
      for (let key in this.stateChangeCallbacks) {
        this.stateChangeCallbacks[key] = this.stateChangeCallbacks[key].filter(([ref]) => {
          return refs.indexOf(ref) === -1;
        });
      }
    }
    channel(topic, chanParams = {}) {
      let chan = new Channel(topic, chanParams, this);
      this.channels.push(chan);
      return chan;
    }
    push(data) {
      if (this.hasLogger()) {
        let { topic, event, payload, ref, join_ref } = data;
        this.log("push", `${topic} ${event} (${join_ref}, ${ref})`, payload);
      }
      if (this.isConnected()) {
        this.encode(data, (result) => this.conn.send(result));
      } else {
        this.sendBuffer.push(() => this.encode(data, (result) => this.conn.send(result)));
      }
    }
    makeRef() {
      let newRef = this.ref + 1;
      if (newRef === this.ref) {
        this.ref = 0;
      } else {
        this.ref = newRef;
      }
      return this.ref.toString();
    }
    sendHeartbeat() {
      if (this.pendingHeartbeatRef && !this.isConnected()) {
        return;
      }
      this.pendingHeartbeatRef = this.makeRef();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref: this.pendingHeartbeatRef });
      this.heartbeatTimeoutTimer = setTimeout(() => this.heartbeatTimeout(), this.heartbeatIntervalMs);
    }
    flushSendBuffer() {
      if (this.isConnected() && this.sendBuffer.length > 0) {
        this.sendBuffer.forEach((callback) => callback());
        this.sendBuffer = [];
      }
    }
    onConnMessage(rawMessage) {
      this.decode(rawMessage.data, (msg) => {
        let { topic, event, payload, ref, join_ref } = msg;
        if (ref && ref === this.pendingHeartbeatRef) {
          this.clearHeartbeats();
          this.pendingHeartbeatRef = null;
          this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
        }
        if (this.hasLogger())
          this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
        for (let i2 = 0; i2 < this.channels.length; i2++) {
          const channel = this.channels[i2];
          if (!channel.isMember(topic, event, payload, join_ref)) {
            continue;
          }
          channel.trigger(event, payload, ref, join_ref);
        }
        for (let i2 = 0; i2 < this.stateChangeCallbacks.message.length; i2++) {
          let [, callback] = this.stateChangeCallbacks.message[i2];
          callback(msg);
        }
      });
    }
    leaveOpenTopic(topic) {
      let dupChannel = this.channels.find((c) => c.topic === topic && (c.isJoined() || c.isJoining()));
      if (dupChannel) {
        if (this.hasLogger())
          this.log("transport", `leaving duplicate topic "${topic}"`);
        dupChannel.leave();
      }
    }
  };

  // ../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js
  var CONSECUTIVE_RELOADS = "consecutive-reloads";
  var MAX_RELOADS = 10;
  var RELOAD_JITTER_MIN = 5e3;
  var RELOAD_JITTER_MAX = 1e4;
  var FAILSAFE_JITTER = 3e4;
  var PHX_EVENT_CLASSES = [
    "phx-click-loading",
    "phx-change-loading",
    "phx-submit-loading",
    "phx-keydown-loading",
    "phx-keyup-loading",
    "phx-blur-loading",
    "phx-focus-loading"
  ];
  var PHX_COMPONENT = "data-phx-component";
  var PHX_LIVE_LINK = "data-phx-link";
  var PHX_TRACK_STATIC = "track-static";
  var PHX_LINK_STATE = "data-phx-link-state";
  var PHX_REF = "data-phx-ref";
  var PHX_REF_SRC = "data-phx-ref-src";
  var PHX_TRACK_UPLOADS = "track-uploads";
  var PHX_UPLOAD_REF = "data-phx-upload-ref";
  var PHX_PREFLIGHTED_REFS = "data-phx-preflighted-refs";
  var PHX_DONE_REFS = "data-phx-done-refs";
  var PHX_DROP_TARGET = "drop-target";
  var PHX_ACTIVE_ENTRY_REFS = "data-phx-active-refs";
  var PHX_LIVE_FILE_UPDATED = "phx:live-file:updated";
  var PHX_SKIP = "data-phx-skip";
  var PHX_PRUNE = "data-phx-prune";
  var PHX_PAGE_LOADING = "page-loading";
  var PHX_CONNECTED_CLASS = "phx-connected";
  var PHX_DISCONNECTED_CLASS = "phx-loading";
  var PHX_NO_FEEDBACK_CLASS = "phx-no-feedback";
  var PHX_ERROR_CLASS = "phx-error";
  var PHX_PARENT_ID = "data-phx-parent-id";
  var PHX_MAIN = "data-phx-main";
  var PHX_ROOT_ID = "data-phx-root-id";
  var PHX_TRIGGER_ACTION = "trigger-action";
  var PHX_FEEDBACK_FOR = "feedback-for";
  var PHX_HAS_FOCUSED = "phx-has-focused";
  var FOCUSABLE_INPUTS = ["text", "textarea", "number", "email", "password", "search", "tel", "url", "date", "time", "datetime-local", "color", "range"];
  var CHECKABLE_INPUTS = ["checkbox", "radio"];
  var PHX_HAS_SUBMITTED = "phx-has-submitted";
  var PHX_SESSION = "data-phx-session";
  var PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;
  var PHX_STICKY = "data-phx-sticky";
  var PHX_STATIC = "data-phx-static";
  var PHX_READONLY = "data-phx-readonly";
  var PHX_DISABLED = "data-phx-disabled";
  var PHX_DISABLE_WITH = "disable-with";
  var PHX_DISABLE_WITH_RESTORE = "data-phx-disable-with-restore";
  var PHX_HOOK = "hook";
  var PHX_DEBOUNCE = "debounce";
  var PHX_THROTTLE = "throttle";
  var PHX_UPDATE = "update";
  var PHX_KEY = "key";
  var PHX_PRIVATE = "phxPrivate";
  var PHX_AUTO_RECOVER = "auto-recover";
  var PHX_LV_DEBUG = "phx:live-socket:debug";
  var PHX_LV_PROFILE = "phx:live-socket:profiling";
  var PHX_LV_LATENCY_SIM = "phx:live-socket:latency-sim";
  var PHX_PROGRESS = "progress";
  var LOADER_TIMEOUT = 1;
  var BEFORE_UNLOAD_LOADER_TIMEOUT = 200;
  var BINDING_PREFIX = "phx-";
  var PUSH_TIMEOUT = 3e4;
  var DEBOUNCE_TRIGGER = "debounce-trigger";
  var THROTTLED = "throttled";
  var DEBOUNCE_PREV_KEY = "debounce-prev-key";
  var DEFAULTS = {
    debounce: 300,
    throttle: 300
  };
  var DYNAMICS = "d";
  var STATIC = "s";
  var COMPONENTS = "c";
  var EVENTS = "e";
  var REPLY = "r";
  var TITLE = "t";
  var TEMPLATES = "p";
  var EntryUploader = class {
    constructor(entry, chunkSize, liveSocket2) {
      this.liveSocket = liveSocket2;
      this.entry = entry;
      this.offset = 0;
      this.chunkSize = chunkSize;
      this.chunkTimer = null;
      this.uploadChannel = liveSocket2.channel(`lvu:${entry.ref}`, { token: entry.metadata() });
    }
    error(reason) {
      clearTimeout(this.chunkTimer);
      this.uploadChannel.leave();
      this.entry.error(reason);
    }
    upload() {
      this.uploadChannel.onError((reason) => this.error(reason));
      this.uploadChannel.join().receive("ok", (_data) => this.readNextChunk()).receive("error", (reason) => this.error(reason));
    }
    isDone() {
      return this.offset >= this.entry.file.size;
    }
    readNextChunk() {
      let reader = new window.FileReader();
      let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);
      reader.onload = (e) => {
        if (e.target.error === null) {
          this.offset += e.target.result.byteLength;
          this.pushChunk(e.target.result);
        } else {
          return logError("Read error: " + e.target.error);
        }
      };
      reader.readAsArrayBuffer(blob);
    }
    pushChunk(chunk) {
      if (!this.uploadChannel.isJoined()) {
        return;
      }
      this.uploadChannel.push("chunk", chunk).receive("ok", () => {
        this.entry.progress(this.offset / this.entry.file.size * 100);
        if (!this.isDone()) {
          this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);
        }
      });
    }
  };
  var logError = (msg, obj) => console.error && console.error(msg, obj);
  var isCid = (cid) => {
    let type = typeof cid;
    return type === "number" || type === "string" && /^(0|[1-9]\d*)$/.test(cid);
  };
  function detectDuplicateIds() {
    let ids = /* @__PURE__ */ new Set();
    let elems = document.querySelectorAll("*[id]");
    for (let i2 = 0, len = elems.length; i2 < len; i2++) {
      if (ids.has(elems[i2].id)) {
        console.error(`Multiple IDs detected: ${elems[i2].id}. Ensure unique element ids.`);
      } else {
        ids.add(elems[i2].id);
      }
    }
  }
  var debug = (view, kind, msg, obj) => {
    if (view.liveSocket.isDebugEnabled()) {
      console.log(`${view.id} ${kind}: ${msg} - `, obj);
    }
  };
  var closure2 = (val) => typeof val === "function" ? val : function() {
    return val;
  };
  var clone = (obj) => {
    return JSON.parse(JSON.stringify(obj));
  };
  var closestPhxBinding = (el, binding, borderEl) => {
    do {
      if (el.matches(`[${binding}]`)) {
        return el;
      }
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));
    return null;
  };
  var isObject = (obj) => {
    return obj !== null && typeof obj === "object" && !(obj instanceof Array);
  };
  var isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);
  var isEmpty = (obj) => {
    for (let x2 in obj) {
      return false;
    }
    return true;
  };
  var maybe = (el, callback) => el && callback(el);
  var channelUploader = function(entries, onError, resp, liveSocket2) {
    entries.forEach((entry) => {
      let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket2);
      entryUploader.upload();
    });
  };
  var Browser = {
    canPushState() {
      return typeof history.pushState !== "undefined";
    },
    dropLocal(localStorage, namespace, subkey) {
      return localStorage.removeItem(this.localKey(namespace, subkey));
    },
    updateLocal(localStorage, namespace, subkey, initial, func) {
      let current = this.getLocal(localStorage, namespace, subkey);
      let key = this.localKey(namespace, subkey);
      let newVal = current === null ? initial : func(current);
      localStorage.setItem(key, JSON.stringify(newVal));
      return newVal;
    },
    getLocal(localStorage, namespace, subkey) {
      return JSON.parse(localStorage.getItem(this.localKey(namespace, subkey)));
    },
    updateCurrentState(callback) {
      if (!this.canPushState()) {
        return;
      }
      history.replaceState(callback(history.state || {}), "", window.location.href);
    },
    pushState(kind, meta, to) {
      if (this.canPushState()) {
        if (to !== window.location.href) {
          if (meta.type == "redirect" && meta.scroll) {
            let currentState = history.state || {};
            currentState.scroll = meta.scroll;
            history.replaceState(currentState, "", window.location.href);
          }
          delete meta.scroll;
          history[kind + "State"](meta, "", to || null);
          let hashEl = this.getHashTargetEl(window.location.hash);
          if (hashEl) {
            hashEl.scrollIntoView();
          } else if (meta.type === "redirect") {
            window.scroll(0, 0);
          }
        }
      } else {
        this.redirect(to);
      }
    },
    setCookie(name, value) {
      document.cookie = `${name}=${value}`;
    },
    getCookie(name) {
      return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name}s*=s*([^;]*).*$)|^.*$`), "$1");
    },
    redirect(toURL, flash) {
      if (flash) {
        Browser.setCookie("__phoenix_flash__", flash + "; max-age=60000; path=/");
      }
      window.location = toURL;
    },
    localKey(namespace, subkey) {
      return `${namespace}-${subkey}`;
    },
    getHashTargetEl(maybeHash) {
      let hash = maybeHash.toString().substring(1);
      if (hash === "") {
        return;
      }
      return document.getElementById(hash) || document.querySelector(`a[name="${hash}"]`);
    }
  };
  var browser_default = Browser;
  var DOM = {
    byId(id) {
      return document.getElementById(id) || logError(`no id found for ${id}`);
    },
    removeClass(el, className) {
      el.classList.remove(className);
      if (el.classList.length === 0) {
        el.removeAttribute("class");
      }
    },
    all(node, query, callback) {
      if (!node) {
        return [];
      }
      let array = Array.from(node.querySelectorAll(query));
      return callback ? array.forEach(callback) : array;
    },
    childNodeLength(html) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return template.content.childElementCount;
    },
    isUploadInput(el) {
      return el.type === "file" && el.getAttribute(PHX_UPLOAD_REF) !== null;
    },
    findUploadInputs(node) {
      return this.all(node, `input[type="file"][${PHX_UPLOAD_REF}]`);
    },
    findComponentNodeList(node, cid) {
      return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node);
    },
    isPhxDestroyed(node) {
      return node.id && DOM.private(node, "destroyed") ? true : false;
    },
    markPhxChildDestroyed(el) {
      if (this.isPhxChild(el)) {
        el.setAttribute(PHX_SESSION, "");
      }
      this.putPrivate(el, "destroyed", true);
    },
    findPhxChildrenInFragment(html, parentId) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return this.findPhxChildren(template.content, parentId);
    },
    isIgnored(el, phxUpdate) {
      return (el.getAttribute(phxUpdate) || el.getAttribute("data-phx-update")) === "ignore";
    },
    isPhxUpdate(el, phxUpdate, updateTypes) {
      return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;
    },
    findPhxSticky(el) {
      return this.all(el, `[${PHX_STICKY}]`);
    },
    findPhxChildren(el, parentId) {
      return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}="${parentId}"]`);
    },
    findParentCIDs(node, cids) {
      let initial = new Set(cids);
      return cids.reduce((acc, cid) => {
        let selector = `[${PHX_COMPONENT}="${cid}"] [${PHX_COMPONENT}]`;
        this.filterWithinSameLiveView(this.all(node, selector), node).map((el) => parseInt(el.getAttribute(PHX_COMPONENT))).forEach((childCID) => acc.delete(childCID));
        return acc;
      }, initial);
    },
    filterWithinSameLiveView(nodes, parent) {
      if (parent.querySelector(PHX_VIEW_SELECTOR)) {
        return nodes.filter((el) => this.withinSameLiveView(el, parent));
      } else {
        return nodes;
      }
    },
    withinSameLiveView(node, parent) {
      while (node = node.parentNode) {
        if (node.isSameNode(parent)) {
          return true;
        }
        if (node.getAttribute(PHX_SESSION) !== null) {
          return false;
        }
      }
    },
    private(el, key) {
      return el[PHX_PRIVATE] && el[PHX_PRIVATE][key];
    },
    deletePrivate(el, key) {
      el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key];
    },
    putPrivate(el, key, value) {
      if (!el[PHX_PRIVATE]) {
        el[PHX_PRIVATE] = {};
      }
      el[PHX_PRIVATE][key] = value;
    },
    updatePrivate(el, key, defaultVal, updateFunc) {
      let existing = this.private(el, key);
      if (existing === void 0) {
        this.putPrivate(el, key, updateFunc(defaultVal));
      } else {
        this.putPrivate(el, key, updateFunc(existing));
      }
    },
    copyPrivates(target, source) {
      if (source[PHX_PRIVATE]) {
        target[PHX_PRIVATE] = source[PHX_PRIVATE];
      }
    },
    putTitle(str) {
      let titleEl = document.querySelector("title");
      let { prefix, suffix } = titleEl.dataset;
      document.title = `${prefix || ""}${str}${suffix || ""}`;
    },
    debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, callback) {
      let debounce = el.getAttribute(phxDebounce);
      let throttle = el.getAttribute(phxThrottle);
      if (debounce === "") {
        debounce = defaultDebounce;
      }
      if (throttle === "") {
        throttle = defaultThrottle;
      }
      let value = debounce || throttle;
      switch (value) {
        case null:
          return callback();
        case "blur":
          if (this.once(el, "debounce-blur")) {
            el.addEventListener("blur", () => callback());
          }
          return;
        default:
          let timeout = parseInt(value);
          let trigger = () => throttle ? this.deletePrivate(el, THROTTLED) : callback();
          let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger);
          if (isNaN(timeout)) {
            return logError(`invalid throttle/debounce value: ${value}`);
          }
          if (throttle) {
            let newKeyDown = false;
            if (event.type === "keydown") {
              let prevKey = this.private(el, DEBOUNCE_PREV_KEY);
              this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);
              newKeyDown = prevKey !== event.key;
            }
            if (!newKeyDown && this.private(el, THROTTLED)) {
              return false;
            } else {
              callback();
              this.putPrivate(el, THROTTLED, true);
              setTimeout(() => {
                if (asyncFilter()) {
                  this.triggerCycle(el, DEBOUNCE_TRIGGER);
                }
              }, timeout);
            }
          } else {
            setTimeout(() => {
              if (asyncFilter()) {
                this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle);
              }
            }, timeout);
          }
          let form = el.form;
          if (form && this.once(form, "bind-debounce")) {
            form.addEventListener("submit", () => {
              Array.from(new FormData(form).entries(), ([name]) => {
                let input = form.querySelector(`[name="${name}"]`);
                this.incCycle(input, DEBOUNCE_TRIGGER);
                this.deletePrivate(input, THROTTLED);
              });
            });
          }
          if (this.once(el, "bind-debounce")) {
            el.addEventListener("blur", () => this.triggerCycle(el, DEBOUNCE_TRIGGER));
          }
      }
    },
    triggerCycle(el, key, currentCycle) {
      let [cycle, trigger] = this.private(el, key);
      if (!currentCycle) {
        currentCycle = cycle;
      }
      if (currentCycle === cycle) {
        this.incCycle(el, key);
        trigger();
      }
    },
    once(el, key) {
      if (this.private(el, key) === true) {
        return false;
      }
      this.putPrivate(el, key, true);
      return true;
    },
    incCycle(el, key, trigger = function() {
    }) {
      let [currentCycle] = this.private(el, key) || [0, trigger];
      currentCycle++;
      this.putPrivate(el, key, [currentCycle, trigger]);
      return currentCycle;
    },
    discardError(container, el, phxFeedbackFor) {
      let field = el.getAttribute && el.getAttribute(phxFeedbackFor);
      let input = field && container.querySelector(`[id="${field}"], [name="${field}"]`);
      if (!input) {
        return;
      }
      if (!(this.private(input, PHX_HAS_FOCUSED) || this.private(input.form, PHX_HAS_SUBMITTED))) {
        el.classList.add(PHX_NO_FEEDBACK_CLASS);
      }
    },
    showError(inputEl, phxFeedbackFor) {
      if (inputEl.id || inputEl.name) {
        this.all(inputEl.form, `[${phxFeedbackFor}="${inputEl.id}"], [${phxFeedbackFor}="${inputEl.name}"]`, (el) => {
          this.removeClass(el, PHX_NO_FEEDBACK_CLASS);
        });
      }
    },
    isPhxChild(node) {
      return node.getAttribute && node.getAttribute(PHX_PARENT_ID);
    },
    isPhxSticky(node) {
      return node.getAttribute && node.getAttribute(PHX_STICKY) !== null;
    },
    firstPhxChild(el) {
      return this.isPhxChild(el) ? el : this.all(el, `[${PHX_PARENT_ID}]`)[0];
    },
    dispatchEvent(target, name, opts = {}) {
      let bubbles = opts.bubbles === void 0 ? true : !!opts.bubbles;
      let eventOpts = { bubbles, cancelable: true, detail: opts.detail || {} };
      let event = name === "click" ? new MouseEvent("click", eventOpts) : new CustomEvent(name, eventOpts);
      target.dispatchEvent(event);
    },
    cloneNode(node, html) {
      if (typeof html === "undefined") {
        return node.cloneNode(true);
      } else {
        let cloned = node.cloneNode(false);
        cloned.innerHTML = html;
        return cloned;
      }
    },
    mergeAttrs(target, source, opts = {}) {
      let exclude = opts.exclude || [];
      let isIgnored = opts.isIgnored;
      let sourceAttrs = source.attributes;
      for (let i2 = sourceAttrs.length - 1; i2 >= 0; i2--) {
        let name = sourceAttrs[i2].name;
        if (exclude.indexOf(name) < 0) {
          target.setAttribute(name, source.getAttribute(name));
        }
      }
      let targetAttrs = target.attributes;
      for (let i2 = targetAttrs.length - 1; i2 >= 0; i2--) {
        let name = targetAttrs[i2].name;
        if (isIgnored) {
          if (name.startsWith("data-") && !source.hasAttribute(name)) {
            target.removeAttribute(name);
          }
        } else {
          if (!source.hasAttribute(name)) {
            target.removeAttribute(name);
          }
        }
      }
    },
    mergeFocusedInput(target, source) {
      if (!(target instanceof HTMLSelectElement)) {
        DOM.mergeAttrs(target, source, { exclude: ["value"] });
      }
      if (source.readOnly) {
        target.setAttribute("readonly", true);
      } else {
        target.removeAttribute("readonly");
      }
    },
    hasSelectionRange(el) {
      return el.setSelectionRange && (el.type === "text" || el.type === "textarea");
    },
    restoreFocus(focused, selectionStart, selectionEnd) {
      if (!DOM.isTextualInput(focused)) {
        return;
      }
      let wasFocused = focused.matches(":focus");
      if (focused.readOnly) {
        focused.blur();
      }
      if (!wasFocused) {
        focused.focus();
      }
      if (this.hasSelectionRange(focused)) {
        focused.setSelectionRange(selectionStart, selectionEnd);
      }
    },
    isFormInput(el) {
      return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== "button";
    },
    syncAttrsToProps(el) {
      if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {
        el.checked = el.getAttribute("checked") !== null;
      }
    },
    isTextualInput(el) {
      return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;
    },
    isNowTriggerFormExternal(el, phxTriggerExternal) {
      return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;
    },
    syncPendingRef(fromEl, toEl, disableWith) {
      let ref = fromEl.getAttribute(PHX_REF);
      if (ref === null) {
        return true;
      }
      let refSrc = fromEl.getAttribute(PHX_REF_SRC);
      if (DOM.isFormInput(fromEl) || fromEl.getAttribute(disableWith) !== null) {
        if (DOM.isUploadInput(fromEl)) {
          DOM.mergeAttrs(fromEl, toEl, { isIgnored: true });
        }
        DOM.putPrivate(fromEl, PHX_REF, toEl);
        return false;
      } else {
        PHX_EVENT_CLASSES.forEach((className) => {
          fromEl.classList.contains(className) && toEl.classList.add(className);
        });
        toEl.setAttribute(PHX_REF, ref);
        toEl.setAttribute(PHX_REF_SRC, refSrc);
        return true;
      }
    },
    cleanChildNodes(container, phxUpdate) {
      if (DOM.isPhxUpdate(container, phxUpdate, ["append", "prepend"])) {
        let toRemove = [];
        container.childNodes.forEach((childNode) => {
          if (!childNode.id) {
            let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === "";
            if (!isEmptyTextNode) {
              logError(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(childNode.outerHTML || childNode.nodeValue).trim()}"

`);
            }
            toRemove.push(childNode);
          }
        });
        toRemove.forEach((childNode) => childNode.remove());
      }
    },
    replaceRootContainer(container, tagName, attrs) {
      let retainedAttrs = /* @__PURE__ */ new Set(["id", PHX_SESSION, PHX_STATIC, PHX_MAIN, PHX_ROOT_ID]);
      if (container.tagName.toLowerCase() === tagName.toLowerCase()) {
        Array.from(container.attributes).filter((attr) => !retainedAttrs.has(attr.name.toLowerCase())).forEach((attr) => container.removeAttribute(attr.name));
        Object.keys(attrs).filter((name) => !retainedAttrs.has(name.toLowerCase())).forEach((attr) => container.setAttribute(attr, attrs[attr]));
        return container;
      } else {
        let newContainer = document.createElement(tagName);
        Object.keys(attrs).forEach((attr) => newContainer.setAttribute(attr, attrs[attr]));
        retainedAttrs.forEach((attr) => newContainer.setAttribute(attr, container.getAttribute(attr)));
        newContainer.innerHTML = container.innerHTML;
        container.replaceWith(newContainer);
        return newContainer;
      }
    },
    getSticky(el, name, defaultVal) {
      let op = (DOM.private(el, "sticky") || []).find(([existingName]) => name === existingName);
      if (op) {
        let [_name, _op, stashedResult] = op;
        return stashedResult;
      } else {
        return typeof defaultVal === "function" ? defaultVal() : defaultVal;
      }
    },
    deleteSticky(el, name) {
      this.updatePrivate(el, "sticky", [], (ops) => {
        return ops.filter(([existingName, _]) => existingName !== name);
      });
    },
    putSticky(el, name, op) {
      let stashedResult = op(el);
      this.updatePrivate(el, "sticky", [], (ops) => {
        let existingIndex = ops.findIndex(([existingName]) => name === existingName);
        if (existingIndex >= 0) {
          ops[existingIndex] = [name, op, stashedResult];
        } else {
          ops.push([name, op, stashedResult]);
        }
        return ops;
      });
    },
    applyStickyOperations(el) {
      let ops = DOM.private(el, "sticky");
      if (!ops) {
        return;
      }
      ops.forEach(([name, op, _stashed]) => this.putSticky(el, name, op));
    }
  };
  var dom_default = DOM;
  var UploadEntry = class {
    static isActive(fileEl, file) {
      let isNew = file._phxRef === void 0;
      let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return file.size > 0 && (isNew || isActive);
    }
    static isPreflighted(fileEl, file) {
      let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(",");
      let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return isPreflighted && this.isActive(fileEl, file);
    }
    constructor(fileEl, file, view) {
      this.ref = LiveUploader.genFileRef(file);
      this.fileEl = fileEl;
      this.file = file;
      this.view = view;
      this.meta = null;
      this._isCancelled = false;
      this._isDone = false;
      this._progress = 0;
      this._lastProgressSent = -1;
      this._onDone = function() {
      };
      this._onElUpdated = this.onElUpdated.bind(this);
      this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
    }
    metadata() {
      return this.meta;
    }
    progress(progress) {
      this._progress = Math.floor(progress);
      if (this._progress > this._lastProgressSent) {
        if (this._progress >= 100) {
          this._progress = 100;
          this._lastProgressSent = 100;
          this._isDone = true;
          this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {
            LiveUploader.untrackFile(this.fileEl, this.file);
            this._onDone();
          });
        } else {
          this._lastProgressSent = this._progress;
          this.view.pushFileProgress(this.fileEl, this.ref, this._progress);
        }
      }
    }
    cancel() {
      this._isCancelled = true;
      this._isDone = true;
      this._onDone();
    }
    isDone() {
      return this._isDone;
    }
    error(reason = "failed") {
      this.view.pushFileProgress(this.fileEl, this.ref, { error: reason });
      LiveUploader.clearFiles(this.fileEl);
    }
    onDone(callback) {
      this._onDone = () => {
        this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
        callback();
      };
    }
    onElUpdated() {
      let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      if (activeRefs.indexOf(this.ref) === -1) {
        this.cancel();
      }
    }
    toPreflightPayload() {
      return {
        last_modified: this.file.lastModified,
        name: this.file.name,
        size: this.file.size,
        type: this.file.type,
        ref: this.ref
      };
    }
    uploader(uploaders) {
      if (this.meta.uploader) {
        let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);
        return { name: this.meta.uploader, callback };
      } else {
        return { name: "channel", callback: channelUploader };
      }
    }
    zipPostFlight(resp) {
      this.meta = resp.entries[this.ref];
      if (!this.meta) {
        logError(`no preflight upload response returned with ref ${this.ref}`, { input: this.fileEl, response: resp });
      }
    }
  };
  var liveUploaderFileRef = 0;
  var LiveUploader = class {
    static genFileRef(file) {
      let ref = file._phxRef;
      if (ref !== void 0) {
        return ref;
      } else {
        file._phxRef = (liveUploaderFileRef++).toString();
        return file._phxRef;
      }
    }
    static getEntryDataURL(inputEl, ref, callback) {
      let file = this.activeFiles(inputEl).find((file2) => this.genFileRef(file2) === ref);
      callback(URL.createObjectURL(file));
    }
    static hasUploadsInProgress(formEl) {
      let active = 0;
      dom_default.findUploadInputs(formEl).forEach((input) => {
        if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {
          active++;
        }
      });
      return active > 0;
    }
    static serializeUploads(inputEl) {
      let files = this.activeFiles(inputEl);
      let fileData = {};
      files.forEach((file) => {
        let entry = { path: inputEl.name };
        let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);
        fileData[uploadRef] = fileData[uploadRef] || [];
        entry.ref = this.genFileRef(file);
        entry.name = file.name || entry.ref;
        entry.type = file.type;
        entry.size = file.size;
        fileData[uploadRef].push(entry);
      });
      return fileData;
    }
    static clearFiles(inputEl) {
      inputEl.value = null;
      inputEl.removeAttribute(PHX_UPLOAD_REF);
      dom_default.putPrivate(inputEl, "files", []);
    }
    static untrackFile(inputEl, file) {
      dom_default.putPrivate(inputEl, "files", dom_default.private(inputEl, "files").filter((f) => !Object.is(f, file)));
    }
    static trackFiles(inputEl, files) {
      if (inputEl.getAttribute("multiple") !== null) {
        let newFiles = files.filter((file) => !this.activeFiles(inputEl).find((f) => Object.is(f, file)));
        dom_default.putPrivate(inputEl, "files", this.activeFiles(inputEl).concat(newFiles));
        inputEl.value = null;
      } else {
        dom_default.putPrivate(inputEl, "files", files);
      }
    }
    static activeFileInputs(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((el) => el.files && this.activeFiles(el).length > 0);
    }
    static activeFiles(input) {
      return (dom_default.private(input, "files") || []).filter((f) => UploadEntry.isActive(input, f));
    }
    static inputsAwaitingPreflight(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((input) => this.filesAwaitingPreflight(input).length > 0);
    }
    static filesAwaitingPreflight(input) {
      return this.activeFiles(input).filter((f) => !UploadEntry.isPreflighted(input, f));
    }
    constructor(inputEl, view, onComplete) {
      this.view = view;
      this.onComplete = onComplete;
      this._entries = Array.from(LiveUploader.filesAwaitingPreflight(inputEl) || []).map((file) => new UploadEntry(inputEl, file, view));
      this.numEntriesInProgress = this._entries.length;
    }
    entries() {
      return this._entries;
    }
    initAdapterUpload(resp, onError, liveSocket2) {
      this._entries = this._entries.map((entry) => {
        entry.zipPostFlight(resp);
        entry.onDone(() => {
          this.numEntriesInProgress--;
          if (this.numEntriesInProgress === 0) {
            this.onComplete();
          }
        });
        return entry;
      });
      let groupedEntries = this._entries.reduce((acc, entry) => {
        let { name, callback } = entry.uploader(liveSocket2.uploaders);
        acc[name] = acc[name] || { callback, entries: [] };
        acc[name].entries.push(entry);
        return acc;
      }, {});
      for (let name in groupedEntries) {
        let { callback, entries } = groupedEntries[name];
        callback(entries, onError, resp, liveSocket2);
      }
    }
  };
  var Hooks = {
    LiveFileUpload: {
      activeRefs() {
        return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);
      },
      preflightedRefs() {
        return this.el.getAttribute(PHX_PREFLIGHTED_REFS);
      },
      mounted() {
        this.preflightedWas = this.preflightedRefs();
      },
      updated() {
        let newPreflights = this.preflightedRefs();
        if (this.preflightedWas !== newPreflights) {
          this.preflightedWas = newPreflights;
          if (newPreflights === "") {
            this.__view.cancelSubmit(this.el.form);
          }
        }
        if (this.activeRefs() === "") {
          this.el.value = null;
        }
        this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));
      }
    },
    LiveImgPreview: {
      mounted() {
        this.ref = this.el.getAttribute("data-phx-entry-ref");
        this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));
        LiveUploader.getEntryDataURL(this.inputEl, this.ref, (url) => {
          this.url = url;
          this.el.src = url;
        });
      },
      destroyed() {
        URL.revokeObjectURL(this.url);
      }
    }
  };
  var hooks_default = Hooks;
  var DOMPostMorphRestorer = class {
    constructor(containerBefore, containerAfter, updateType) {
      let idsBefore = /* @__PURE__ */ new Set();
      let idsAfter = new Set([...containerAfter.children].map((child) => child.id));
      let elementsToModify = [];
      Array.from(containerBefore.children).forEach((child) => {
        if (child.id) {
          idsBefore.add(child.id);
          if (idsAfter.has(child.id)) {
            let previousElementId = child.previousElementSibling && child.previousElementSibling.id;
            elementsToModify.push({ elementId: child.id, previousElementId });
          }
        }
      });
      this.containerId = containerAfter.id;
      this.updateType = updateType;
      this.elementsToModify = elementsToModify;
      this.elementIdsToAdd = [...idsAfter].filter((id) => !idsBefore.has(id));
    }
    perform() {
      let container = dom_default.byId(this.containerId);
      this.elementsToModify.forEach((elementToModify) => {
        if (elementToModify.previousElementId) {
          maybe(document.getElementById(elementToModify.previousElementId), (previousElem) => {
            maybe(document.getElementById(elementToModify.elementId), (elem) => {
              let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;
              if (!isInRightPlace) {
                previousElem.insertAdjacentElement("afterend", elem);
              }
            });
          });
        } else {
          maybe(document.getElementById(elementToModify.elementId), (elem) => {
            let isInRightPlace = elem.previousElementSibling == null;
            if (!isInRightPlace) {
              container.insertAdjacentElement("afterbegin", elem);
            }
          });
        }
      });
      if (this.updateType == "prepend") {
        this.elementIdsToAdd.reverse().forEach((elemId) => {
          maybe(document.getElementById(elemId), (elem) => container.insertAdjacentElement("afterbegin", elem));
        });
      }
    }
  };
  var DOCUMENT_FRAGMENT_NODE = 11;
  function morphAttrs(fromNode, toNode) {
    var toNodeAttrs = toNode.attributes;
    var attr;
    var attrName;
    var attrNamespaceURI;
    var attrValue;
    var fromValue;
    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {
      return;
    }
    for (var i2 = toNodeAttrs.length - 1; i2 >= 0; i2--) {
      attr = toNodeAttrs[i2];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      attrValue = attr.value;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);
        if (fromValue !== attrValue) {
          if (attr.prefix === "xmlns") {
            attrName = attr.name;
          }
          fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
        }
      } else {
        fromValue = fromNode.getAttribute(attrName);
        if (fromValue !== attrValue) {
          fromNode.setAttribute(attrName, attrValue);
        }
      }
    }
    var fromNodeAttrs = fromNode.attributes;
    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {
      attr = fromNodeAttrs[d];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {
          fromNode.removeAttributeNS(attrNamespaceURI, attrName);
        }
      } else {
        if (!toNode.hasAttribute(attrName)) {
          fromNode.removeAttribute(attrName);
        }
      }
    }
  }
  var range;
  var NS_XHTML = "http://www.w3.org/1999/xhtml";
  var doc = typeof document === "undefined" ? void 0 : document;
  var HAS_TEMPLATE_SUPPORT = !!doc && "content" in doc.createElement("template");
  var HAS_RANGE_SUPPORT = !!doc && doc.createRange && "createContextualFragment" in doc.createRange();
  function createFragmentFromTemplate(str) {
    var template = doc.createElement("template");
    template.innerHTML = str;
    return template.content.childNodes[0];
  }
  function createFragmentFromRange(str) {
    if (!range) {
      range = doc.createRange();
      range.selectNode(doc.body);
    }
    var fragment = range.createContextualFragment(str);
    return fragment.childNodes[0];
  }
  function createFragmentFromWrap(str) {
    var fragment = doc.createElement("body");
    fragment.innerHTML = str;
    return fragment.childNodes[0];
  }
  function toElement(str) {
    str = str.trim();
    if (HAS_TEMPLATE_SUPPORT) {
      return createFragmentFromTemplate(str);
    } else if (HAS_RANGE_SUPPORT) {
      return createFragmentFromRange(str);
    }
    return createFragmentFromWrap(str);
  }
  function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName;
    var toNodeName = toEl.nodeName;
    var fromCodeStart, toCodeStart;
    if (fromNodeName === toNodeName) {
      return true;
    }
    fromCodeStart = fromNodeName.charCodeAt(0);
    toCodeStart = toNodeName.charCodeAt(0);
    if (fromCodeStart <= 90 && toCodeStart >= 97) {
      return fromNodeName === toNodeName.toUpperCase();
    } else if (toCodeStart <= 90 && fromCodeStart >= 97) {
      return toNodeName === fromNodeName.toUpperCase();
    } else {
      return false;
    }
  }
  function createElementNS(name, namespaceURI) {
    return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);
  }
  function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while (curChild) {
      var nextChild = curChild.nextSibling;
      toEl.appendChild(curChild);
      curChild = nextChild;
    }
    return toEl;
  }
  function syncBooleanAttrProp(fromEl, toEl, name) {
    if (fromEl[name] !== toEl[name]) {
      fromEl[name] = toEl[name];
      if (fromEl[name]) {
        fromEl.setAttribute(name, "");
      } else {
        fromEl.removeAttribute(name);
      }
    }
  }
  var specialElHandlers = {
    OPTION: function(fromEl, toEl) {
      var parentNode = fromEl.parentNode;
      if (parentNode) {
        var parentName = parentNode.nodeName.toUpperCase();
        if (parentName === "OPTGROUP") {
          parentNode = parentNode.parentNode;
          parentName = parentNode && parentNode.nodeName.toUpperCase();
        }
        if (parentName === "SELECT" && !parentNode.hasAttribute("multiple")) {
          if (fromEl.hasAttribute("selected") && !toEl.selected) {
            fromEl.setAttribute("selected", "selected");
            fromEl.removeAttribute("selected");
          }
          parentNode.selectedIndex = -1;
        }
      }
      syncBooleanAttrProp(fromEl, toEl, "selected");
    },
    INPUT: function(fromEl, toEl) {
      syncBooleanAttrProp(fromEl, toEl, "checked");
      syncBooleanAttrProp(fromEl, toEl, "disabled");
      if (fromEl.value !== toEl.value) {
        fromEl.value = toEl.value;
      }
      if (!toEl.hasAttribute("value")) {
        fromEl.removeAttribute("value");
      }
    },
    TEXTAREA: function(fromEl, toEl) {
      var newValue = toEl.value;
      if (fromEl.value !== newValue) {
        fromEl.value = newValue;
      }
      var firstChild = fromEl.firstChild;
      if (firstChild) {
        var oldValue = firstChild.nodeValue;
        if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {
          return;
        }
        firstChild.nodeValue = newValue;
      }
    },
    SELECT: function(fromEl, toEl) {
      if (!toEl.hasAttribute("multiple")) {
        var selectedIndex = -1;
        var i2 = 0;
        var curChild = fromEl.firstChild;
        var optgroup;
        var nodeName;
        while (curChild) {
          nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();
          if (nodeName === "OPTGROUP") {
            optgroup = curChild;
            curChild = optgroup.firstChild;
          } else {
            if (nodeName === "OPTION") {
              if (curChild.hasAttribute("selected")) {
                selectedIndex = i2;
                break;
              }
              i2++;
            }
            curChild = curChild.nextSibling;
            if (!curChild && optgroup) {
              curChild = optgroup.nextSibling;
              optgroup = null;
            }
          }
        }
        fromEl.selectedIndex = selectedIndex;
      }
    }
  };
  var ELEMENT_NODE = 1;
  var DOCUMENT_FRAGMENT_NODE$1 = 11;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  function noop() {
  }
  function defaultGetNodeKey(node) {
    if (node) {
      return node.getAttribute && node.getAttribute("id") || node.id;
    }
  }
  function morphdomFactory(morphAttrs2) {
    return function morphdom2(fromNode, toNode, options) {
      if (!options) {
        options = {};
      }
      if (typeof toNode === "string") {
        if (fromNode.nodeName === "#document" || fromNode.nodeName === "HTML" || fromNode.nodeName === "BODY") {
          var toNodeHtml = toNode;
          toNode = doc.createElement("html");
          toNode.innerHTML = toNodeHtml;
        } else {
          toNode = toElement(toNode);
        }
      }
      var getNodeKey = options.getNodeKey || defaultGetNodeKey;
      var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
      var onNodeAdded = options.onNodeAdded || noop;
      var onBeforeElUpdated = options.onBeforeElUpdated || noop;
      var onElUpdated = options.onElUpdated || noop;
      var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
      var onNodeDiscarded = options.onNodeDiscarded || noop;
      var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
      var childrenOnly = options.childrenOnly === true;
      var fromNodesLookup = /* @__PURE__ */ Object.create(null);
      var keyedRemovalList = [];
      function addKeyedRemoval(key) {
        keyedRemovalList.push(key);
      }
      function walkDiscardedChildNodes(node, skipKeyedNodes) {
        if (node.nodeType === ELEMENT_NODE) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = void 0;
            if (skipKeyedNodes && (key = getNodeKey(curChild))) {
              addKeyedRemoval(key);
            } else {
              onNodeDiscarded(curChild);
              if (curChild.firstChild) {
                walkDiscardedChildNodes(curChild, skipKeyedNodes);
              }
            }
            curChild = curChild.nextSibling;
          }
        }
      }
      function removeNode(node, parentNode, skipKeyedNodes) {
        if (onBeforeNodeDiscarded(node) === false) {
          return;
        }
        if (parentNode) {
          parentNode.removeChild(node);
        }
        onNodeDiscarded(node);
        walkDiscardedChildNodes(node, skipKeyedNodes);
      }
      function indexTree(node) {
        if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = getNodeKey(curChild);
            if (key) {
              fromNodesLookup[key] = curChild;
            }
            indexTree(curChild);
            curChild = curChild.nextSibling;
          }
        }
      }
      indexTree(fromNode);
      function handleNodeAdded(el) {
        onNodeAdded(el);
        var curChild = el.firstChild;
        while (curChild) {
          var nextSibling = curChild.nextSibling;
          var key = getNodeKey(curChild);
          if (key) {
            var unmatchedFromEl = fromNodesLookup[key];
            if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
              curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
              morphEl(unmatchedFromEl, curChild);
            } else {
              handleNodeAdded(curChild);
            }
          } else {
            handleNodeAdded(curChild);
          }
          curChild = nextSibling;
        }
      }
      function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {
        while (curFromNodeChild) {
          var fromNextSibling = curFromNodeChild.nextSibling;
          if (curFromNodeKey = getNodeKey(curFromNodeChild)) {
            addKeyedRemoval(curFromNodeKey);
          } else {
            removeNode(curFromNodeChild, fromEl, true);
          }
          curFromNodeChild = fromNextSibling;
        }
      }
      function morphEl(fromEl, toEl, childrenOnly2) {
        var toElKey = getNodeKey(toEl);
        if (toElKey) {
          delete fromNodesLookup[toElKey];
        }
        if (!childrenOnly2) {
          if (onBeforeElUpdated(fromEl, toEl) === false) {
            return;
          }
          morphAttrs2(fromEl, toEl);
          onElUpdated(fromEl);
          if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
            return;
          }
        }
        if (fromEl.nodeName !== "TEXTAREA") {
          morphChildren(fromEl, toEl);
        } else {
          specialElHandlers.TEXTAREA(fromEl, toEl);
        }
      }
      function morphChildren(fromEl, toEl) {
        var curToNodeChild = toEl.firstChild;
        var curFromNodeChild = fromEl.firstChild;
        var curToNodeKey;
        var curFromNodeKey;
        var fromNextSibling;
        var toNextSibling;
        var matchingFromEl;
        outer:
          while (curToNodeChild) {
            toNextSibling = curToNodeChild.nextSibling;
            curToNodeKey = getNodeKey(curToNodeChild);
            while (curFromNodeChild) {
              fromNextSibling = curFromNodeChild.nextSibling;
              if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              curFromNodeKey = getNodeKey(curFromNodeChild);
              var curFromNodeType = curFromNodeChild.nodeType;
              var isCompatible = void 0;
              if (curFromNodeType === curToNodeChild.nodeType) {
                if (curFromNodeType === ELEMENT_NODE) {
                  if (curToNodeKey) {
                    if (curToNodeKey !== curFromNodeKey) {
                      if (matchingFromEl = fromNodesLookup[curToNodeKey]) {
                        if (fromNextSibling === matchingFromEl) {
                          isCompatible = false;
                        } else {
                          fromEl.insertBefore(matchingFromEl, curFromNodeChild);
                          if (curFromNodeKey) {
                            addKeyedRemoval(curFromNodeKey);
                          } else {
                            removeNode(curFromNodeChild, fromEl, true);
                          }
                          curFromNodeChild = matchingFromEl;
                        }
                      } else {
                        isCompatible = false;
                      }
                    }
                  } else if (curFromNodeKey) {
                    isCompatible = false;
                  }
                  isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                  if (isCompatible) {
                    morphEl(curFromNodeChild, curToNodeChild);
                  }
                } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                  isCompatible = true;
                  if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {
                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                  }
                }
              }
              if (isCompatible) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              if (curFromNodeKey) {
                addKeyedRemoval(curFromNodeKey);
              } else {
                removeNode(curFromNodeChild, fromEl, true);
              }
              curFromNodeChild = fromNextSibling;
            }
            if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
              fromEl.appendChild(matchingFromEl);
              morphEl(matchingFromEl, curToNodeChild);
            } else {
              var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
              if (onBeforeNodeAddedResult !== false) {
                if (onBeforeNodeAddedResult) {
                  curToNodeChild = onBeforeNodeAddedResult;
                }
                if (curToNodeChild.actualize) {
                  curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                }
                fromEl.appendChild(curToNodeChild);
                handleNodeAdded(curToNodeChild);
              }
            }
            curToNodeChild = toNextSibling;
            curFromNodeChild = fromNextSibling;
          }
        cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);
        var specialElHandler = specialElHandlers[fromEl.nodeName];
        if (specialElHandler) {
          specialElHandler(fromEl, toEl);
        }
      }
      var morphedNode = fromNode;
      var morphedNodeType = morphedNode.nodeType;
      var toNodeType = toNode.nodeType;
      if (!childrenOnly) {
        if (morphedNodeType === ELEMENT_NODE) {
          if (toNodeType === ELEMENT_NODE) {
            if (!compareNodeNames(fromNode, toNode)) {
              onNodeDiscarded(fromNode);
              morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
            }
          } else {
            morphedNode = toNode;
          }
        } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {
          if (toNodeType === morphedNodeType) {
            if (morphedNode.nodeValue !== toNode.nodeValue) {
              morphedNode.nodeValue = toNode.nodeValue;
            }
            return morphedNode;
          } else {
            morphedNode = toNode;
          }
        }
      }
      if (morphedNode === toNode) {
        onNodeDiscarded(fromNode);
      } else {
        if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {
          return;
        }
        morphEl(morphedNode, toNode, childrenOnly);
        if (keyedRemovalList) {
          for (var i2 = 0, len = keyedRemovalList.length; i2 < len; i2++) {
            var elToRemove = fromNodesLookup[keyedRemovalList[i2]];
            if (elToRemove) {
              removeNode(elToRemove, elToRemove.parentNode, false);
            }
          }
        }
      }
      if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
        if (morphedNode.actualize) {
          morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
        }
        fromNode.parentNode.replaceChild(morphedNode, fromNode);
      }
      return morphedNode;
    };
  }
  var morphdom = morphdomFactory(morphAttrs);
  var morphdom_esm_default = morphdom;
  var DOMPatch = class {
    static patchEl(fromEl, toEl, activeElement) {
      morphdom_esm_default(fromEl, toEl, {
        childrenOnly: false,
        onBeforeElUpdated: (fromEl2, toEl2) => {
          if (activeElement && activeElement.isSameNode(fromEl2) && dom_default.isFormInput(fromEl2)) {
            dom_default.mergeFocusedInput(fromEl2, toEl2);
            return false;
          }
        }
      });
    }
    constructor(view, container, id, html, targetCID) {
      this.view = view;
      this.liveSocket = view.liveSocket;
      this.container = container;
      this.id = id;
      this.rootID = view.root.id;
      this.html = html;
      this.targetCID = targetCID;
      this.cidPatch = isCid(this.targetCID);
      this.callbacks = {
        beforeadded: [],
        beforeupdated: [],
        beforephxChildAdded: [],
        afteradded: [],
        afterupdated: [],
        afterdiscarded: [],
        afterphxChildAdded: [],
        aftertransitionsDiscarded: []
      };
    }
    before(kind, callback) {
      this.callbacks[`before${kind}`].push(callback);
    }
    after(kind, callback) {
      this.callbacks[`after${kind}`].push(callback);
    }
    trackBefore(kind, ...args) {
      this.callbacks[`before${kind}`].forEach((callback) => callback(...args));
    }
    trackAfter(kind, ...args) {
      this.callbacks[`after${kind}`].forEach((callback) => callback(...args));
    }
    markPrunableContentForRemoval() {
      dom_default.all(this.container, "[phx-update=append] > *, [phx-update=prepend] > *", (el) => {
        el.setAttribute(PHX_PRUNE, "");
      });
    }
    perform() {
      let { view, liveSocket: liveSocket2, container, html } = this;
      let targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html) : container;
      if (this.isCIDPatch() && !targetContainer) {
        return;
      }
      let focused = liveSocket2.getActiveElement();
      let { selectionStart, selectionEnd } = focused && dom_default.hasSelectionRange(focused) ? focused : {};
      let phxUpdate = liveSocket2.binding(PHX_UPDATE);
      let phxFeedbackFor = liveSocket2.binding(PHX_FEEDBACK_FOR);
      let disableWith = liveSocket2.binding(PHX_DISABLE_WITH);
      let phxTriggerExternal = liveSocket2.binding(PHX_TRIGGER_ACTION);
      let phxRemove = liveSocket2.binding("remove");
      let added = [];
      let updates = [];
      let appendPrependUpdates = [];
      let pendingRemoves = [];
      let externalFormTriggered = null;
      let diffHTML = liveSocket2.time("premorph container prep", () => {
        return this.buildDiffHTML(container, html, phxUpdate, targetContainer);
      });
      this.trackBefore("added", container);
      this.trackBefore("updated", container, container);
      liveSocket2.time("morphdom", () => {
        morphdom_esm_default(targetContainer, diffHTML, {
          childrenOnly: targetContainer.getAttribute(PHX_COMPONENT) === null,
          getNodeKey: (node) => {
            return dom_default.isPhxDestroyed(node) ? null : node.id;
          },
          onBeforeNodeAdded: (el) => {
            this.trackBefore("added", el);
            return el;
          },
          onNodeAdded: (el) => {
            if (el instanceof HTMLImageElement && el.srcset) {
              el.srcset = el.srcset;
            } else if (el instanceof HTMLVideoElement && el.autoplay) {
              el.play();
            }
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            dom_default.discardError(targetContainer, el, phxFeedbackFor);
            if (dom_default.isPhxChild(el) && view.ownsElement(el) || dom_default.isPhxSticky(el) && view.ownsElement(el.parentNode)) {
              this.trackAfter("phxChildAdded", el);
            }
            added.push(el);
          },
          onNodeDiscarded: (el) => {
            if (dom_default.isPhxChild(el) || dom_default.isPhxSticky(el)) {
              liveSocket2.destroyViewByEl(el);
            }
            this.trackAfter("discarded", el);
          },
          onBeforeNodeDiscarded: (el) => {
            if (el.getAttribute && el.getAttribute(PHX_PRUNE) !== null) {
              return true;
            }
            if (el.parentNode !== null && dom_default.isPhxUpdate(el.parentNode, phxUpdate, ["append", "prepend"]) && el.id) {
              return false;
            }
            if (el.getAttribute && el.getAttribute(phxRemove)) {
              pendingRemoves.push(el);
              return false;
            }
            if (this.skipCIDSibling(el)) {
              return false;
            }
            return true;
          },
          onElUpdated: (el) => {
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            updates.push(el);
          },
          onBeforeElUpdated: (fromEl, toEl) => {
            dom_default.cleanChildNodes(toEl, phxUpdate);
            if (this.skipCIDSibling(toEl)) {
              return false;
            }
            if (dom_default.isPhxSticky(fromEl)) {
              return false;
            }
            if (dom_default.isIgnored(fromEl, phxUpdate)) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeAttrs(fromEl, toEl, { isIgnored: true });
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (fromEl.type === "number" && (fromEl.validity && fromEl.validity.badInput)) {
              return false;
            }
            if (!dom_default.syncPendingRef(fromEl, toEl, disableWith)) {
              if (dom_default.isUploadInput(fromEl)) {
                this.trackBefore("updated", fromEl, toEl);
                updates.push(fromEl);
              }
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (dom_default.isPhxChild(toEl)) {
              let prevSession = fromEl.getAttribute(PHX_SESSION);
              dom_default.mergeAttrs(fromEl, toEl, { exclude: [PHX_STATIC] });
              if (prevSession !== "") {
                fromEl.setAttribute(PHX_SESSION, prevSession);
              }
              fromEl.setAttribute(PHX_ROOT_ID, this.rootID);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            dom_default.copyPrivates(toEl, fromEl);
            dom_default.discardError(targetContainer, toEl, phxFeedbackFor);
            let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);
            if (isFocusedFormEl) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeFocusedInput(fromEl, toEl);
              dom_default.syncAttrsToProps(fromEl);
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            } else {
              if (dom_default.isPhxUpdate(toEl, phxUpdate, ["append", "prepend"])) {
                appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));
              }
              dom_default.syncAttrsToProps(toEl);
              dom_default.applyStickyOperations(toEl);
              this.trackBefore("updated", fromEl, toEl);
              return true;
            }
          }
        });
      });
      if (liveSocket2.isDebugEnabled()) {
        detectDuplicateIds();
      }
      if (appendPrependUpdates.length > 0) {
        liveSocket2.time("post-morph append/prepend restoration", () => {
          appendPrependUpdates.forEach((update) => update.perform());
        });
      }
      liveSocket2.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));
      dom_default.dispatchEvent(document, "phx:update");
      added.forEach((el) => this.trackAfter("added", el));
      updates.forEach((el) => this.trackAfter("updated", el));
      if (pendingRemoves.length > 0) {
        liveSocket2.transitionRemoves(pendingRemoves);
        liveSocket2.requestDOMUpdate(() => {
          pendingRemoves.forEach((el) => {
            let child = dom_default.firstPhxChild(el);
            if (child) {
              liveSocket2.destroyViewByEl(child);
            }
            el.remove();
          });
          this.trackAfter("transitionsDiscarded", pendingRemoves);
        });
      }
      if (externalFormTriggered) {
        liveSocket2.disconnect();
        externalFormTriggered.submit();
      }
      return true;
    }
    isCIDPatch() {
      return this.cidPatch;
    }
    skipCIDSibling(el) {
      return el.nodeType === Node.ELEMENT_NODE && el.getAttribute(PHX_SKIP) !== null;
    }
    targetCIDContainer(html) {
      if (!this.isCIDPatch()) {
        return;
      }
      let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);
      if (rest.length === 0 && dom_default.childNodeLength(html) === 1) {
        return first;
      } else {
        return first && first.parentNode;
      }
    }
    buildDiffHTML(container, html, phxUpdate, targetContainer) {
      let isCIDPatch = this.isCIDPatch();
      let isCIDWithSingleRoot = isCIDPatch && targetContainer.getAttribute(PHX_COMPONENT) === this.targetCID.toString();
      if (!isCIDPatch || isCIDWithSingleRoot) {
        return html;
      } else {
        let diffContainer = null;
        let template = document.createElement("template");
        diffContainer = dom_default.cloneNode(targetContainer);
        let [firstComponent, ...rest] = dom_default.findComponentNodeList(diffContainer, this.targetCID);
        template.innerHTML = html;
        rest.forEach((el) => el.remove());
        Array.from(diffContainer.childNodes).forEach((child) => {
          if (child.id && child.nodeType === Node.ELEMENT_NODE && child.getAttribute(PHX_COMPONENT) !== this.targetCID.toString()) {
            child.setAttribute(PHX_SKIP, "");
            child.innerHTML = "";
          }
        });
        Array.from(template.content.childNodes).forEach((el) => diffContainer.insertBefore(el, firstComponent));
        firstComponent.remove();
        return diffContainer.outerHTML;
      }
    }
  };
  var Rendered = class {
    static extract(diff) {
      let { [REPLY]: reply, [EVENTS]: events, [TITLE]: title } = diff;
      delete diff[REPLY];
      delete diff[EVENTS];
      delete diff[TITLE];
      return { diff, title, reply: reply || null, events: events || [] };
    }
    constructor(viewId, rendered) {
      this.viewId = viewId;
      this.rendered = {};
      this.mergeDiff(rendered);
    }
    parentViewId() {
      return this.viewId;
    }
    toString(onlyCids) {
      return this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids);
    }
    recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids) {
      onlyCids = onlyCids ? new Set(onlyCids) : null;
      let output = { buffer: "", components, onlyCids };
      this.toOutputBuffer(rendered, null, output);
      return output.buffer;
    }
    componentCIDs(diff) {
      return Object.keys(diff[COMPONENTS] || {}).map((i2) => parseInt(i2));
    }
    isComponentOnlyDiff(diff) {
      if (!diff[COMPONENTS]) {
        return false;
      }
      return Object.keys(diff).length === 1;
    }
    getComponent(diff, cid) {
      return diff[COMPONENTS][cid];
    }
    mergeDiff(diff) {
      let newc = diff[COMPONENTS];
      let cache = {};
      delete diff[COMPONENTS];
      this.rendered = this.mutableMerge(this.rendered, diff);
      this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};
      if (newc) {
        let oldc = this.rendered[COMPONENTS];
        for (let cid in newc) {
          newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);
        }
        for (let cid in newc) {
          oldc[cid] = newc[cid];
        }
        diff[COMPONENTS] = newc;
      }
    }
    cachedFindComponent(cid, cdiff, oldc, newc, cache) {
      if (cache[cid]) {
        return cache[cid];
      } else {
        let ndiff, stat, scid = cdiff[STATIC];
        if (isCid(scid)) {
          let tdiff;
          if (scid > 0) {
            tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);
          } else {
            tdiff = oldc[-scid];
          }
          stat = tdiff[STATIC];
          ndiff = this.cloneMerge(tdiff, cdiff);
          ndiff[STATIC] = stat;
        } else {
          ndiff = cdiff[STATIC] !== void 0 ? cdiff : this.cloneMerge(oldc[cid] || {}, cdiff);
        }
        cache[cid] = ndiff;
        return ndiff;
      }
    }
    mutableMerge(target, source) {
      if (source[STATIC] !== void 0) {
        return source;
      } else {
        this.doMutableMerge(target, source);
        return target;
      }
    }
    doMutableMerge(target, source) {
      for (let key in source) {
        let val = source[key];
        let targetVal = target[key];
        if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {
          this.doMutableMerge(targetVal, val);
        } else {
          target[key] = val;
        }
      }
    }
    cloneMerge(target, source) {
      let merged = __spreadValues(__spreadValues({}, target), source);
      for (let key in merged) {
        let val = source[key];
        let targetVal = target[key];
        if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {
          merged[key] = this.cloneMerge(targetVal, val);
        }
      }
      return merged;
    }
    componentToString(cid) {
      return this.recursiveCIDToString(this.rendered[COMPONENTS], cid);
    }
    pruneCIDs(cids) {
      cids.forEach((cid) => delete this.rendered[COMPONENTS][cid]);
    }
    get() {
      return this.rendered;
    }
    isNewFingerprint(diff = {}) {
      return !!diff[STATIC];
    }
    templateStatic(part, templates) {
      if (typeof part === "number") {
        return templates[part];
      } else {
        return part;
      }
    }
    toOutputBuffer(rendered, templates, output) {
      if (rendered[DYNAMICS]) {
        return this.comprehensionToBuffer(rendered, templates, output);
      }
      let { [STATIC]: statics } = rendered;
      statics = this.templateStatic(statics, templates);
      output.buffer += statics[0];
      for (let i2 = 1; i2 < statics.length; i2++) {
        this.dynamicToBuffer(rendered[i2 - 1], templates, output);
        output.buffer += statics[i2];
      }
    }
    comprehensionToBuffer(rendered, templates, output) {
      let { [DYNAMICS]: dynamics, [STATIC]: statics } = rendered;
      statics = this.templateStatic(statics, templates);
      let compTemplates = templates || rendered[TEMPLATES];
      for (let d = 0; d < dynamics.length; d++) {
        let dynamic = dynamics[d];
        output.buffer += statics[0];
        for (let i2 = 1; i2 < statics.length; i2++) {
          this.dynamicToBuffer(dynamic[i2 - 1], compTemplates, output);
          output.buffer += statics[i2];
        }
      }
    }
    dynamicToBuffer(rendered, templates, output) {
      if (typeof rendered === "number") {
        output.buffer += this.recursiveCIDToString(output.components, rendered, output.onlyCids);
      } else if (isObject(rendered)) {
        this.toOutputBuffer(rendered, templates, output);
      } else {
        output.buffer += rendered;
      }
    }
    recursiveCIDToString(components, cid, onlyCids) {
      let component = components[cid] || logError(`no component for CID ${cid}`, components);
      let template = document.createElement("template");
      template.innerHTML = this.recursiveToString(component, components, onlyCids);
      let container = template.content;
      let skip = onlyCids && !onlyCids.has(cid);
      let [hasChildNodes, hasChildComponents] = Array.from(container.childNodes).reduce(([hasNodes, hasComponents], child, i2) => {
        if (child.nodeType === Node.ELEMENT_NODE) {
          if (child.getAttribute(PHX_COMPONENT)) {
            return [hasNodes, true];
          }
          child.setAttribute(PHX_COMPONENT, cid);
          if (!child.id) {
            child.id = `${this.parentViewId()}-${cid}-${i2}`;
          }
          if (skip) {
            child.setAttribute(PHX_SKIP, "");
            child.innerHTML = "";
          }
          return [true, hasComponents];
        } else {
          if (child.nodeValue.trim() !== "") {
            logError(`only HTML element tags are allowed at the root of components.

got: "${child.nodeValue.trim()}"

within:
`, template.innerHTML.trim());
            child.replaceWith(this.createSpan(child.nodeValue, cid));
            return [true, hasComponents];
          } else {
            child.remove();
            return [hasNodes, hasComponents];
          }
        }
      }, [false, false]);
      if (!hasChildNodes && !hasChildComponents) {
        logError("expected at least one HTML element tag inside a component, but the component is empty:\n", template.innerHTML.trim());
        return this.createSpan("", cid).outerHTML;
      } else if (!hasChildNodes && hasChildComponents) {
        logError("expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.", template.innerHTML.trim());
        return template.innerHTML;
      } else {
        return template.innerHTML;
      }
    }
    createSpan(text, cid) {
      let span = document.createElement("span");
      span.innerText = text;
      span.setAttribute(PHX_COMPONENT, cid);
      return span;
    }
  };
  var viewHookID = 1;
  var ViewHook = class {
    static makeID() {
      return viewHookID++;
    }
    static elementID(el) {
      return el.phxHookId;
    }
    constructor(view, el, callbacks) {
      this.__view = view;
      this.liveSocket = view.liveSocket;
      this.__callbacks = callbacks;
      this.__listeners = /* @__PURE__ */ new Set();
      this.__isDisconnected = false;
      this.el = el;
      this.el.phxHookId = this.constructor.makeID();
      for (let key in this.__callbacks) {
        this[key] = this.__callbacks[key];
      }
    }
    __mounted() {
      this.mounted && this.mounted();
    }
    __updated() {
      this.updated && this.updated();
    }
    __beforeUpdate() {
      this.beforeUpdate && this.beforeUpdate();
    }
    __destroyed() {
      this.destroyed && this.destroyed();
    }
    __reconnected() {
      if (this.__isDisconnected) {
        this.__isDisconnected = false;
        this.reconnected && this.reconnected();
      }
    }
    __disconnected() {
      this.__isDisconnected = true;
      this.disconnected && this.disconnected();
    }
    pushEvent(event, payload = {}, onReply = function() {
    }) {
      return this.__view.pushHookEvent(null, event, payload, onReply);
    }
    pushEventTo(phxTarget, event, payload = {}, onReply = function() {
    }) {
      return this.__view.withinTargets(phxTarget, (view, targetCtx) => {
        return view.pushHookEvent(targetCtx, event, payload, onReply);
      });
    }
    handleEvent(event, callback) {
      let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);
      window.addEventListener(`phx:${event}`, callbackRef);
      this.__listeners.add(callbackRef);
      return callbackRef;
    }
    removeHandleEvent(callbackRef) {
      let event = callbackRef(null, true);
      window.removeEventListener(`phx:${event}`, callbackRef);
      this.__listeners.delete(callbackRef);
    }
    upload(name, files) {
      return this.__view.dispatchUploads(name, files);
    }
    uploadTo(phxTarget, name, files) {
      return this.__view.withinTargets(phxTarget, (view) => view.dispatchUploads(name, files));
    }
    __cleanup__() {
      this.__listeners.forEach((callbackRef) => this.removeHandleEvent(callbackRef));
    }
  };
  var JS = {
    exec(eventType, phxEvent, view, sourceEl, defaults) {
      let [defaultKind, defaultArgs] = defaults || [null, {}];
      let commands = phxEvent.charAt(0) === "[" ? JSON.parse(phxEvent) : [[defaultKind, defaultArgs]];
      commands.forEach(([kind, args]) => {
        if (kind === defaultKind && defaultArgs.data) {
          args.data = Object.assign(args.data || {}, defaultArgs.data);
        }
        this.filterToEls(sourceEl, args).forEach((el) => {
          this[`exec_${kind}`](eventType, phxEvent, view, sourceEl, el, args);
        });
      });
    },
    isVisible(el) {
      return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length > 0);
    },
    exec_dispatch(eventType, phxEvent, view, sourceEl, el, { to, event, detail, bubbles }) {
      detail = detail || {};
      detail.dispatcher = sourceEl;
      dom_default.dispatchEvent(el, event, { detail, bubbles });
    },
    exec_push(eventType, phxEvent, view, sourceEl, el, args) {
      if (!view.isConnected()) {
        return;
      }
      let { event, data, target, page_loading, loading, value, dispatcher } = args;
      let pushOpts = { loading, value, target, page_loading: !!page_loading };
      let targetSrc = eventType === "change" && dispatcher ? dispatcher : sourceEl;
      let phxTarget = target || targetSrc.getAttribute(view.binding("target")) || targetSrc;
      view.withinTargets(phxTarget, (targetView, targetCtx) => {
        if (eventType === "change") {
          let { newCid, _target, callback } = args;
          _target = _target || (sourceEl instanceof HTMLInputElement ? sourceEl.name : void 0);
          if (_target) {
            pushOpts._target = _target;
          }
          targetView.pushInput(sourceEl, targetCtx, newCid, event || phxEvent, pushOpts, callback);
        } else if (eventType === "submit") {
          targetView.submitForm(sourceEl, targetCtx, event || phxEvent, pushOpts);
        } else {
          targetView.pushEvent(eventType, sourceEl, targetCtx, event || phxEvent, data, pushOpts);
        }
      });
    },
    exec_add_class(eventType, phxEvent, view, sourceEl, el, { names, transition, time }) {
      this.addOrRemoveClasses(el, names, [], transition, time, view);
    },
    exec_remove_class(eventType, phxEvent, view, sourceEl, el, { names, transition, time }) {
      this.addOrRemoveClasses(el, [], names, transition, time, view);
    },
    exec_transition(eventType, phxEvent, view, sourceEl, el, { time, transition }) {
      let [transition_start, running, transition_end] = transition;
      let onStart = () => this.addOrRemoveClasses(el, transition_start.concat(running), []);
      let onDone = () => this.addOrRemoveClasses(el, transition_end, transition_start.concat(running));
      view.transition(time, onStart, onDone);
    },
    exec_toggle(eventType, phxEvent, view, sourceEl, el, { display, ins, outs, time }) {
      this.toggle(eventType, view, el, display, ins, outs, time);
    },
    exec_show(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.show(eventType, view, el, display, transition, time);
    },
    exec_hide(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.hide(eventType, view, el, display, transition, time);
    },
    exec_set_attr(eventType, phxEvent, view, sourceEl, el, { attr: [attr, val] }) {
      this.setOrRemoveAttrs(el, [[attr, val]], []);
    },
    exec_remove_attr(eventType, phxEvent, view, sourceEl, el, { attr }) {
      this.setOrRemoveAttrs(el, [], [attr]);
    },
    show(eventType, view, el, display, transition, time) {
      if (!this.isVisible(el)) {
        this.toggle(eventType, view, el, display, transition, null, time);
      }
    },
    hide(eventType, view, el, display, transition, time) {
      if (this.isVisible(el)) {
        this.toggle(eventType, view, el, display, null, transition, time);
      }
    },
    toggle(eventType, view, el, display, ins, outs, time) {
      let [inClasses, inStartClasses, inEndClasses] = ins || [[], [], []];
      let [outClasses, outStartClasses, outEndClasses] = outs || [[], [], []];
      if (inClasses.length > 0 || outClasses.length > 0) {
        if (this.isVisible(el)) {
          let onStart = () => {
            this.addOrRemoveClasses(el, outStartClasses, inClasses.concat(inStartClasses).concat(inEndClasses));
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, outClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, outEndClasses, outStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:hide-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], outClasses.concat(outEndClasses));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          if (eventType === "remove") {
            return;
          }
          let onStart = () => {
            this.addOrRemoveClasses(el, inStartClasses, outClasses.concat(outStartClasses).concat(outEndClasses));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = display || "block");
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, inClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, inEndClasses, inStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:show-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], inClasses.concat(inEndClasses));
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      } else {
        if (this.isVisible(el)) {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:hide-start"));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:show-start"));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = display || "block");
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      }
    },
    addOrRemoveClasses(el, adds, removes, transition, time, view) {
      let [transition_run, transition_start, transition_end] = transition || [[], [], []];
      if (transition_run.length > 0) {
        let onStart = () => this.addOrRemoveClasses(el, transition_start.concat(transition_run), []);
        let onDone = () => this.addOrRemoveClasses(el, adds.concat(transition_end), removes.concat(transition_run).concat(transition_start));
        return view.transition(time, onStart, onDone);
      }
      window.requestAnimationFrame(() => {
        let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [[], []]);
        let keepAdds = adds.filter((name) => prevAdds.indexOf(name) < 0 && !el.classList.contains(name));
        let keepRemoves = removes.filter((name) => prevRemoves.indexOf(name) < 0 && el.classList.contains(name));
        let newAdds = prevAdds.filter((name) => removes.indexOf(name) < 0).concat(keepAdds);
        let newRemoves = prevRemoves.filter((name) => adds.indexOf(name) < 0).concat(keepRemoves);
        dom_default.putSticky(el, "classes", (currentEl) => {
          currentEl.classList.remove(...newRemoves);
          currentEl.classList.add(...newAdds);
          return [newAdds, newRemoves];
        });
      });
    },
    setOrRemoveAttrs(el, sets, removes) {
      let [prevSets, prevRemoves] = dom_default.getSticky(el, "attrs", [[], []]);
      let alteredAttrs = sets.map(([attr, _val]) => attr).concat(removes);
      let newSets = prevSets.filter(([attr, _val]) => !alteredAttrs.includes(attr)).concat(sets);
      let newRemoves = prevRemoves.filter((attr) => !alteredAttrs.includes(attr)).concat(removes);
      dom_default.putSticky(el, "attrs", (currentEl) => {
        newRemoves.forEach((attr) => currentEl.removeAttribute(attr));
        newSets.forEach(([attr, val]) => currentEl.setAttribute(attr, val));
        return [newSets, newRemoves];
      });
    },
    hasAllClasses(el, classes) {
      return classes.every((name) => el.classList.contains(name));
    },
    isToggledOut(el, outClasses) {
      return !this.isVisible(el) || this.hasAllClasses(el, outClasses);
    },
    filterToEls(sourceEl, { to }) {
      return to ? dom_default.all(document, to) : [sourceEl];
    }
  };
  var js_default = JS;
  var serializeForm = (form, meta, onlyNames = []) => {
    let formData = new FormData(form);
    let toRemove = [];
    formData.forEach((val, key, _index) => {
      if (val instanceof File) {
        toRemove.push(key);
      }
    });
    toRemove.forEach((key) => formData.delete(key));
    let params = new URLSearchParams();
    for (let [key, val] of formData.entries()) {
      if (onlyNames.length === 0 || onlyNames.indexOf(key) >= 0) {
        params.append(key, val);
      }
    }
    for (let metaKey in meta) {
      params.append(metaKey, meta[metaKey]);
    }
    return params.toString();
  };
  var View = class {
    constructor(el, liveSocket2, parentView, flash) {
      this.liveSocket = liveSocket2;
      this.flash = flash;
      this.parent = parentView;
      this.root = parentView ? parentView.root : this;
      this.el = el;
      this.id = this.el.id;
      this.ref = 0;
      this.childJoins = 0;
      this.loaderTimer = null;
      this.pendingDiffs = [];
      this.pruningCIDs = [];
      this.redirect = false;
      this.href = null;
      this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;
      this.joinPending = true;
      this.destroyed = false;
      this.joinCallback = function(onDone) {
        onDone && onDone();
      };
      this.stopCallback = function() {
      };
      this.pendingJoinOps = this.parent ? null : [];
      this.viewHooks = {};
      this.uploaders = {};
      this.formSubmits = [];
      this.children = this.parent ? null : {};
      this.root.children[this.id] = {};
      this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {
        return {
          redirect: this.redirect ? this.href : void 0,
          url: this.redirect ? void 0 : this.href || void 0,
          params: this.connectParams(),
          session: this.getSession(),
          static: this.getStatic(),
          flash: this.flash
        };
      });
      this.showLoader(this.liveSocket.loaderTimeout);
      this.bindChannel();
    }
    setHref(href) {
      this.href = href;
    }
    setRedirect(href) {
      this.redirect = true;
      this.href = href;
    }
    isMain() {
      return this.el.hasAttribute(PHX_MAIN);
    }
    connectParams() {
      let params = this.liveSocket.params(this.el);
      let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map((node) => node.src || node.href).filter((url) => typeof url === "string");
      if (manifest.length > 0) {
        params["_track_static"] = manifest;
      }
      params["_mounts"] = this.joinCount;
      return params;
    }
    isConnected() {
      return this.channel.canPush();
    }
    getSession() {
      return this.el.getAttribute(PHX_SESSION);
    }
    getStatic() {
      let val = this.el.getAttribute(PHX_STATIC);
      return val === "" ? null : val;
    }
    destroy(callback = function() {
    }) {
      this.destroyAllChildren();
      this.destroyed = true;
      delete this.root.children[this.id];
      if (this.parent) {
        delete this.root.children[this.parent.id][this.id];
      }
      clearTimeout(this.loaderTimer);
      let onFinished = () => {
        callback();
        for (let id in this.viewHooks) {
          this.destroyHook(this.viewHooks[id]);
        }
      };
      dom_default.markPhxChildDestroyed(this.el);
      this.log("destroyed", () => ["the child has been removed from the parent"]);
      this.channel.leave().receive("ok", onFinished).receive("error", onFinished).receive("timeout", onFinished);
    }
    setContainerClasses(...classes) {
      this.el.classList.remove(PHX_CONNECTED_CLASS, PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);
      this.el.classList.add(...classes);
    }
    showLoader(timeout) {
      clearTimeout(this.loaderTimer);
      if (timeout) {
        this.loaderTimer = setTimeout(() => this.showLoader(), timeout);
      } else {
        for (let id in this.viewHooks) {
          this.viewHooks[id].__disconnected();
        }
        this.setContainerClasses(PHX_DISCONNECTED_CLASS);
      }
    }
    hideLoader() {
      clearTimeout(this.loaderTimer);
      this.setContainerClasses(PHX_CONNECTED_CLASS);
    }
    triggerReconnected() {
      for (let id in this.viewHooks) {
        this.viewHooks[id].__reconnected();
      }
    }
    log(kind, msgCallback) {
      this.liveSocket.log(this, kind, msgCallback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.liveSocket.transition(time, onStart, onDone);
    }
    withinTargets(phxTarget, callback) {
      if (phxTarget instanceof HTMLElement || phxTarget instanceof SVGElement) {
        return this.liveSocket.owner(phxTarget, (view) => callback(view, phxTarget));
      }
      if (isCid(phxTarget)) {
        let targets = dom_default.findComponentNodeList(this.el, phxTarget);
        if (targets.length === 0) {
          logError(`no component found matching phx-target of ${phxTarget}`);
        } else {
          callback(this, parseInt(phxTarget));
        }
      } else {
        let targets = Array.from(document.querySelectorAll(phxTarget));
        if (targets.length === 0) {
          logError(`nothing found matching the phx-target selector "${phxTarget}"`);
        }
        targets.forEach((target) => this.liveSocket.owner(target, (view) => callback(view, target)));
      }
    }
    applyDiff(type, rawDiff, callback) {
      this.log(type, () => ["", clone(rawDiff)]);
      let { diff, reply, events, title } = Rendered.extract(rawDiff);
      if (title) {
        dom_default.putTitle(title);
      }
      callback({ diff, reply, events });
      return reply;
    }
    onJoin(resp) {
      let { rendered, container } = resp;
      if (container) {
        let [tag, attrs] = container;
        this.el = dom_default.replaceRootContainer(this.el, tag, attrs);
      }
      this.childJoins = 0;
      this.joinPending = true;
      this.flash = null;
      browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);
      this.applyDiff("mount", rendered, ({ diff, events }) => {
        this.rendered = new Rendered(this.id, diff);
        let html = this.renderContainer(null, "join");
        this.dropPendingRefs();
        let forms = this.formsForRecovery(html);
        this.joinCount++;
        if (forms.length > 0) {
          forms.forEach(([form, newForm, newCid], i2) => {
            this.pushFormRecovery(form, newCid, (resp2) => {
              if (i2 === forms.length - 1) {
                this.onJoinComplete(resp2, html, events);
              }
            });
          });
        } else {
          this.onJoinComplete(resp, html, events);
        }
      });
    }
    dropPendingRefs() {
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}]`, (el) => {
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
      });
    }
    onJoinComplete({ live_patch }, html, events) {
      if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {
        return this.applyJoinPatch(live_patch, html, events);
      }
      let newChildren = dom_default.findPhxChildrenInFragment(html, this.id).filter((toEl) => {
        let fromEl = toEl.id && this.el.querySelector(`[id="${toEl.id}"]`);
        let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);
        if (phxStatic) {
          toEl.setAttribute(PHX_STATIC, phxStatic);
        }
        return this.joinChild(toEl);
      });
      if (newChildren.length === 0) {
        if (this.parent) {
          this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, events)]);
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
          this.applyJoinPatch(live_patch, html, events);
        }
      } else {
        this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, events)]);
      }
    }
    attachTrueDocEl() {
      this.el = dom_default.byId(this.id);
      this.el.setAttribute(PHX_ROOT_ID, this.root.id);
    }
    applyJoinPatch(live_patch, html, events) {
      this.attachTrueDocEl();
      let patch = new DOMPatch(this, this.el, this.id, html, null);
      patch.markPrunableContentForRemoval();
      this.performPatch(patch, false);
      this.joinNewChildren();
      dom_default.all(this.el, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, (hookEl) => {
        let hook = this.addHook(hookEl);
        if (hook) {
          hook.__mounted();
        }
      });
      this.joinPending = false;
      this.liveSocket.dispatchEvents(events);
      this.applyPendingUpdates();
      if (live_patch) {
        let { kind, to } = live_patch;
        this.liveSocket.historyPatch(to, kind);
      }
      this.hideLoader();
      if (this.joinCount > 1) {
        this.triggerReconnected();
      }
      this.stopCallback();
    }
    triggerBeforeUpdateHook(fromEl, toEl) {
      this.liveSocket.triggerDOM("onBeforeElUpdated", [fromEl, toEl]);
      let hook = this.getHook(fromEl);
      let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));
      if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {
        hook.__beforeUpdate();
        return hook;
      }
    }
    performPatch(patch, pruneCids) {
      let removedEls = [];
      let phxChildrenAdded = false;
      let updatedHookIds = /* @__PURE__ */ new Set();
      patch.after("added", (el) => {
        this.liveSocket.triggerDOM("onNodeAdded", [el]);
        let newHook = this.addHook(el);
        if (newHook) {
          newHook.__mounted();
        }
      });
      patch.after("phxChildAdded", (el) => {
        if (dom_default.isPhxSticky(el)) {
          this.liveSocket.joinRootViews();
        } else {
          phxChildrenAdded = true;
        }
      });
      patch.before("updated", (fromEl, toEl) => {
        let hook = this.triggerBeforeUpdateHook(fromEl, toEl);
        if (hook) {
          updatedHookIds.add(fromEl.id);
        }
      });
      patch.after("updated", (el) => {
        if (updatedHookIds.has(el.id)) {
          this.getHook(el).__updated();
        }
      });
      patch.after("discarded", (el) => {
        if (el.nodeType === Node.ELEMENT_NODE) {
          removedEls.push(el);
        }
      });
      patch.after("transitionsDiscarded", (els) => this.afterElementsRemoved(els, pruneCids));
      patch.perform();
      this.afterElementsRemoved(removedEls, pruneCids);
      return phxChildrenAdded;
    }
    afterElementsRemoved(elements, pruneCids) {
      let destroyedCIDs = [];
      elements.forEach((parent) => {
        let components = dom_default.all(parent, `[${PHX_COMPONENT}]`);
        let hooks = dom_default.all(parent, `[${this.binding(PHX_HOOK)}]`);
        components.concat(parent).forEach((el) => {
          let cid = this.componentID(el);
          if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {
            destroyedCIDs.push(cid);
          }
        });
        hooks.concat(parent).forEach((hookEl) => {
          let hook = this.getHook(hookEl);
          hook && this.destroyHook(hook);
        });
      });
      if (pruneCids) {
        this.maybePushComponentsDestroyed(destroyedCIDs);
      }
    }
    joinNewChildren() {
      dom_default.findPhxChildren(this.el, this.id).forEach((el) => this.joinChild(el));
    }
    getChildById(id) {
      return this.root.children[this.id][id];
    }
    getDescendentByEl(el) {
      if (el.id === this.id) {
        return this;
      } else {
        return this.children[el.getAttribute(PHX_PARENT_ID)][el.id];
      }
    }
    destroyDescendent(id) {
      for (let parentId in this.root.children) {
        for (let childId in this.root.children[parentId]) {
          if (childId === id) {
            return this.root.children[parentId][childId].destroy();
          }
        }
      }
    }
    joinChild(el) {
      let child = this.getChildById(el.id);
      if (!child) {
        let view = new View(el, this.liveSocket, this);
        this.root.children[this.id][view.id] = view;
        view.join();
        this.childJoins++;
        return true;
      }
    }
    isJoinPending() {
      return this.joinPending;
    }
    ackJoin(_child) {
      this.childJoins--;
      if (this.childJoins === 0) {
        if (this.parent) {
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
        }
      }
    }
    onAllChildJoinsComplete() {
      this.joinCallback(() => {
        this.pendingJoinOps.forEach(([view, op]) => {
          if (!view.isDestroyed()) {
            op();
          }
        });
        this.pendingJoinOps = [];
      });
    }
    update(diff, events) {
      if (this.isJoinPending() || this.liveSocket.hasPendingLink() && !dom_default.isPhxSticky(this.el)) {
        return this.pendingDiffs.push({ diff, events });
      }
      this.rendered.mergeDiff(diff);
      let phxChildrenAdded = false;
      if (this.rendered.isComponentOnlyDiff(diff)) {
        this.liveSocket.time("component patch complete", () => {
          let parentCids = dom_default.findParentCIDs(this.el, this.rendered.componentCIDs(diff));
          parentCids.forEach((parentCID) => {
            if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {
              phxChildrenAdded = true;
            }
          });
        });
      } else if (!isEmpty(diff)) {
        this.liveSocket.time("full patch complete", () => {
          let html = this.renderContainer(diff, "update");
          let patch = new DOMPatch(this, this.el, this.id, html, null);
          phxChildrenAdded = this.performPatch(patch, true);
        });
      }
      this.liveSocket.dispatchEvents(events);
      if (phxChildrenAdded) {
        this.joinNewChildren();
      }
    }
    renderContainer(diff, kind) {
      return this.liveSocket.time(`toString diff (${kind})`, () => {
        let tag = this.el.tagName;
        let cids = diff ? this.rendered.componentCIDs(diff).concat(this.pruningCIDs) : null;
        let html = this.rendered.toString(cids);
        return `<${tag}>${html}</${tag}>`;
      });
    }
    componentPatch(diff, cid) {
      if (isEmpty(diff))
        return false;
      let html = this.rendered.componentToString(cid);
      let patch = new DOMPatch(this, this.el, this.id, html, cid);
      let childrenAdded = this.performPatch(patch, true);
      return childrenAdded;
    }
    getHook(el) {
      return this.viewHooks[ViewHook.elementID(el)];
    }
    addHook(el) {
      if (ViewHook.elementID(el) || !el.getAttribute) {
        return;
      }
      let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));
      if (hookName && !this.ownsElement(el)) {
        return;
      }
      let callbacks = this.liveSocket.getHookCallbacks(hookName);
      if (callbacks) {
        if (!el.id) {
          logError(`no DOM ID for hook "${hookName}". Hooks require a unique ID on each element.`, el);
        }
        let hook = new ViewHook(this, el, callbacks);
        this.viewHooks[ViewHook.elementID(hook.el)] = hook;
        return hook;
      } else if (hookName !== null) {
        logError(`unknown hook found for "${hookName}"`, el);
      }
    }
    destroyHook(hook) {
      hook.__destroyed();
      hook.__cleanup__();
      delete this.viewHooks[ViewHook.elementID(hook.el)];
    }
    applyPendingUpdates() {
      this.pendingDiffs.forEach(({ diff, events }) => this.update(diff, events));
      this.pendingDiffs = [];
    }
    onChannel(event, cb) {
      this.liveSocket.onChannel(this.channel, event, (resp) => {
        if (this.isJoinPending()) {
          this.root.pendingJoinOps.push([this, () => cb(resp)]);
        } else {
          this.liveSocket.requestDOMUpdate(() => cb(resp));
        }
      });
    }
    bindChannel() {
      this.liveSocket.onChannel(this.channel, "diff", (rawDiff) => {
        this.liveSocket.requestDOMUpdate(() => {
          this.applyDiff("update", rawDiff, ({ diff, events }) => this.update(diff, events));
        });
      });
      this.onChannel("redirect", ({ to, flash }) => this.onRedirect({ to, flash }));
      this.onChannel("live_patch", (redir) => this.onLivePatch(redir));
      this.onChannel("live_redirect", (redir) => this.onLiveRedirect(redir));
      this.channel.onError((reason) => this.onError(reason));
      this.channel.onClose((reason) => this.onClose(reason));
    }
    destroyAllChildren() {
      for (let id in this.root.children[this.id]) {
        this.getChildById(id).destroy();
      }
    }
    onLiveRedirect(redir) {
      let { to, kind, flash } = redir;
      let url = this.expandURL(to);
      this.liveSocket.historyRedirect(url, kind, flash);
    }
    onLivePatch(redir) {
      let { to, kind } = redir;
      this.href = this.expandURL(to);
      this.liveSocket.historyPatch(to, kind);
    }
    expandURL(to) {
      return to.startsWith("/") ? `${window.location.protocol}//${window.location.host}${to}` : to;
    }
    onRedirect({ to, flash }) {
      this.liveSocket.redirect(to, flash);
    }
    isDestroyed() {
      return this.destroyed;
    }
    join(callback) {
      if (this.isMain()) {
        this.stopCallback = this.liveSocket.withPageLoading({ to: this.href, kind: "initial" });
      }
      this.joinCallback = (onDone) => {
        onDone = onDone || function() {
        };
        callback ? callback(this.joinCount, onDone) : onDone();
      };
      this.liveSocket.wrapPush(this, { timeout: false }, () => {
        return this.channel.join().receive("ok", (data) => {
          if (!this.isDestroyed()) {
            this.liveSocket.requestDOMUpdate(() => this.onJoin(data));
          }
        }).receive("error", (resp) => !this.isDestroyed() && this.onJoinError(resp)).receive("timeout", () => !this.isDestroyed() && this.onJoinError({ reason: "timeout" }));
      });
    }
    onJoinError(resp) {
      if (resp.reason === "unauthorized" || resp.reason === "stale") {
        this.log("error", () => ["unauthorized live_redirect. Falling back to page request", resp]);
        return this.onRedirect({ to: this.href });
      }
      if (resp.redirect || resp.live_redirect) {
        this.joinPending = false;
        this.channel.leave();
      }
      if (resp.redirect) {
        return this.onRedirect(resp.redirect);
      }
      if (resp.live_redirect) {
        return this.onLiveRedirect(resp.live_redirect);
      }
      this.log("error", () => ["unable to join", resp]);
      if (this.liveSocket.isConnected()) {
        this.liveSocket.reloadWithJitter(this);
      }
    }
    onClose(reason) {
      if (this.isDestroyed()) {
        return;
      }
      if (this.liveSocket.hasPendingLink() && reason !== "leave") {
        return this.liveSocket.reloadWithJitter(this);
      }
      this.destroyAllChildren();
      this.liveSocket.dropActiveElement(this);
      if (document.activeElement) {
        document.activeElement.blur();
      }
      if (this.liveSocket.isUnloaded()) {
        this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);
      }
    }
    onError(reason) {
      this.onClose(reason);
      if (this.liveSocket.isConnected()) {
        this.log("error", () => ["view crashed", reason]);
      }
      if (!this.liveSocket.isUnloaded()) {
        this.displayError();
      }
    }
    displayError() {
      if (this.isMain()) {
        dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: { to: this.href, kind: "error" } });
      }
      this.showLoader();
      this.setContainerClasses(PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);
    }
    pushWithReply(refGenerator, event, payload, onReply = function() {
    }) {
      if (!this.isConnected()) {
        return;
      }
      let [ref, [el], opts] = refGenerator ? refGenerator() : [null, [], {}];
      let onLoadingDone = function() {
      };
      if (opts.page_loading || el && el.getAttribute(this.binding(PHX_PAGE_LOADING)) !== null) {
        onLoadingDone = this.liveSocket.withPageLoading({ kind: "element", target: el });
      }
      if (typeof payload.cid !== "number") {
        delete payload.cid;
      }
      return this.liveSocket.wrapPush(this, { timeout: true }, () => {
        return this.channel.push(event, payload, PUSH_TIMEOUT).receive("ok", (resp) => {
          if (ref !== null) {
            this.undoRefs(ref);
          }
          let finish = (hookReply) => {
            if (resp.redirect) {
              this.onRedirect(resp.redirect);
            }
            if (resp.live_patch) {
              this.onLivePatch(resp.live_patch);
            }
            if (resp.live_redirect) {
              this.onLiveRedirect(resp.live_redirect);
            }
            onLoadingDone();
            onReply(resp, hookReply);
          };
          if (resp.diff) {
            this.liveSocket.requestDOMUpdate(() => {
              let hookReply = this.applyDiff("update", resp.diff, ({ diff, events }) => {
                this.update(diff, events);
              });
              finish(hookReply);
            });
          } else {
            finish(null);
          }
        });
      });
    }
    undoRefs(ref) {
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}="${ref}"]`, (el) => {
        let disabledVal = el.getAttribute(PHX_DISABLED);
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
        if (el.getAttribute(PHX_READONLY) !== null) {
          el.readOnly = false;
          el.removeAttribute(PHX_READONLY);
        }
        if (disabledVal !== null) {
          el.disabled = disabledVal === "true" ? true : false;
          el.removeAttribute(PHX_DISABLED);
        }
        PHX_EVENT_CLASSES.forEach((className) => dom_default.removeClass(el, className));
        let disableRestore = el.getAttribute(PHX_DISABLE_WITH_RESTORE);
        if (disableRestore !== null) {
          el.innerText = disableRestore;
          el.removeAttribute(PHX_DISABLE_WITH_RESTORE);
        }
        let toEl = dom_default.private(el, PHX_REF);
        if (toEl) {
          let hook = this.triggerBeforeUpdateHook(el, toEl);
          DOMPatch.patchEl(el, toEl, this.liveSocket.getActiveElement());
          if (hook) {
            hook.__updated();
          }
          dom_default.deletePrivate(el, PHX_REF);
        }
      });
    }
    putRef(elements, event, opts = {}) {
      let newRef = this.ref++;
      let disableWith = this.binding(PHX_DISABLE_WITH);
      if (opts.loading) {
        elements = elements.concat(dom_default.all(document, opts.loading));
      }
      elements.forEach((el) => {
        el.classList.add(`phx-${event}-loading`);
        el.setAttribute(PHX_REF, newRef);
        el.setAttribute(PHX_REF_SRC, this.el.id);
        let disableText = el.getAttribute(disableWith);
        if (disableText !== null) {
          if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {
            el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);
          }
          if (disableText !== "") {
            el.innerText = disableText;
          }
          el.setAttribute("disabled", "");
        }
      });
      return [newRef, elements, opts];
    }
    componentID(el) {
      let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);
      return cid ? parseInt(cid) : null;
    }
    targetComponentID(target, targetCtx, opts = {}) {
      if (isCid(targetCtx)) {
        return targetCtx;
      }
      let cidOrSelector = target.getAttribute(this.binding("target"));
      if (isCid(cidOrSelector)) {
        return parseInt(cidOrSelector);
      } else if (targetCtx && (cidOrSelector !== null || opts.target)) {
        return this.closestComponentID(targetCtx);
      } else {
        return null;
      }
    }
    closestComponentID(targetCtx) {
      if (isCid(targetCtx)) {
        return targetCtx;
      } else if (targetCtx) {
        return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), (el) => this.ownsElement(el) && this.componentID(el));
      } else {
        return null;
      }
    }
    pushHookEvent(targetCtx, event, payload, onReply) {
      if (!this.isConnected()) {
        this.log("hook", () => ["unable to push hook event. LiveView not connected", event, payload]);
        return false;
      }
      let [ref, els, opts] = this.putRef([], "hook");
      this.pushWithReply(() => [ref, els, opts], "event", {
        type: "hook",
        event,
        value: payload,
        cid: this.closestComponentID(targetCtx)
      }, (resp, reply) => onReply(reply, ref));
      return ref;
    }
    extractMeta(el, meta, value) {
      let prefix = this.binding("value-");
      for (let i2 = 0; i2 < el.attributes.length; i2++) {
        if (!meta) {
          meta = {};
        }
        let name = el.attributes[i2].name;
        if (name.startsWith(prefix)) {
          meta[name.replace(prefix, "")] = el.getAttribute(name);
        }
      }
      if (el.value !== void 0) {
        if (!meta) {
          meta = {};
        }
        meta.value = el.value;
        if (el.tagName === "INPUT" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {
          delete meta.value;
        }
      }
      if (value) {
        if (!meta) {
          meta = {};
        }
        for (let key in value) {
          meta[key] = value[key];
        }
      }
      return meta;
    }
    pushEvent(type, el, targetCtx, phxEvent, meta, opts = {}) {
      this.pushWithReply(() => this.putRef([el], type, opts), "event", {
        type,
        event: phxEvent,
        value: this.extractMeta(el, meta, opts.value),
        cid: this.targetComponentID(el, targetCtx, opts)
      });
    }
    pushFileProgress(fileEl, entryRef, progress, onReply = function() {
    }) {
      this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {
        view.pushWithReply(null, "progress", {
          event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),
          ref: fileEl.getAttribute(PHX_UPLOAD_REF),
          entry_ref: entryRef,
          progress,
          cid: view.targetComponentID(fileEl.form, targetCtx)
        }, onReply);
      });
    }
    pushInput(inputEl, targetCtx, forceCid, phxEvent, opts, callback) {
      let uploads;
      let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx);
      let refGenerator = () => this.putRef([inputEl, inputEl.form], "change", opts);
      let formData;
      if (inputEl.getAttribute(this.binding("change"))) {
        formData = serializeForm(inputEl.form, { _target: opts._target }, [inputEl.name]);
      } else {
        formData = serializeForm(inputEl.form, { _target: opts._target });
      }
      if (dom_default.isUploadInput(inputEl) && inputEl.files && inputEl.files.length > 0) {
        LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));
      }
      uploads = LiveUploader.serializeUploads(inputEl);
      let event = {
        type: "form",
        event: phxEvent,
        value: formData,
        uploads,
        cid
      };
      this.pushWithReply(refGenerator, "event", event, (resp) => {
        dom_default.showError(inputEl, this.liveSocket.binding(PHX_FEEDBACK_FOR));
        if (dom_default.isUploadInput(inputEl) && inputEl.getAttribute("data-phx-auto-upload") !== null) {
          if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {
            let [ref, _els] = refGenerator();
            this.uploadFiles(inputEl.form, targetCtx, ref, cid, (_uploads) => {
              callback && callback(resp);
              this.triggerAwaitingSubmit(inputEl.form);
            });
          }
        } else {
          callback && callback(resp);
        }
      });
    }
    triggerAwaitingSubmit(formEl) {
      let awaitingSubmit = this.getScheduledSubmit(formEl);
      if (awaitingSubmit) {
        let [_el, _ref, _opts, callback] = awaitingSubmit;
        this.cancelSubmit(formEl);
        callback();
      }
    }
    getScheduledSubmit(formEl) {
      return this.formSubmits.find(([el, _ref, _opts, _callback]) => el.isSameNode(formEl));
    }
    scheduleSubmit(formEl, ref, opts, callback) {
      if (this.getScheduledSubmit(formEl)) {
        return true;
      }
      this.formSubmits.push([formEl, ref, opts, callback]);
    }
    cancelSubmit(formEl) {
      this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {
        if (el.isSameNode(formEl)) {
          this.undoRefs(ref);
          return false;
        } else {
          return true;
        }
      });
    }
    pushFormSubmit(formEl, targetCtx, phxEvent, opts, onReply) {
      let filterIgnored = (el) => {
        let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);
        return !(userIgnored || closestPhxBinding(el, "data-phx-update=ignore", el.form));
      };
      let filterDisables = (el) => {
        return el.hasAttribute(this.binding(PHX_DISABLE_WITH));
      };
      let filterButton = (el) => el.tagName == "BUTTON";
      let filterInput = (el) => ["INPUT", "TEXTAREA", "SELECT"].includes(el.tagName);
      let refGenerator = () => {
        let formElements = Array.from(formEl.elements);
        let disables = formElements.filter(filterDisables);
        let buttons = formElements.filter(filterButton).filter(filterIgnored);
        let inputs = formElements.filter(filterInput).filter(filterIgnored);
        buttons.forEach((button) => {
          button.setAttribute(PHX_DISABLED, button.disabled);
          button.disabled = true;
        });
        inputs.forEach((input) => {
          input.setAttribute(PHX_READONLY, input.readOnly);
          input.readOnly = true;
          if (input.files) {
            input.setAttribute(PHX_DISABLED, input.disabled);
            input.disabled = true;
          }
        });
        formEl.setAttribute(this.binding(PHX_PAGE_LOADING), "");
        return this.putRef([formEl].concat(disables).concat(buttons).concat(inputs), "submit", opts);
      };
      let cid = this.targetComponentID(formEl, targetCtx);
      if (LiveUploader.hasUploadsInProgress(formEl)) {
        let [ref, _els] = refGenerator();
        let push = () => this.pushFormSubmit(formEl, targetCtx, phxEvent, opts, onReply);
        return this.scheduleSubmit(formEl, ref, opts, push);
      } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
        let [ref, els] = refGenerator();
        let proxyRefGen = () => [ref, els, opts];
        this.uploadFiles(formEl, targetCtx, ref, cid, (_uploads) => {
          let formData = serializeForm(formEl, {});
          this.pushWithReply(proxyRefGen, "event", {
            type: "form",
            event: phxEvent,
            value: formData,
            cid
          }, onReply);
        });
      } else {
        let formData = serializeForm(formEl, {});
        this.pushWithReply(refGenerator, "event", {
          type: "form",
          event: phxEvent,
          value: formData,
          cid
        }, onReply);
      }
    }
    uploadFiles(formEl, targetCtx, ref, cid, onComplete) {
      let joinCountAtUpload = this.joinCount;
      let inputEls = LiveUploader.activeFileInputs(formEl);
      let numFileInputsInProgress = inputEls.length;
      inputEls.forEach((inputEl) => {
        let uploader = new LiveUploader(inputEl, this, () => {
          numFileInputsInProgress--;
          if (numFileInputsInProgress === 0) {
            onComplete();
          }
        });
        this.uploaders[inputEl] = uploader;
        let entries = uploader.entries().map((entry) => entry.toPreflightPayload());
        let payload = {
          ref: inputEl.getAttribute(PHX_UPLOAD_REF),
          entries,
          cid: this.targetComponentID(inputEl.form, targetCtx)
        };
        this.log("upload", () => ["sending preflight request", payload]);
        this.pushWithReply(null, "allow_upload", payload, (resp) => {
          this.log("upload", () => ["got preflight response", resp]);
          if (resp.error) {
            this.undoRefs(ref);
            let [entry_ref, reason] = resp.error;
            this.log("upload", () => [`error for entry ${entry_ref}`, reason]);
          } else {
            let onError = (callback) => {
              this.channel.onError(() => {
                if (this.joinCount === joinCountAtUpload) {
                  callback();
                }
              });
            };
            uploader.initAdapterUpload(resp, onError, this.liveSocket);
          }
        });
      });
    }
    dispatchUploads(name, filesOrBlobs) {
      let inputs = dom_default.findUploadInputs(this.el).filter((el) => el.name === name);
      if (inputs.length === 0) {
        logError(`no live file inputs found matching the name "${name}"`);
      } else if (inputs.length > 1) {
        logError(`duplicate live file inputs found matching the name "${name}"`);
      } else {
        dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, { detail: { files: filesOrBlobs } });
      }
    }
    pushFormRecovery(form, newCid, callback) {
      this.liveSocket.withinOwners(form, (view, targetCtx) => {
        let input = form.elements[0];
        let phxEvent = form.getAttribute(this.binding(PHX_AUTO_RECOVER)) || form.getAttribute(this.binding("change"));
        js_default.exec("change", phxEvent, view, input, ["push", { _target: input.name, newCid, callback }]);
      });
    }
    pushLinkPatch(href, targetEl, callback) {
      let linkRef = this.liveSocket.setPendingLink(href);
      let refGen = targetEl ? () => this.putRef([targetEl], "click") : null;
      let fallback = () => this.liveSocket.redirect(window.location.href);
      let push = this.pushWithReply(refGen, "live_patch", { url: href }, (resp) => {
        this.liveSocket.requestDOMUpdate(() => {
          if (resp.link_redirect) {
            this.liveSocket.replaceMain(href, null, callback, linkRef);
          } else {
            if (this.liveSocket.commitPendingLink(linkRef)) {
              this.href = href;
            }
            this.applyPendingUpdates();
            callback && callback(linkRef);
          }
        });
      });
      if (push) {
        push.receive("timeout", fallback);
      } else {
        fallback();
      }
    }
    formsForRecovery(html) {
      if (this.joinCount === 0) {
        return [];
      }
      let phxChange = this.binding("change");
      let template = document.createElement("template");
      template.innerHTML = html;
      return dom_default.all(this.el, `form[${phxChange}]`).filter((form) => form.id && this.ownsElement(form)).filter((form) => form.elements.length > 0).filter((form) => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== "ignore").map((form) => {
        let newForm = template.content.querySelector(`form[id="${form.id}"][${phxChange}="${form.getAttribute(phxChange)}"]`);
        if (newForm) {
          return [form, newForm, this.targetComponentID(newForm)];
        } else {
          return [form, null, null];
        }
      }).filter(([form, newForm, newCid]) => newForm);
    }
    maybePushComponentsDestroyed(destroyedCIDs) {
      let willDestroyCIDs = destroyedCIDs.filter((cid) => {
        return dom_default.findComponentNodeList(this.el, cid).length === 0;
      });
      if (willDestroyCIDs.length > 0) {
        this.pruningCIDs.push(...willDestroyCIDs);
        this.pushWithReply(null, "cids_will_destroy", { cids: willDestroyCIDs }, () => {
          this.pruningCIDs = this.pruningCIDs.filter((cid) => willDestroyCIDs.indexOf(cid) !== -1);
          let completelyDestroyCIDs = willDestroyCIDs.filter((cid) => {
            return dom_default.findComponentNodeList(this.el, cid).length === 0;
          });
          if (completelyDestroyCIDs.length > 0) {
            this.pushWithReply(null, "cids_destroyed", { cids: completelyDestroyCIDs }, (resp) => {
              this.rendered.pruneCIDs(resp.cids);
            });
          }
        });
      }
    }
    ownsElement(el) {
      return el.getAttribute(PHX_PARENT_ID) === this.id || maybe(el.closest(PHX_VIEW_SELECTOR), (node) => node.id) === this.id;
    }
    submitForm(form, targetCtx, phxEvent, opts = {}) {
      dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);
      let phxFeedback = this.liveSocket.binding(PHX_FEEDBACK_FOR);
      let inputs = Array.from(form.elements);
      this.liveSocket.blurActiveElement(this);
      this.pushFormSubmit(form, targetCtx, phxEvent, opts, () => {
        inputs.forEach((input) => dom_default.showError(input, phxFeedback));
        this.liveSocket.restorePreviouslyActiveFocus();
      });
    }
    binding(kind) {
      return this.liveSocket.binding(kind);
    }
  };
  var LiveSocket = class {
    constructor(url, phxSocket, opts = {}) {
      this.unloaded = false;
      if (!phxSocket || phxSocket.constructor.name === "Object") {
        throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);
      }
      this.socket = new phxSocket(url, opts);
      this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;
      this.opts = opts;
      this.params = closure2(opts.params || {});
      this.viewLogger = opts.viewLogger;
      this.metadataCallbacks = opts.metadata || {};
      this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});
      this.activeElement = null;
      this.prevActive = null;
      this.silenced = false;
      this.main = null;
      this.outgoingMainEl = null;
      this.clickStartedAtTarget = null;
      this.linkRef = 1;
      this.roots = {};
      this.href = window.location.href;
      this.pendingLink = null;
      this.currentLocation = clone(window.location);
      this.hooks = opts.hooks || {};
      this.uploaders = opts.uploaders || {};
      this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;
      this.reloadWithJitterTimer = null;
      this.maxReloads = opts.maxReloads || MAX_RELOADS;
      this.reloadJitterMin = opts.reloadJitterMin || RELOAD_JITTER_MIN;
      this.reloadJitterMax = opts.reloadJitterMax || RELOAD_JITTER_MAX;
      this.failsafeJitter = opts.failsafeJitter || FAILSAFE_JITTER;
      this.localStorage = opts.localStorage || window.localStorage;
      this.sessionStorage = opts.sessionStorage || window.sessionStorage;
      this.boundTopLevelEvents = false;
      this.domCallbacks = Object.assign({ onNodeAdded: closure2(), onBeforeElUpdated: closure2() }, opts.dom || {});
      this.transitions = new TransitionSet();
      window.addEventListener("pagehide", (_e) => {
        this.unloaded = true;
      });
      this.socket.onOpen(() => {
        if (this.isUnloaded()) {
          window.location.reload();
        }
      });
    }
    isProfileEnabled() {
      return this.sessionStorage.getItem(PHX_LV_PROFILE) === "true";
    }
    isDebugEnabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "true";
    }
    isDebugDisabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "false";
    }
    enableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "true");
    }
    enableProfiling() {
      this.sessionStorage.setItem(PHX_LV_PROFILE, "true");
    }
    disableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "false");
    }
    disableProfiling() {
      this.sessionStorage.removeItem(PHX_LV_PROFILE);
    }
    enableLatencySim(upperBoundMs) {
      this.enableDebug();
      console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable");
      this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);
    }
    disableLatencySim() {
      this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);
    }
    getLatencySim() {
      let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);
      return str ? parseInt(str) : null;
    }
    getSocket() {
      return this.socket;
    }
    connect() {
      if (window.location.hostname === "localhost" && !this.isDebugDisabled()) {
        this.enableDebug();
      }
      let doConnect = () => {
        if (this.joinRootViews()) {
          this.bindTopLevelEvents();
          this.socket.connect();
        } else if (this.main) {
          this.socket.connect();
        }
      };
      if (["complete", "loaded", "interactive"].indexOf(document.readyState) >= 0) {
        doConnect();
      } else {
        document.addEventListener("DOMContentLoaded", () => doConnect());
      }
    }
    disconnect(callback) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.disconnect(callback);
    }
    replaceTransport(transport) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.replaceTransport(transport);
      this.connect();
    }
    execJS(el, encodedJS, eventType = null) {
      this.owner(el, (view) => js_default.exec(eventType, encodedJS, view, el));
    }
    triggerDOM(kind, args) {
      this.domCallbacks[kind](...args);
    }
    time(name, func) {
      if (!this.isProfileEnabled() || !console.time) {
        return func();
      }
      console.time(name);
      let result = func();
      console.timeEnd(name);
      return result;
    }
    log(view, kind, msgCallback) {
      if (this.viewLogger) {
        let [msg, obj] = msgCallback();
        this.viewLogger(view, kind, msg, obj);
      } else if (this.isDebugEnabled()) {
        let [msg, obj] = msgCallback();
        debug(view, kind, msg, obj);
      }
    }
    requestDOMUpdate(callback) {
      this.transitions.after(callback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.transitions.addTransition(time, onStart, onDone);
    }
    onChannel(channel, event, cb) {
      channel.on(event, (data) => {
        let latency = this.getLatencySim();
        if (!latency) {
          cb(data);
        } else {
          console.log(`simulating ${latency}ms of latency from server to client`);
          setTimeout(() => cb(data), latency);
        }
      });
    }
    wrapPush(view, opts, push) {
      let latency = this.getLatencySim();
      let oldJoinCount = view.joinCount;
      if (!latency) {
        if (this.isConnected() && opts.timeout) {
          return push().receive("timeout", () => {
            if (view.joinCount === oldJoinCount && !view.isDestroyed()) {
              this.reloadWithJitter(view, () => {
                this.log(view, "timeout", () => ["received timeout while communicating with server. Falling back to hard refresh for recovery"]);
              });
            }
          });
        } else {
          return push();
        }
      }
      console.log(`simulating ${latency}ms of latency from client to server`);
      let fakePush = {
        receives: [],
        receive(kind, cb) {
          this.receives.push([kind, cb]);
        }
      };
      setTimeout(() => {
        if (view.isDestroyed()) {
          return;
        }
        fakePush.receives.reduce((acc, [kind, cb]) => acc.receive(kind, cb), push());
      }, latency);
      return fakePush;
    }
    reloadWithJitter(view, log) {
      clearTimeout(this.reloadWithJitterTimer);
      this.disconnect();
      let minMs = this.reloadJitterMin;
      let maxMs = this.reloadJitterMax;
      let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
      let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, (count) => count + 1);
      if (tries > this.maxReloads) {
        afterMs = this.failsafeJitter;
      }
      this.reloadWithJitterTimer = setTimeout(() => {
        if (view.isDestroyed() || view.isConnected()) {
          return;
        }
        view.destroy();
        log ? log() : this.log(view, "join", () => [`encountered ${tries} consecutive reloads`]);
        if (tries > this.maxReloads) {
          this.log(view, "join", () => [`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]);
        }
        if (this.hasPendingLink()) {
          window.location = this.pendingLink;
        } else {
          window.location.reload();
        }
      }, afterMs);
    }
    getHookCallbacks(name) {
      return name && name.startsWith("Phoenix.") ? hooks_default[name.split(".")[1]] : this.hooks[name];
    }
    isUnloaded() {
      return this.unloaded;
    }
    isConnected() {
      return this.socket.isConnected();
    }
    getBindingPrefix() {
      return this.bindingPrefix;
    }
    binding(kind) {
      return `${this.getBindingPrefix()}${kind}`;
    }
    channel(topic, params) {
      return this.socket.channel(topic, params);
    }
    joinRootViews() {
      let rootsFound = false;
      dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, (rootEl) => {
        if (!this.getRootById(rootEl.id)) {
          let view = this.newRootView(rootEl);
          view.setHref(this.getHref());
          view.join();
          if (rootEl.hasAttribute(PHX_MAIN)) {
            this.main = view;
          }
        }
        rootsFound = true;
      });
      return rootsFound;
    }
    redirect(to, flash) {
      this.disconnect();
      browser_default.redirect(to, flash);
    }
    replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {
      this.outgoingMainEl = this.outgoingMainEl || this.main.el;
      let newMainEl = dom_default.cloneNode(this.outgoingMainEl, "");
      this.main.showLoader(this.loaderTimeout);
      this.main.destroy();
      this.main = this.newRootView(newMainEl, flash);
      this.main.setRedirect(href);
      this.transitionRemoves();
      this.main.join((joinCount, onDone) => {
        if (joinCount === 1 && this.commitPendingLink(linkRef)) {
          this.requestDOMUpdate(() => {
            dom_default.findPhxSticky(document).forEach((el) => newMainEl.appendChild(el));
            this.outgoingMainEl.replaceWith(newMainEl);
            this.outgoingMainEl = null;
            callback && requestAnimationFrame(callback);
            onDone();
          });
        }
      });
    }
    transitionRemoves(elements) {
      let removeAttr = this.binding("remove");
      elements = elements || dom_default.all(document, `[${removeAttr}]`);
      elements.forEach((el) => {
        if (document.body.contains(el)) {
          this.execJS(el, el.getAttribute(removeAttr), "remove");
        }
      });
    }
    isPhxView(el) {
      return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;
    }
    newRootView(el, flash) {
      let view = new View(el, this, null, flash);
      this.roots[view.id] = view;
      return view;
    }
    owner(childEl, callback) {
      let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), (el) => this.getViewByEl(el)) || this.main;
      if (view) {
        callback(view);
      }
    }
    withinOwners(childEl, callback) {
      this.owner(childEl, (view) => callback(view, childEl));
    }
    getViewByEl(el) {
      let rootId = el.getAttribute(PHX_ROOT_ID);
      return maybe(this.getRootById(rootId), (root) => root.getDescendentByEl(el));
    }
    getRootById(id) {
      return this.roots[id];
    }
    destroyAllViews() {
      for (let id in this.roots) {
        this.roots[id].destroy();
        delete this.roots[id];
      }
      this.main = null;
    }
    destroyViewByEl(el) {
      let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));
      if (root && root.id === el.id) {
        root.destroy();
        delete this.roots[root.id];
      } else if (root) {
        root.destroyDescendent(el.id);
      }
    }
    setActiveElement(target) {
      if (this.activeElement === target) {
        return;
      }
      this.activeElement = target;
      let cancel = () => {
        if (target === this.activeElement) {
          this.activeElement = null;
        }
        target.removeEventListener("mouseup", this);
        target.removeEventListener("touchend", this);
      };
      target.addEventListener("mouseup", cancel);
      target.addEventListener("touchend", cancel);
    }
    getActiveElement() {
      if (document.activeElement === document.body) {
        return this.activeElement || document.activeElement;
      } else {
        return document.activeElement || document.body;
      }
    }
    dropActiveElement(view) {
      if (this.prevActive && view.ownsElement(this.prevActive)) {
        this.prevActive = null;
      }
    }
    restorePreviouslyActiveFocus() {
      if (this.prevActive && this.prevActive !== document.body) {
        this.prevActive.focus();
      }
    }
    blurActiveElement() {
      this.prevActive = this.getActiveElement();
      if (this.prevActive !== document.body) {
        this.prevActive.blur();
      }
    }
    bindTopLevelEvents() {
      if (this.boundTopLevelEvents) {
        return;
      }
      this.boundTopLevelEvents = true;
      this.socket.onClose((event) => {
        if (event && event.code === 1e3 && this.main) {
          this.reloadWithJitter(this.main);
        }
      });
      document.body.addEventListener("click", function() {
      });
      window.addEventListener("pageshow", (e) => {
        if (e.persisted) {
          this.getSocket().disconnect();
          this.withPageLoading({ to: window.location.href, kind: "redirect" });
          window.location.reload();
        }
      }, true);
      this.bindNav();
      this.bindClicks();
      this.bindForms();
      this.bind({ keyup: "keyup", keydown: "keydown" }, (e, type, view, targetEl, phxEvent, eventTarget) => {
        let matchKey = targetEl.getAttribute(this.binding(PHX_KEY));
        let pressedKey = e.key && e.key.toLowerCase();
        if (matchKey && matchKey.toLowerCase() !== pressedKey) {
          return;
        }
        let data = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
        js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
      });
      this.bind({ blur: "focusout", focus: "focusin" }, (e, type, view, targetEl, phxEvent, eventTarget) => {
        if (!eventTarget) {
          let data = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      this.bind({ blur: "blur", focus: "focus" }, (e, type, view, targetEl, targetCtx, phxEvent, phxTarget) => {
        if (phxTarget === "window") {
          let data = this.eventMeta(type, e, targetEl);
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      window.addEventListener("dragover", (e) => e.preventDefault());
      window.addEventListener("drop", (e) => {
        e.preventDefault();
        let dropTargetId = maybe(closestPhxBinding(e.target, this.binding(PHX_DROP_TARGET)), (trueTarget) => {
          return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));
        });
        let dropTarget = dropTargetId && document.getElementById(dropTargetId);
        let files = Array.from(e.dataTransfer.files || []);
        if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {
          return;
        }
        LiveUploader.trackFiles(dropTarget, files);
        dropTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
      this.on(PHX_TRACK_UPLOADS, (e) => {
        let uploadTarget = e.target;
        if (!dom_default.isUploadInput(uploadTarget)) {
          return;
        }
        let files = Array.from(e.detail.files || []).filter((f) => f instanceof File || f instanceof Blob);
        LiveUploader.trackFiles(uploadTarget, files);
        uploadTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
    }
    eventMeta(eventName, e, targetEl) {
      let callback = this.metadataCallbacks[eventName];
      return callback ? callback(e, targetEl) : {};
    }
    setPendingLink(href) {
      this.linkRef++;
      this.pendingLink = href;
      return this.linkRef;
    }
    commitPendingLink(linkRef) {
      if (this.linkRef !== linkRef) {
        return false;
      } else {
        this.href = this.pendingLink;
        this.pendingLink = null;
        return true;
      }
    }
    getHref() {
      return this.href;
    }
    hasPendingLink() {
      return !!this.pendingLink;
    }
    bind(events, callback) {
      for (let event in events) {
        let browserEventName = events[event];
        this.on(browserEventName, (e) => {
          let binding = this.binding(event);
          let windowBinding = this.binding(`window-${event}`);
          let targetPhxEvent = e.target.getAttribute && e.target.getAttribute(binding);
          if (targetPhxEvent) {
            this.debounce(e.target, e, browserEventName, () => {
              this.withinOwners(e.target, (view) => {
                callback(e, event, view, e.target, targetPhxEvent, null);
              });
            });
          } else {
            dom_default.all(document, `[${windowBinding}]`, (el) => {
              let phxEvent = el.getAttribute(windowBinding);
              this.debounce(el, e, browserEventName, () => {
                this.withinOwners(el, (view) => {
                  callback(e, event, view, el, phxEvent, "window");
                });
              });
            });
          }
        });
      }
    }
    bindClicks() {
      window.addEventListener("mousedown", (e) => this.clickStartedAtTarget = e.target);
      this.bindClick("click", "click", false);
      this.bindClick("mousedown", "capture-click", true);
    }
    bindClick(eventName, bindingName, capture) {
      let click = this.binding(bindingName);
      window.addEventListener(eventName, (e) => {
        let target = null;
        if (capture) {
          target = e.target.matches(`[${click}]`) ? e.target : e.target.querySelector(`[${click}]`);
        } else {
          let clickStartedAtTarget = this.clickStartedAtTarget || e.target;
          target = closestPhxBinding(clickStartedAtTarget, click);
          this.dispatchClickAway(e, clickStartedAtTarget);
          this.clickStartedAtTarget = null;
        }
        let phxEvent = target && target.getAttribute(click);
        if (!phxEvent) {
          return;
        }
        if (target.getAttribute("href") === "#") {
          e.preventDefault();
        }
        this.debounce(target, e, "click", () => {
          this.withinOwners(target, (view) => {
            js_default.exec("click", phxEvent, view, target, ["push", { data: this.eventMeta("click", e, target) }]);
          });
        });
      }, capture);
    }
    dispatchClickAway(e, clickStartedAt) {
      let phxClickAway = this.binding("click-away");
      dom_default.all(document, `[${phxClickAway}]`, (el) => {
        if (!(el.isSameNode(clickStartedAt) || el.contains(clickStartedAt))) {
          this.withinOwners(e.target, (view) => {
            let phxEvent = el.getAttribute(phxClickAway);
            if (js_default.isVisible(el)) {
              js_default.exec("click", phxEvent, view, el, ["push", { data: this.eventMeta("click", e, e.target) }]);
            }
          });
        }
      });
    }
    bindNav() {
      if (!browser_default.canPushState()) {
        return;
      }
      if (history.scrollRestoration) {
        history.scrollRestoration = "manual";
      }
      let scrollTimer = null;
      window.addEventListener("scroll", (_e) => {
        clearTimeout(scrollTimer);
        scrollTimer = setTimeout(() => {
          browser_default.updateCurrentState((state) => Object.assign(state, { scroll: window.scrollY }));
        }, 100);
      });
      window.addEventListener("popstate", (event) => {
        if (!this.registerNewLocation(window.location)) {
          return;
        }
        let { type, id, root, scroll } = event.state || {};
        let href = window.location.href;
        this.requestDOMUpdate(() => {
          if (this.main.isConnected() && (type === "patch" && id === this.main.id)) {
            this.main.pushLinkPatch(href, null);
          } else {
            this.replaceMain(href, null, () => {
              if (root) {
                this.replaceRootHistory();
              }
              if (typeof scroll === "number") {
                setTimeout(() => {
                  window.scrollTo(0, scroll);
                }, 0);
              }
            });
          }
        });
      }, false);
      window.addEventListener("click", (e) => {
        let target = closestPhxBinding(e.target, PHX_LIVE_LINK);
        let type = target && target.getAttribute(PHX_LIVE_LINK);
        let wantsNewTab = e.metaKey || e.ctrlKey || e.button === 1;
        if (!type || !this.isConnected() || !this.main || wantsNewTab) {
          return;
        }
        let href = target.href;
        let linkState = target.getAttribute(PHX_LINK_STATE);
        e.preventDefault();
        e.stopImmediatePropagation();
        if (this.pendingLink === href) {
          return;
        }
        this.requestDOMUpdate(() => {
          if (type === "patch") {
            this.pushHistoryPatch(href, linkState, target);
          } else if (type === "redirect") {
            this.historyRedirect(href, linkState);
          } else {
            throw new Error(`expected ${PHX_LIVE_LINK} to be "patch" or "redirect", got: ${type}`);
          }
        });
      }, false);
    }
    dispatchEvent(event, payload = {}) {
      dom_default.dispatchEvent(window, `phx:${event}`, { detail: payload });
    }
    dispatchEvents(events) {
      events.forEach(([event, payload]) => this.dispatchEvent(event, payload));
    }
    withPageLoading(info, callback) {
      dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: info });
      let done = () => dom_default.dispatchEvent(window, "phx:page-loading-stop", { detail: info });
      return callback ? callback(done) : done;
    }
    pushHistoryPatch(href, linkState, targetEl) {
      this.withPageLoading({ to: href, kind: "patch" }, (done) => {
        this.main.pushLinkPatch(href, targetEl, (linkRef) => {
          this.historyPatch(href, linkState, linkRef);
          done();
        });
      });
    }
    historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {
      if (!this.commitPendingLink(linkRef)) {
        return;
      }
      browser_default.pushState(linkState, { type: "patch", id: this.main.id }, href);
      this.registerNewLocation(window.location);
    }
    historyRedirect(href, linkState, flash) {
      let scroll = window.scrollY;
      this.withPageLoading({ to: href, kind: "redirect" }, (done) => {
        this.replaceMain(href, flash, () => {
          browser_default.pushState(linkState, { type: "redirect", id: this.main.id, scroll }, href);
          this.registerNewLocation(window.location);
          done();
        });
      });
    }
    replaceRootHistory() {
      browser_default.pushState("replace", { root: true, type: "patch", id: this.main.id });
    }
    registerNewLocation(newLocation) {
      let { pathname, search } = this.currentLocation;
      if (pathname + search === newLocation.pathname + newLocation.search) {
        return false;
      } else {
        this.currentLocation = clone(newLocation);
        return true;
      }
    }
    bindForms() {
      let iterations = 0;
      this.on("submit", (e) => {
        let phxEvent = e.target.getAttribute(this.binding("submit"));
        if (!phxEvent) {
          return;
        }
        e.preventDefault();
        e.target.disabled = true;
        this.withinOwners(e.target, (view) => {
          js_default.exec("submit", phxEvent, view, e.target, ["push", {}]);
        });
      }, false);
      for (let type of ["change", "input"]) {
        this.on(type, (e) => {
          let phxChange = this.binding("change");
          let input = e.target;
          let inputEvent = input.getAttribute(phxChange);
          let formEvent = input.form && input.form.getAttribute(phxChange);
          let phxEvent = inputEvent || formEvent;
          if (!phxEvent) {
            return;
          }
          if (input.type === "number" && input.validity && input.validity.badInput) {
            return;
          }
          let dispatcher = inputEvent ? input : input.form;
          let currentIterations = iterations;
          iterations++;
          let { at, type: lastType } = dom_default.private(input, "prev-iteration") || {};
          if (at === currentIterations - 1 && type !== lastType) {
            return;
          }
          dom_default.putPrivate(input, "prev-iteration", { at: currentIterations, type });
          this.debounce(input, e, type, () => {
            this.withinOwners(dispatcher, (view) => {
              dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);
              if (!dom_default.isTextualInput(input)) {
                this.setActiveElement(input);
              }
              js_default.exec("change", phxEvent, view, input, ["push", { _target: e.target.name, dispatcher }]);
            });
          });
        }, false);
      }
    }
    debounce(el, event, eventType, callback) {
      if (eventType === "blur" || eventType === "focusout") {
        return callback();
      }
      let phxDebounce = this.binding(PHX_DEBOUNCE);
      let phxThrottle = this.binding(PHX_THROTTLE);
      let defaultDebounce = this.defaults.debounce.toString();
      let defaultThrottle = this.defaults.throttle.toString();
      this.withinOwners(el, (view) => {
        let asyncFilter = () => !view.isDestroyed() && document.body.contains(el);
        dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, () => {
          callback();
        });
      });
    }
    silenceEvents(callback) {
      this.silenced = true;
      callback();
      this.silenced = false;
    }
    on(event, callback) {
      window.addEventListener(event, (e) => {
        if (!this.silenced) {
          callback(e);
        }
      });
    }
  };
  var TransitionSet = class {
    constructor() {
      this.transitions = /* @__PURE__ */ new Set();
      this.pendingOps = [];
      this.reset();
    }
    reset() {
      this.transitions.forEach((timer) => {
        cancelTimeout(timer);
        this.transitions.delete(timer);
      });
      this.flushPendingOps();
    }
    after(callback) {
      if (this.size() === 0) {
        callback();
      } else {
        this.pushPendingOp(callback);
      }
    }
    addTransition(time, onStart, onDone) {
      onStart();
      let timer = setTimeout(() => {
        this.transitions.delete(timer);
        onDone();
        if (this.size() === 0) {
          this.flushPendingOps();
        }
      }, time);
      this.transitions.add(timer);
    }
    pushPendingOp(op) {
      this.pendingOps.push(op);
    }
    size() {
      return this.transitions.size;
    }
    flushPendingOps() {
      this.pendingOps.forEach((op) => op());
      this.pendingOps = [];
    }
  };

  // js/app.js
  var import_topbar = __toESM(require_topbar());
  var import_wheelnav = __toESM(require_wheelnav());
  var Hooks2 = {};
  Hooks2.Temenos = {
    mounted() {
      this.handleEvent("loadAvatarMenu", (e) => {
        var template = document.getElementById("avatarmenuTemplate");
        var a = template.cloneNode(true);
        a.id = "avatarmenu";
        a.style.position = "fixed";
        a.style.height = 400 + "px";
        a.style.left = e.x + "px";
        a.style.top = e.y + "px";
        this.el.parentNode.appendChild(a);
        var avatarmenu = new import_wheelnav.default("avatarmenu");
        avatarmenu.wheelRadius = avatarmenu.wheelRadius * 0.83;
        avatarmenu.createWheel();
        avatarmenu.setTooltips(["Hand", "Move", "Stress", "Pierce", "Recover", "Destroy", "Defend"]);
      });
      this.handleEvent("loadTemenosMenu", (e) => {
        var template = document.getElementById("temenosmenuTemplate");
        var a = template.cloneNode(true);
        a.id = "temenosmenu";
        a.style.position = "fixed";
        a.style.height = 400 + "px";
        a.style.left = e.x + "px";
        a.style.top = e.y + "px";
        this.el.parentNode.appendChild(a);
        var temenosmenu = new import_wheelnav.default("temenosmenu");
        temenosmenu.wheelRadius = temenosmenu.wheelRadius * 0.83;
        temenosmenu.createWheel();
        temenosmenu.setTooltips(["Place Avatar", "Counters", "Show/Hide (GM Only)", "Target"]);
      });
      this.handleEvent("loadCardMenu", (e) => {
        console.log("foo");
        var template = document.getElementById("cardmenuTemplate");
        var a = template.cloneNode(true);
        a.id = "cardmenu";
        a.style.position = "fixed";
        a.style.height = 400 + "px";
        a.style.left = e.x + "px";
        a.style.top = e.y + "px";
        this.el.parentNode.appendChild(a);
        var cardmenu = new import_wheelnav.default("cardmenu");
        cardmenu.wheelRadius = cardmenu.wheelRadius * 0.83;
        cardmenu.createWheel();
        cardmenu.setTooltips(["Discard", "Destroy", "Copy", "Move", "Add To Deck", "Add To Top Of Deck", "Add To Hand"]);
      });
      this.handleEvent("drawLeaderLine", (e) => {
        console.log("request to draw leader line:");
        console.log(e);
        lineOpts = { hide: true, gradient: true, startPlugColor: "rgba(90, 90, 255, 0.8", endPlugColor: "rgba(255, 30, 100, 1.0)", dash: { animation: true } };
        var line = new LeaderLine(document.getElementById(e.src), document.getElementById(e.tgt), lineOpts);
        line.show("draw");
        setTimeout(() => {
          console.log("triggering timeout");
          line.hide("fade");
          setTimeout(() => {
            line.remove();
          }, 1e3);
        }, 1e4);
      });
      this.el.addEventListener("menuClick", (e) => {
        this.pushEvent("menuClick", { e: e.detail });
      });
      this.handleEvent("unloadAvatarMenu", (e) => {
      });
      this.handleEvent("unloadTemenosMenu", (e) => {
      });
      this.pushEvent("context", this.el.getBoundingClientRect());
      this.el.addEventListener("click", (e) => {
        this.pushEvent("click", getMousePosition(this.el, e));
      });
      this.el.addEventListener("mousemove", (e) => {
        this.pushEvent("move", getMousePosition(this.el, e));
      });
    }
  };
  function getMousePosition(canvas, e) {
    var rect = canvas.getBoundingClientRect();
    return {
      x: Math.round((e.clientX - rect.left) / (rect.right - rect.left) * 100),
      y: Math.round((e.clientY - rect.top) / (rect.bottom - rect.top) * 100),
      context: rect
    };
  }
  var csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
  var liveSocket = new LiveSocket("/live", Socket, {
    dom: {
      onBeforeElUpdated(from, to) {
        if (from._x_dataStack) {
          window.Alpine.clone(from, to);
        }
      }
    },
    params: { _csrf_token: csrfToken },
    hooks: Hooks2
  });
  import_topbar.default.config({ barColors: { 0: "#29d" }, shadowColor: "rgba(0, 0, 0, .3)" });
  window.addEventListener("phx:page-loading-start", (info) => import_topbar.default.show());
  window.addEventListener("phx:page-loading-stop", (info) => import_topbar.default.hide());
  liveSocket.connect();
  liveSocket.enableDebug();
  window.liveSocket = liveSocket;
})();
/**
 * @license MIT
 * topbar 1.0.0, 2021-01-06
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
//# sourceMappingURL=data:application/json;base64,
